
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001f2a  00001fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800074  00800074  00001fd2  2**0
                  ALLOC
  3 .stab         000022ec  00000000  00000000  00001fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001434  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000056f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000059a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000075ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009288  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000093e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009675  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009e43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 0a 	call	0x14aa	; 0x14aa <main>
      8a:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 0f 	jmp	0x1ef0	; 0x1ef0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
/* Description:
 * The Function responsible for setup the direction for the two motor
 * pins through the GPIO driver.
 */
void DcMotor_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* setup the pin direction*/
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID,1);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 d4 06 	call	0xda8	; 0xda8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN1_ID,1);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 d4 06 	call	0xda8	; 0xda8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_ENABLE_PORT_ID, DC_MOTOR_ENABLE_PIN_ID,1);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 d4 06 	call	0xda8	; 0xda8 <GPIO_setupPinDirection>

	/*stop the motor at the beginning*/
	GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID,0);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	62 e0       	ldi	r22, 0x02	; 2
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID,0);
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>

	/* Set the Enable bit*/
	GPIO_writePin(DC_MOTOR_ENABLE_PORT_ID, DC_MOTOR_ENABLE_PIN_ID,1);
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>

}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <DcMotor_Rotate>:
/* Description:
 * The function responsible for rotate the DC Motor CW/ or
 * A-CW or stop the motor based on the state input state value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	00 d0       	rcall	.+0      	; 0xb96 <DcMotor_Rotate+0x6>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <DcMotor_Rotate+0x8>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	89 83       	std	Y+1, r24	; 0x01
     b9e:	6a 83       	std	Y+2, r22	; 0x02
	/* Choose the state if off or clockwise or anti-clockwise */
	switch(state)
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	3c 83       	std	Y+4, r19	; 0x04
     ba8:	2b 83       	std	Y+3, r18	; 0x03
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	81 30       	cpi	r24, 0x01	; 1
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 f0       	breq	.+40     	; 0xbdc <DcMotor_Rotate+0x4c>
     bb4:	2b 81       	ldd	r18, Y+3	; 0x03
     bb6:	3c 81       	ldd	r19, Y+4	; 0x04
     bb8:	22 30       	cpi	r18, 0x02	; 2
     bba:	31 05       	cpc	r19, r1
     bbc:	d1 f0       	breq	.+52     	; 0xbf2 <DcMotor_Rotate+0x62>
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	00 97       	sbiw	r24, 0x00	; 0
     bc4:	01 f5       	brne	.+64     	; 0xc06 <DcMotor_Rotate+0x76>
	{
	case STOP_THE_MOTOR:
		GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID, LOGIC_LOW);
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN1_ID, LOGIC_LOW);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
     bda:	15 c0       	rjmp	.+42     	; 0xc06 <DcMotor_Rotate+0x76>
		break;
	case ROTATE_CLOCKWISE:
		GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID, LOGIC_HIGH);
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	62 e0       	ldi	r22, 0x02	; 2
     be0:	41 e0       	ldi	r20, 0x01	; 1
     be2:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN1_ID, LOGIC_LOW);
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <DcMotor_Rotate+0x76>
		break;
	case ROTATE_ANTI_CLOCKWISE:
		GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN0_ID, LOGIC_LOW);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_OUTPUT_PORT_ID, DC_MOTOR_OUTPUT_PIN1_ID, LOGIC_HIGH);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
		break;
	}
}
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <EEPROM_writeByte>:

/* Description:
 * A function to write the u8data to EEPROM
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	00 d0       	rcall	.+0      	; 0xc1a <EEPROM_writeByte+0x6>
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <EEPROM_writeByte+0x8>
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    I2C_start();
     c26:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <I2C_start>
    if (I2C_getStatus() != I2C_START)
     c2a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     c2e:	88 30       	cpi	r24, 0x08	; 8
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_writeByte+0x22>
        return ERROR;
     c32:	1c 82       	std	Y+4, r1	; 0x04
     c34:	28 c0       	rjmp	.+80     	; 0xc86 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	9a 81       	ldd	r25, Y+2	; 0x02
     c3a:	80 70       	andi	r24, 0x00	; 0
     c3c:	97 70       	andi	r25, 0x07	; 7
     c3e:	88 0f       	add	r24, r24
     c40:	89 2f       	mov	r24, r25
     c42:	88 1f       	adc	r24, r24
     c44:	99 0b       	sbc	r25, r25
     c46:	91 95       	neg	r25
     c48:	80 6a       	ori	r24, 0xA0	; 160
     c4a:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
     c4e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     c52:	88 31       	cpi	r24, 0x18	; 24
     c54:	11 f0       	breq	.+4      	; 0xc5a <EEPROM_writeByte+0x46>
        return ERROR;
     c56:	1c 82       	std	Y+4, r1	; 0x04
     c58:	16 c0       	rjmp	.+44     	; 0xc86 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
     c60:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     c64:	88 32       	cpi	r24, 0x28	; 40
     c66:	11 f0       	breq	.+4      	; 0xc6c <EEPROM_writeByte+0x58>
        return ERROR;
     c68:	1c 82       	std	Y+4, r1	; 0x04
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    I2C_writeByte(u8data);
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
     c72:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     c76:	88 32       	cpi	r24, 0x28	; 40
     c78:	11 f0       	breq	.+4      	; 0xc7e <EEPROM_writeByte+0x6a>
        return ERROR;
     c7a:	1c 82       	std	Y+4, r1	; 0x04
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    I2C_stop();
     c7e:	0e 94 02 0a 	call	0x1404	; 0x1404 <I2C_stop>
	return SUCCESS;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	8c 83       	std	Y+4, r24	; 0x04
     c86:	8c 81       	ldd	r24, Y+4	; 0x04

}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <EEPROM_readByte+0x6>
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <EEPROM_readByte+0x8>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	7c 83       	std	Y+4, r23	; 0x04
     caa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    I2C_start();
     cac:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <I2C_start>
    if (I2C_getStatus() != I2C_START)
     cb0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	11 f0       	breq	.+4      	; 0xcbc <EEPROM_readByte+0x26>
        return ERROR;
     cb8:	1d 82       	std	Y+5, r1	; 0x05
     cba:	44 c0       	rjmp	.+136    	; 0xd44 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
     cc0:	80 70       	andi	r24, 0x00	; 0
     cc2:	97 70       	andi	r25, 0x07	; 7
     cc4:	88 0f       	add	r24, r24
     cc6:	89 2f       	mov	r24, r25
     cc8:	88 1f       	adc	r24, r24
     cca:	99 0b       	sbc	r25, r25
     ccc:	91 95       	neg	r25
     cce:	80 6a       	ori	r24, 0xA0	; 160
     cd0:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
     cd4:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     cd8:	88 31       	cpi	r24, 0x18	; 24
     cda:	11 f0       	breq	.+4      	; 0xce0 <EEPROM_readByte+0x4a>
        return ERROR;
     cdc:	1d 82       	std	Y+5, r1	; 0x05
     cde:	32 c0       	rjmp	.+100    	; 0xd44 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
     ce6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     cea:	88 32       	cpi	r24, 0x28	; 40
     cec:	11 f0       	breq	.+4      	; 0xcf2 <EEPROM_readByte+0x5c>
        return ERROR;
     cee:	1d 82       	std	Y+5, r1	; 0x05
     cf0:	29 c0       	rjmp	.+82     	; 0xd44 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    I2C_start();
     cf2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <I2C_start>
    if (I2C_getStatus() != I2C_REP_START)
     cf6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     cfa:	80 31       	cpi	r24, 0x10	; 16
     cfc:	11 f0       	breq	.+4      	; 0xd02 <EEPROM_readByte+0x6c>
        return ERROR;
     cfe:	1d 82       	std	Y+5, r1	; 0x05
     d00:	21 c0       	rjmp	.+66     	; 0xd44 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	80 70       	andi	r24, 0x00	; 0
     d08:	97 70       	andi	r25, 0x07	; 7
     d0a:	88 0f       	add	r24, r24
     d0c:	89 2f       	mov	r24, r25
     d0e:	88 1f       	adc	r24, r24
     d10:	99 0b       	sbc	r25, r25
     d12:	91 95       	neg	r25
     d14:	81 6a       	ori	r24, 0xA1	; 161
     d16:	0e 94 0d 0a 	call	0x141a	; 0x141a <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_R_ACK)
     d1a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     d1e:	80 34       	cpi	r24, 0x40	; 64
     d20:	11 f0       	breq	.+4      	; 0xd26 <EEPROM_readByte+0x90>
        return ERROR;
     d22:	1d 82       	std	Y+5, r1	; 0x05
     d24:	0f c0       	rjmp	.+30     	; 0xd44 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = I2C_readByteWithNACK();
     d26:	0e 94 37 0a 	call	0x146e	; 0x146e <I2C_readByteWithNACK>
     d2a:	eb 81       	ldd	r30, Y+3	; 0x03
     d2c:	fc 81       	ldd	r31, Y+4	; 0x04
     d2e:	80 83       	st	Z, r24
    if (I2C_getStatus() != I2C_MR_DATA_NACK)
     d30:	0e 94 4a 0a 	call	0x1494	; 0x1494 <I2C_getStatus>
     d34:	88 35       	cpi	r24, 0x58	; 88
     d36:	11 f0       	breq	.+4      	; 0xd3c <EEPROM_readByte+0xa6>
        return ERROR;
     d38:	1d 82       	std	Y+5, r1	; 0x05
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    I2C_stop();
     d3c:	0e 94 02 0a 	call	0x1404	; 0x1404 <I2C_stop>

    return SUCCESS;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8d 83       	std	Y+5, r24	; 0x05
     d44:	8d 81       	ldd	r24, Y+5	; 0x05


}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	08 95       	ret

00000d56 <Buzzer_init>:
/*
 * Description :
 * A function to initialize the buzzer
 */
void Buzzer_init(void)
{
     d56:	df 93       	push	r29
     d58:	cf 93       	push	r28
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	/*Make the buzzer pin output pin*/
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	63 e0       	ldi	r22, 0x03	; 3
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	0e 94 d4 06 	call	0xda8	; 0xda8 <GPIO_setupPinDirection>

	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_INPUT);
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	63 e0       	ldi	r22, 0x03	; 3
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <Buzzer_on>:
/*
 * Description :
 * A function to turn on the buzzer
 */
void Buzzer_on(void)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
	/*Turn on the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	63 e0       	ldi	r22, 0x03	; 3
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <Buzzer_off>:
/*
 * Description :
 * A function to turn off the buzzer
 */
void Buzzer_off(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	/*Turn off the buzzer*/
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,PIN_INPUT);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	63 e0       	ldi	r22, 0x03	; 3
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	0e 94 f8 07 	call	0xff0	; 0xff0 <GPIO_writePin>
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	27 97       	sbiw	r28, 0x07	; 7
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	6a 83       	std	Y+2, r22	; 0x02
     dc0:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	88 30       	cpi	r24, 0x08	; 8
     dc6:	08 f0       	brcs	.+2      	; 0xdca <GPIO_setupPinDirection+0x22>
     dc8:	d2 c0       	rjmp	.+420    	; 0xf6e <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	09 f0       	breq	.+2      	; 0xdd2 <GPIO_setupPinDirection+0x2a>
     dd0:	63 c0       	rjmp	.+198    	; 0xe98 <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	3f 83       	std	Y+7, r19	; 0x07
     dda:	2e 83       	std	Y+6, r18	; 0x06
     ddc:	8e 81       	ldd	r24, Y+6	; 0x06
     dde:	9f 81       	ldd	r25, Y+7	; 0x07
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	e9 f0       	breq	.+58     	; 0xe20 <GPIO_setupPinDirection+0x78>
     de6:	2e 81       	ldd	r18, Y+6	; 0x06
     de8:	3f 81       	ldd	r19, Y+7	; 0x07
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	61 f1       	breq	.+88     	; 0xe48 <GPIO_setupPinDirection+0xa0>
     df0:	8e 81       	ldd	r24, Y+6	; 0x06
     df2:	9f 81       	ldd	r25, Y+7	; 0x07
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	e1 f5       	brne	.+120    	; 0xe70 <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
     df8:	aa e3       	ldi	r26, 0x3A	; 58
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea e3       	ldi	r30, 0x3A	; 58
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_setupPinDirection+0x6e>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_setupPinDirection+0x6a>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	a7 c0       	rjmp	.+334    	; 0xf6e <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
     e20:	a7 e3       	ldi	r26, 0x37	; 55
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e7 e3       	ldi	r30, 0x37	; 55
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0x96>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0x92>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	93 c0       	rjmp	.+294    	; 0xf6e <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
     e48:	a4 e3       	ldi	r26, 0x34	; 52
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e4 e3       	ldi	r30, 0x34	; 52
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <GPIO_setupPinDirection+0xbe>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <GPIO_setupPinDirection+0xba>
     e6a:	84 2b       	or	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	7f c0       	rjmp	.+254    	; 0xf6e <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
     e70:	a1 e3       	ldi	r26, 0x31	; 49
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e1 e3       	ldi	r30, 0x31	; 49
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <GPIO_setupPinDirection+0xe6>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <GPIO_setupPinDirection+0xe2>
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	6b c0       	rjmp	.+214    	; 0xf6e <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	88 23       	and	r24, r24
     e9c:	09 f0       	breq	.+2      	; 0xea0 <GPIO_setupPinDirection+0xf8>
     e9e:	67 c0       	rjmp	.+206    	; 0xf6e <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3d 83       	std	Y+5, r19	; 0x05
     ea8:	2c 83       	std	Y+4, r18	; 0x04
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	81 30       	cpi	r24, 0x01	; 1
     eb0:	91 05       	cpc	r25, r1
     eb2:	f9 f0       	breq	.+62     	; 0xef2 <GPIO_setupPinDirection+0x14a>
     eb4:	2c 81       	ldd	r18, Y+4	; 0x04
     eb6:	3d 81       	ldd	r19, Y+5	; 0x05
     eb8:	22 30       	cpi	r18, 0x02	; 2
     eba:	31 05       	cpc	r19, r1
     ebc:	79 f1       	breq	.+94     	; 0xf1c <GPIO_setupPinDirection+0x174>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	09 f0       	breq	.+2      	; 0xec8 <GPIO_setupPinDirection+0x120>
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
     ec8:	aa e3       	ldi	r26, 0x3A	; 58
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ea e3       	ldi	r30, 0x3A	; 58
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_setupPinDirection+0x13e>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_setupPinDirection+0x13a>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	3e c0       	rjmp	.+124    	; 0xf6e <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
     ef2:	a7 e3       	ldi	r26, 0x37	; 55
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e3       	ldi	r30, 0x37	; 55
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	48 2f       	mov	r20, r24
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 2e       	mov	r0, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <GPIO_setupPinDirection+0x168>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	0a 94       	dec	r0
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <GPIO_setupPinDirection+0x164>
     f14:	80 95       	com	r24
     f16:	84 23       	and	r24, r20
     f18:	8c 93       	st	X, r24
     f1a:	29 c0       	rjmp	.+82     	; 0xf6e <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
     f1c:	a4 e3       	ldi	r26, 0x34	; 52
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e4 e3       	ldi	r30, 0x34	; 52
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <GPIO_setupPinDirection+0x192>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <GPIO_setupPinDirection+0x18e>
     f3e:	80 95       	com	r24
     f40:	84 23       	and	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	14 c0       	rjmp	.+40     	; 0xf6e <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
     f46:	a1 e3       	ldi	r26, 0x31	; 49
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e1 e3       	ldi	r30, 0x31	; 49
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_setupPinDirection+0x1bc>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_setupPinDirection+0x1b8>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
     f6e:	27 96       	adiw	r28, 0x07	; 7
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <GPIO_setupPortDirection+0x6>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <GPIO_setupPortDirection+0x8>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	84 30       	cpi	r24, 0x04	; 4
     f94:	30 f5       	brcc	.+76     	; 0xfe2 <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3c 83       	std	Y+4, r19	; 0x04
     f9e:	2b 83       	std	Y+3, r18	; 0x03
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 05       	cpc	r25, r1
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <GPIO_setupPortDirection+0x46>
     faa:	2b 81       	ldd	r18, Y+3	; 0x03
     fac:	3c 81       	ldd	r19, Y+4	; 0x04
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	71 f0       	breq	.+28     	; 0xfd0 <GPIO_setupPortDirection+0x50>
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	79 f4       	brne	.+30     	; 0xfda <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
     fbc:	ea e3       	ldi	r30, 0x3A	; 58
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	80 83       	st	Z, r24
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
     fc6:	e7 e3       	ldi	r30, 0x37	; 55
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	80 83       	st	Z, r24
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
     fd0:	e4 e3       	ldi	r30, 0x34	; 52
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	80 83       	st	Z, r24
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
     fda:	e1 e3       	ldi	r30, 0x31	; 49
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	80 83       	st	Z, r24
			break;
		}
	}
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,uint8 direction)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	27 97       	sbiw	r28, 0x07	; 7
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	89 83       	std	Y+1, r24	; 0x01
    1006:	6a 83       	std	Y+2, r22	; 0x02
    1008:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	88 30       	cpi	r24, 0x08	; 8
    100e:	08 f0       	brcs	.+2      	; 0x1012 <GPIO_writePin+0x22>
    1010:	d9 c0       	rjmp	.+434    	; 0x11c4 <GPIO_writePin+0x1d4>
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	21 f0       	breq	.+8      	; 0x1020 <GPIO_writePin+0x30>
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	88 23       	and	r24, r24
    101c:	09 f0       	breq	.+2      	; 0x1020 <GPIO_writePin+0x30>
    101e:	d2 c0       	rjmp	.+420    	; 0x11c4 <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	09 f0       	breq	.+2      	; 0x1028 <GPIO_writePin+0x38>
    1026:	63 c0       	rjmp	.+198    	; 0x10ee <GPIO_writePin+0xfe>
		{
			switch(port_num)
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	3f 83       	std	Y+7, r19	; 0x07
    1030:	2e 83       	std	Y+6, r18	; 0x06
    1032:	8e 81       	ldd	r24, Y+6	; 0x06
    1034:	9f 81       	ldd	r25, Y+7	; 0x07
    1036:	81 30       	cpi	r24, 0x01	; 1
    1038:	91 05       	cpc	r25, r1
    103a:	e9 f0       	breq	.+58     	; 0x1076 <GPIO_writePin+0x86>
    103c:	2e 81       	ldd	r18, Y+6	; 0x06
    103e:	3f 81       	ldd	r19, Y+7	; 0x07
    1040:	22 30       	cpi	r18, 0x02	; 2
    1042:	31 05       	cpc	r19, r1
    1044:	61 f1       	breq	.+88     	; 0x109e <GPIO_writePin+0xae>
    1046:	8e 81       	ldd	r24, Y+6	; 0x06
    1048:	9f 81       	ldd	r25, Y+7	; 0x07
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	e1 f5       	brne	.+120    	; 0x10c6 <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
    104e:	ab e3       	ldi	r26, 0x3B	; 59
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	eb e3       	ldi	r30, 0x3B	; 59
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0x7c>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0x78>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	a7 c0       	rjmp	.+334    	; 0x11c4 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
    1076:	a8 e3       	ldi	r26, 0x38	; 56
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e8 e3       	ldi	r30, 0x38	; 56
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_writePin+0xa4>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_writePin+0xa0>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	93 c0       	rjmp	.+294    	; 0x11c4 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
    109e:	a5 e3       	ldi	r26, 0x35	; 53
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e3       	ldi	r30, 0x35	; 53
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <GPIO_writePin+0xcc>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <GPIO_writePin+0xc8>
    10c0:	84 2b       	or	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	7f c0       	rjmp	.+254    	; 0x11c4 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
    10c6:	a2 e3       	ldi	r26, 0x32	; 50
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e2 e3       	ldi	r30, 0x32	; 50
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <GPIO_writePin+0xf4>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <GPIO_writePin+0xf0>
    10e8:	84 2b       	or	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	6b c0       	rjmp	.+214    	; 0x11c4 <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	88 23       	and	r24, r24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <GPIO_writePin+0x106>
    10f4:	67 c0       	rjmp	.+206    	; 0x11c4 <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3d 83       	std	Y+5, r19	; 0x05
    10fe:	2c 83       	std	Y+4, r18	; 0x04
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	f9 f0       	breq	.+62     	; 0x1148 <GPIO_writePin+0x158>
    110a:	2c 81       	ldd	r18, Y+4	; 0x04
    110c:	3d 81       	ldd	r19, Y+5	; 0x05
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	79 f1       	breq	.+94     	; 0x1172 <GPIO_writePin+0x182>
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	09 f0       	breq	.+2      	; 0x111e <GPIO_writePin+0x12e>
    111c:	3f c0       	rjmp	.+126    	; 0x119c <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    111e:	ab e3       	ldi	r26, 0x3B	; 59
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <GPIO_writePin+0x14c>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <GPIO_writePin+0x148>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	3e c0       	rjmp	.+124    	; 0x11c4 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    1148:	a8 e3       	ldi	r26, 0x38	; 56
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e8 e3       	ldi	r30, 0x38	; 56
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_writePin+0x176>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_writePin+0x172>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	29 c0       	rjmp	.+82     	; 0x11c4 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    1172:	a5 e3       	ldi	r26, 0x35	; 53
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e3       	ldi	r30, 0x35	; 53
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	48 2f       	mov	r20, r24
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <GPIO_writePin+0x1a0>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <GPIO_writePin+0x19c>
    1194:	80 95       	com	r24
    1196:	84 23       	and	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    119c:	a2 e3       	ldi	r26, 0x32	; 50
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e2 e3       	ldi	r30, 0x32	; 50
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_writePin+0x1ca>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_writePin+0x1c6>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    11c4:	27 96       	adiw	r28, 0x07	; 7
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,uint8 direction)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <GPIO_writePort+0x6>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <GPIO_writePort+0x8>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	30 f5       	brcc	.+76     	; 0x1238 <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	91 05       	cpc	r25, r1
    11fe:	71 f0       	breq	.+28     	; 0x121c <GPIO_writePort+0x46>
    1200:	2b 81       	ldd	r18, Y+3	; 0x03
    1202:	3c 81       	ldd	r19, Y+4	; 0x04
    1204:	22 30       	cpi	r18, 0x02	; 2
    1206:	31 05       	cpc	r19, r1
    1208:	71 f0       	breq	.+28     	; 0x1226 <GPIO_writePort+0x50>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	79 f4       	brne	.+30     	; 0x1230 <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    1212:	eb e3       	ldi	r30, 0x3B	; 59
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    121c:	e8 e3       	ldi	r30, 0x38	; 56
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    1226:	e5 e3       	ldi	r30, 0x35	; 53
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	80 83       	st	Z, r24
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    1230:	e2 e3       	ldi	r30, 0x32	; 50
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	80 83       	st	Z, r24
			break;
		}
	}
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <GPIO_readPin+0x6>
    124c:	00 d0       	rcall	.+0      	; 0x124e <GPIO_readPin+0x8>
    124e:	0f 92       	push	r0
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	88 30       	cpi	r24, 0x08	; 8
    125c:	10 f0       	brcs	.+4      	; 0x1262 <GPIO_readPin+0x1c>
	{
		return 0;
    125e:	1d 82       	std	Y+5, r1	; 0x05
    1260:	5f c0       	rjmp	.+190    	; 0x1320 <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3c 83       	std	Y+4, r19	; 0x04
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	4b 81       	ldd	r20, Y+3	; 0x03
    126e:	5c 81       	ldd	r21, Y+4	; 0x04
    1270:	41 30       	cpi	r20, 0x01	; 1
    1272:	51 05       	cpc	r21, r1
    1274:	e9 f0       	breq	.+58     	; 0x12b0 <GPIO_readPin+0x6a>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	91 05       	cpc	r25, r1
    127e:	59 f1       	breq	.+86     	; 0x12d6 <GPIO_readPin+0x90>
    1280:	2b 81       	ldd	r18, Y+3	; 0x03
    1282:	3c 81       	ldd	r19, Y+4	; 0x04
    1284:	21 15       	cp	r18, r1
    1286:	31 05       	cpc	r19, r1
    1288:	c9 f5       	brne	.+114    	; 0x12fc <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    128a:	e9 e3       	ldi	r30, 0x39	; 57
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a9 01       	movw	r20, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <GPIO_readPin+0x5c>
    129e:	55 95       	asr	r21
    12a0:	47 95       	ror	r20
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <GPIO_readPin+0x58>
    12a6:	ca 01       	movw	r24, r20
    12a8:	58 2f       	mov	r21, r24
    12aa:	51 70       	andi	r21, 0x01	; 1
    12ac:	5d 83       	std	Y+5, r21	; 0x05
    12ae:	38 c0       	rjmp	.+112    	; 0x1320 <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    12b0:	e6 e3       	ldi	r30, 0x36	; 54
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a9 01       	movw	r20, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <GPIO_readPin+0x82>
    12c4:	55 95       	asr	r21
    12c6:	47 95       	ror	r20
    12c8:	8a 95       	dec	r24
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <GPIO_readPin+0x7e>
    12cc:	ca 01       	movw	r24, r20
    12ce:	58 2f       	mov	r21, r24
    12d0:	51 70       	andi	r21, 0x01	; 1
    12d2:	5d 83       	std	Y+5, r21	; 0x05
    12d4:	25 c0       	rjmp	.+74     	; 0x1320 <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    12d6:	e3 e3       	ldi	r30, 0x33	; 51
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_readPin+0xa8>
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_readPin+0xa4>
    12f2:	ca 01       	movw	r24, r20
    12f4:	58 2f       	mov	r21, r24
    12f6:	51 70       	andi	r21, 0x01	; 1
    12f8:	5d 83       	std	Y+5, r21	; 0x05
    12fa:	12 c0       	rjmp	.+36     	; 0x1320 <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    12fc:	e0 e3       	ldi	r30, 0x30	; 48
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a9 01       	movw	r20, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <GPIO_readPin+0xce>
    1310:	55 95       	asr	r21
    1312:	47 95       	ror	r20
    1314:	8a 95       	dec	r24
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <GPIO_readPin+0xca>
    1318:	ca 01       	movw	r24, r20
    131a:	58 2f       	mov	r21, r24
    131c:	51 70       	andi	r21, 0x01	; 1
    131e:	5d 83       	std	Y+5, r21	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	cf 91       	pop	r28
    132e:	df 91       	pop	r29
    1330:	08 95       	ret

00001332 <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	00 d0       	rcall	.+0      	; 0x1338 <GPIO_readPort+0x6>
    1338:	00 d0       	rcall	.+0      	; 0x133a <GPIO_readPort+0x8>
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	10 f0       	brcs	.+4      	; 0x134a <GPIO_readPort+0x18>
	{
		return 0;
    1346:	1c 82       	std	Y+4, r1	; 0x04
    1348:	26 c0       	rjmp	.+76     	; 0x1396 <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3b 83       	std	Y+3, r19	; 0x03
    1352:	2a 83       	std	Y+2, r18	; 0x02
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	9b 81       	ldd	r25, Y+3	; 0x03
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	71 f0       	breq	.+28     	; 0x137a <GPIO_readPort+0x48>
    135e:	2a 81       	ldd	r18, Y+2	; 0x02
    1360:	3b 81       	ldd	r19, Y+3	; 0x03
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	71 f0       	breq	.+28     	; 0x1384 <GPIO_readPort+0x52>
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	9b 81       	ldd	r25, Y+3	; 0x03
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	79 f4       	brne	.+30     	; 0x138e <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    1370:	e9 e3       	ldi	r30, 0x39	; 57
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	90 81       	ld	r25, Z
    1376:	9c 83       	std	Y+4, r25	; 0x04
    1378:	0e c0       	rjmp	.+28     	; 0x1396 <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    137a:	e6 e3       	ldi	r30, 0x36	; 54
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	20 81       	ld	r18, Z
    1380:	2c 83       	std	Y+4, r18	; 0x04
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    1384:	e3 e3       	ldi	r30, 0x33	; 51
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	30 81       	ld	r19, Z
    138a:	3c 83       	std	Y+4, r19	; 0x04
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <GPIO_readPort+0x64>
		default:
			return PINC;
    138e:	e3 e3       	ldi	r30, 0x33	; 51
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <I2C_init>:

/* Description :
 * A function to initialize the I2C with address and frequency
 */
void I2C_init(const I2C_ConfigType * config_ptr)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <I2C_init+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
	/* setup the prescaler and baud rate*/
	TWBR=config_ptr->bit_rate;
    13b4:	a0 e2       	ldi	r26, 0x20	; 32
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ba:	fa 81       	ldd	r31, Y+2	; 0x02
    13bc:	81 81       	ldd	r24, Z+1	; 0x01
    13be:	8c 93       	st	X, r24
	TWSR=0;
    13c0:	e1 e2       	ldi	r30, 0x21	; 33
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	10 82       	st	Z, r1

	/* For TWCR register : -
	 *  6 - enable ACK(is for receiving only!!)
	 *  2 - enable I2C
	 */
	TWCR=(1<<TWEN);
    13c6:	e6 e5       	ldi	r30, 0x56	; 86
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	84 e0       	ldi	r24, 0x04	; 4
    13cc:	80 83       	st	Z, r24

	/* Set the device address */
	TWAR=config_ptr->address;
    13ce:	a2 e2       	ldi	r26, 0x22	; 34
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e9 81       	ldd	r30, Y+1	; 0x01
    13d4:	fa 81       	ldd	r31, Y+2	; 0x02
    13d6:	80 81       	ld	r24, Z
    13d8:	8c 93       	st	X, r24
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <I2C_start>:

/* Description :
 * A function to send the start bit
 */
void I2C_start(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62

	/*send the start bit and clear the flag*/
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
    13ec:	e6 e5       	ldi	r30, 0x56	; 86
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	84 ea       	ldi	r24, 0xA4	; 164
    13f2:	80 83       	st	Z, r24

	/*Polling till the start is send(flag is set)*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    13f4:	e6 e5       	ldi	r30, 0x56	; 86
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	88 23       	and	r24, r24
    13fc:	dc f7       	brge	.-10     	; 0x13f4 <I2C_start+0x10>

}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <I2C_stop>:

/* Description :
 * A function to send stop bit
 */
void I2C_stop(void)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
	/*send the stop bit and clear the flag*/
	TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
    140c:	e6 e5       	ldi	r30, 0x56	; 86
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	84 e9       	ldi	r24, 0x94	; 148
    1412:	80 83       	st	Z, r24
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <I2C_writeByte>:

/* Description :
 * A function to send data
 */
void I2C_writeByte(uint8 data)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	0f 92       	push	r0
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	89 83       	std	Y+1, r24	; 0x01
	/* we write data to data register and clear the flag and enable the i2c
	 */
	TWDR=data;
    1426:	e3 e2       	ldi	r30, 0x23	; 35
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	80 83       	st	Z, r24
	TWCR=(1<<TWEN)|(1<<TWINT);
    142e:	e6 e5       	ldi	r30, 0x56	; 86
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	84 e8       	ldi	r24, 0x84	; 132
    1434:	80 83       	st	Z, r24

	/*Polling till the data is send(flag is set)*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1436:	e6 e5       	ldi	r30, 0x56	; 86
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	88 23       	and	r24, r24
    143e:	dc f7       	brge	.-10     	; 0x1436 <I2C_writeByte+0x1c>
}
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <I2C_readByteWithACK>:

/* Description :
 * A function to read data and reply with ACK,so you can receive more data
 */
uint8 I2C_readByteWithACK(void)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	/*Enable I2C and ACK and clear the flag*/
	TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);
    1450:	e6 e5       	ldi	r30, 0x56	; 86
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	84 ec       	ldi	r24, 0xC4	; 196
    1456:	80 83       	st	Z, r24

	/*polling till the data is received(flag is set)*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1458:	e6 e5       	ldi	r30, 0x56	; 86
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	88 23       	and	r24, r24
    1460:	dc f7       	brge	.-10     	; 0x1458 <I2C_readByteWithACK+0x10>

	/*Get the data from TWDR register(data register)*/
	return TWDR;
    1462:	e3 e2       	ldi	r30, 0x23	; 35
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z

}
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <I2C_readByteWithNACK>:

/* Description :
 * A function to read data and reply with NACK,so you can't receive more data
 */
uint8 I2C_readByteWithNACK(void)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	/*Enable I2C and clear the flag*/
	TWCR=(1<<TWEN)|(1<<TWINT);
    1476:	e6 e5       	ldi	r30, 0x56	; 86
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	84 e8       	ldi	r24, 0x84	; 132
    147c:	80 83       	st	Z, r24

	/*polling till the data is received(flag is set)*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    147e:	e6 e5       	ldi	r30, 0x56	; 86
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	88 23       	and	r24, r24
    1486:	dc f7       	brge	.-10     	; 0x147e <I2C_readByteWithNACK+0x10>

	/*Get the data from TWDR register(data register)*/
	return TWDR;
    1488:	e3 e2       	ldi	r30, 0x23	; 35
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z

}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <I2C_getStatus>:

/* Description :
 * A function to get the status of I2C
 */
uint8 I2C_getStatus(void)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
	/*we get the bits from 3 to 7*/
	return TWSR & 0b11111000;
    149c:	e1 e2       	ldi	r30, 0x21	; 33
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 7f       	andi	r24, 0xF8	; 248
}
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <main>:
#include"gpio.h"
#include<avr/io.h>
#include<avr/interrupt.h>

int main(void)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	27 97       	sbiw	r28, 0x07	; 7
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
	DcMotor_Init();
    14be:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_Init>
	Buzzer_init();
    14c2:	0e 94 ab 06 	call	0xd56	; 0xd56 <Buzzer_init>
	SREG |= (1<<7);
    14c6:	af e5       	ldi	r26, 0x5F	; 95
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ef e5       	ldi	r30, 0x5F	; 95
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	80 68       	ori	r24, 0x80	; 128
    14d2:	8c 93       	st	X, r24

	UART_ConfigType conf_UART;
	conf_UART.baud_rate=RATE_9600;
    14d4:	87 e6       	ldi	r24, 0x67	; 103
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9d 83       	std	Y+5, r25	; 0x05
    14da:	8c 83       	std	Y+4, r24	; 0x04
	conf_UART.bit_data=BitData_8;
    14dc:	83 e0       	ldi	r24, 0x03	; 3
    14de:	89 83       	std	Y+1, r24	; 0x01
	conf_UART.parity=NONE;
    14e0:	1a 82       	std	Y+2, r1	; 0x02
	conf_UART.stop_bit=BIT_1;
    14e2:	1b 82       	std	Y+3, r1	; 0x03
	UART_init(&conf_UART);
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <UART_init>

	/* I2C configurations structure */
	I2C_ConfigType i2cConfig = {0x20,0b0000010};
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	8e 83       	std	Y+6, r24	; 0x06
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	8f 83       	std	Y+7, r24	; 0x07

	/* initialize I2C */
	I2C_init(&i2cConfig);
    14f4:	ce 01       	movw	r24, r28
    14f6:	06 96       	adiw	r24, 0x06	; 6
    14f8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <I2C_init>

	while(1)
	{
		CONTROL_getOperation();
    14fc:	0e 94 81 0a 	call	0x1502	; 0x1502 <CONTROL_getOperation>
    1500:	fd cf       	rjmp	.-6      	; 0x14fc <main+0x52>

00001502 <CONTROL_getOperation>:
/*
 * Description : -
 * A function to get the operation from HMI micro
 */
void CONTROL_getOperation(void)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <CONTROL_getOperation+0x6>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62

	g_operation=CONTROL_recieveOperation();
    150c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <CONTROL_recieveOperation>
    1510:	80 93 6d 00 	sts	0x006D, r24

	/*Discuss the function which will be done due to operation*/
	switch(g_operation)
    1514:	80 91 6d 00 	lds	r24, 0x006D
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	3a 83       	std	Y+2, r19	; 0x02
    151e:	29 83       	std	Y+1, r18	; 0x01
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	91 05       	cpc	r25, r1
    1528:	29 f1       	breq	.+74     	; 0x1574 <CONTROL_getOperation+0x72>
    152a:	29 81       	ldd	r18, Y+1	; 0x01
    152c:	3a 81       	ldd	r19, Y+2	; 0x02
    152e:	25 30       	cpi	r18, 0x05	; 5
    1530:	31 05       	cpc	r19, r1
    1532:	5c f4       	brge	.+22     	; 0x154a <CONTROL_getOperation+0x48>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	91 05       	cpc	r25, r1
    153c:	89 f0       	breq	.+34     	; 0x1560 <CONTROL_getOperation+0x5e>
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	3a 81       	ldd	r19, Y+2	; 0x02
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	99 f0       	breq	.+38     	; 0x156e <CONTROL_getOperation+0x6c>
    1548:	29 c0       	rjmp	.+82     	; 0x159c <CONTROL_getOperation+0x9a>
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	85 30       	cpi	r24, 0x05	; 5
    1550:	91 05       	cpc	r25, r1
    1552:	b9 f0       	breq	.+46     	; 0x1582 <CONTROL_getOperation+0x80>
    1554:	29 81       	ldd	r18, Y+1	; 0x01
    1556:	3a 81       	ldd	r19, Y+2	; 0x02
    1558:	2a 30       	cpi	r18, 0x0A	; 10
    155a:	31 05       	cpc	r19, r1
    155c:	c9 f0       	breq	.+50     	; 0x1590 <CONTROL_getOperation+0x8e>
    155e:	1e c0       	rjmp	.+60     	; 0x159c <CONTROL_getOperation+0x9a>
	{
	case PASSWORD_SEND2CHANGE:
		g_functionPtr=CONTROL_changePasswordEEPROM;
    1560:	89 e7       	ldi	r24, 0x79	; 121
    1562:	9b e0       	ldi	r25, 0x0B	; 11
    1564:	90 93 76 00 	sts	0x0076, r25
    1568:	80 93 75 00 	sts	0x0075, r24
    156c:	17 c0       	rjmp	.+46     	; 0x159c <CONTROL_getOperation+0x9a>
		break;
	case PASSWORD_SEND2CONFIRM:
		CONTROL_writePasswordInEEPROM();
    156e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <CONTROL_writePasswordInEEPROM>
    1572:	14 c0       	rjmp	.+40     	; 0x159c <CONTROL_getOperation+0x9a>
		break;
	case PASSWORD_CHECK:
		g_functionPtr=CONTROL_checkPassword;
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	9b e0       	ldi	r25, 0x0B	; 11
    1578:	90 93 76 00 	sts	0x0076, r25
    157c:	80 93 75 00 	sts	0x0075, r24
    1580:	0d c0       	rjmp	.+26     	; 0x159c <CONTROL_getOperation+0x9a>
		break;
	case OPEN_DOOR:
		g_functionPtr=CONTROL_motorRotate;
    1582:	86 e8       	ldi	r24, 0x86	; 134
    1584:	9b e0       	ldi	r25, 0x0B	; 11
    1586:	90 93 76 00 	sts	0x0076, r25
    158a:	80 93 75 00 	sts	0x0075, r24
    158e:	06 c0       	rjmp	.+12     	; 0x159c <CONTROL_getOperation+0x9a>
		break;
	case TIME_1_WRONG:
		g_functionPtr=CONTROL_activeBuzzer;
    1590:	88 e0       	ldi	r24, 0x08	; 8
    1592:	9d e0       	ldi	r25, 0x0D	; 13
    1594:	90 93 76 00 	sts	0x0076, r25
    1598:	80 93 75 00 	sts	0x0075, r24
		break;
	}
	g_functionPtr();
    159c:	e0 91 75 00 	lds	r30, 0x0075
    15a0:	f0 91 76 00 	lds	r31, 0x0076
    15a4:	09 95       	icall
	g_functionPtr=NULL_PTR;
    15a6:	10 92 76 00 	sts	0x0076, r1
    15aa:	10 92 75 00 	sts	0x0075, r1

}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <CONTROL_recieveOperation>:
/*
 * Description : -
 * A function that recieve a Operation
 */
volatile uint8 CONTROL_recieveOperation(void)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
	/*Polling till we get a request for communication*/
	while(UART_recieveByte()!=START_COMM);
    15c0:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <UART_recieveByte>
    15c4:	8f 30       	cpi	r24, 0x0F	; 15
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <CONTROL_recieveOperation+0x8>

	/*tell the other micro that we are ready to recieve*/
	UART_sendByte(READY_RECIEVE);
    15c8:	8e e0       	ldi	r24, 0x0E	; 14
    15ca:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_sendByte>

	/*recieve the operation*/
	return UART_recieveByte();
    15ce:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <UART_recieveByte>
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <CONTROL_sendOperation>:
/*
 * Description : -
 * A function that send a Operation
 */
void CONTROL_sendOperation(uint8 op)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	0f 92       	push	r0
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	89 83       	std	Y+1, r24	; 0x01
	/*request communication*/
	UART_sendByte(START_COMM);
    15e4:	8f e0       	ldi	r24, 0x0F	; 15
    15e6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_sendByte>

	/*ready to recieve*/
	while(UART_recieveByte()!=READY_RECIEVE);
    15ea:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <UART_recieveByte>
    15ee:	8e 30       	cpi	r24, 0x0E	; 14
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <CONTROL_sendOperation+0x12>

	/*Send operation*/
	UART_sendByte(op);
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_sendByte>
}
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <CONTROL_checkPassword>:
 * A function to get the password from HMI micro and check it ,
 * and it returns PASS_MATCH if it the same password or return
 * PASS_MISMATCH if password doesn't match
 */
uint8 CONTROL_checkPassword(void)
{
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	00 d0       	rcall	.+0      	; 0x160a <CONTROL_checkPassword+0xa>
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62

	uint8 counter,temp;

	/*Get password from MC1*/
	for(counter=0;counter<5;counter++)
    1610:	19 82       	std	Y+1, r1	; 0x01
    1612:	0c c0       	rjmp	.+24     	; 0x162c <CONTROL_checkPassword+0x2c>
		g_pass[counter]=UART_recieveByte();
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	08 2f       	mov	r16, r24
    1618:	10 e0       	ldi	r17, 0x00	; 0
    161a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <UART_recieveByte>
    161e:	f8 01       	movw	r30, r16
    1620:	e8 59       	subi	r30, 0x98	; 152
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 83       	st	Z, r24
{

	uint8 counter,temp;

	/*Get password from MC1*/
	for(counter=0;counter<5;counter++)
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	85 30       	cpi	r24, 0x05	; 5
    1630:	88 f3       	brcs	.-30     	; 0x1614 <CONTROL_checkPassword+0x14>
		g_pass[counter]=UART_recieveByte();

	/*Get password from EEPROM*/
	for(counter=0;counter<5;counter++)
    1632:	19 82       	std	Y+1, r1	; 0x01
    1634:	1e c0       	rjmp	.+60     	; 0x1672 <CONTROL_checkPassword+0x72>
	{
		EEPROM_readByte(EEPROM_ADDRESS+counter,&temp);
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	88 2f       	mov	r24, r24
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	8f 5e       	subi	r24, 0xEF	; 239
    163e:	9c 4f       	sbci	r25, 0xFC	; 252
    1640:	9e 01       	movw	r18, r28
    1642:	2e 5f       	subi	r18, 0xFE	; 254
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	b9 01       	movw	r22, r18
    1648:	0e 94 4b 06 	call	0xc96	; 0xc96 <EEPROM_readByte>

		/*Password doesn't match*/
		if(temp!=g_pass[counter])
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	88 2f       	mov	r24, r24
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	fc 01       	movw	r30, r24
    1654:	e8 59       	subi	r30, 0x98	; 152
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	90 81       	ld	r25, Z
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	98 17       	cp	r25, r24
    165e:	31 f0       	breq	.+12     	; 0x166c <CONTROL_checkPassword+0x6c>
		{
			UART_sendByte(PASS_MISMATCH);
    1660:	80 e1       	ldi	r24, 0x10	; 16
    1662:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_sendByte>
			return PASS_MISMATCH;
    1666:	80 e1       	ldi	r24, 0x10	; 16
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <CONTROL_checkPassword+0x82>
	/*Get password from MC1*/
	for(counter=0;counter<5;counter++)
		g_pass[counter]=UART_recieveByte();

	/*Get password from EEPROM*/
	for(counter=0;counter<5;counter++)
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	85 30       	cpi	r24, 0x05	; 5
    1676:	f8 f2       	brcs	.-66     	; 0x1636 <CONTROL_checkPassword+0x36>
			return PASS_MISMATCH;
		}
	}

	/*Password match*/
	UART_sendByte(PASS_MATCH);
    1678:	81 e1       	ldi	r24, 0x11	; 17
    167a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_sendByte>
	return PASS_MATCH;
    167e:	81 e1       	ldi	r24, 0x11	; 17
    1680:	8b 83       	std	Y+3, r24	; 0x03
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	08 95       	ret

00001694 <CONTROL_writePasswordInEEPROM>:
/*
 * Description : -
 * A function to write new password in EEPROM
 */
void CONTROL_writePasswordInEEPROM(void)
{
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	0f 92       	push	r0
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	uint8 counter;
	for(counter=0;counter<5;counter++)
    16a2:	19 82       	std	Y+1, r1	; 0x01
    16a4:	1d c0       	rjmp	.+58     	; 0x16e0 <CONTROL_writePasswordInEEPROM+0x4c>
	{
		g_pass[counter]=UART_recieveByte();
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	08 2f       	mov	r16, r24
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <UART_recieveByte>
    16b0:	f8 01       	movw	r30, r16
    16b2:	e8 59       	subi	r30, 0x98	; 152
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 83       	st	Z, r24
		/*re-write the password*/
		EEPROM_writeByte(EEPROM_ADDRESS+counter,g_pass[counter]);
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	8f 5e       	subi	r24, 0xEF	; 239
    16c0:	9c 4f       	sbci	r25, 0xFC	; 252
    16c2:	ac 01       	movw	r20, r24
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	fc 01       	movw	r30, r24
    16cc:	e8 59       	subi	r30, 0x98	; 152
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	20 81       	ld	r18, Z
    16d2:	ca 01       	movw	r24, r20
    16d4:	62 2f       	mov	r22, r18
    16d6:	0e 94 0a 06 	call	0xc14	; 0xc14 <EEPROM_writeByte>
 * A function to write new password in EEPROM
 */
void CONTROL_writePasswordInEEPROM(void)
{
	uint8 counter;
	for(counter=0;counter<5;counter++)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	85 30       	cpi	r24, 0x05	; 5
    16e4:	00 f3       	brcs	.-64     	; 0x16a6 <CONTROL_writePasswordInEEPROM+0x12>
	{
		g_pass[counter]=UART_recieveByte();
		/*re-write the password*/
		EEPROM_writeByte(EEPROM_ADDRESS+counter,g_pass[counter]);
	}
}
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	08 95       	ret

000016f2 <CONTROL_changePasswordEEPROM>:
/*
 * Description : -
 * A function to change our password
 */
void CONTROL_changePasswordEEPROM(void)
{
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
	if(CONTROL_checkPassword()==PASS_MATCH)
    16fa:	0e 94 00 0b 	call	0x1600	; 0x1600 <CONTROL_checkPassword>
    16fe:	81 31       	cpi	r24, 0x11	; 17
    1700:	11 f4       	brne	.+4      	; 0x1706 <CONTROL_changePasswordEEPROM+0x14>
	{
		CONTROL_writePasswordInEEPROM();
    1702:	0e 94 4a 0b 	call	0x1694	; 0x1694 <CONTROL_writePasswordInEEPROM>
	}
}
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <CONTROL_motorRotate>:
/*
 * Description : -
 * A function to Rotate Motor
 */
void CONTROL_motorRotate(void)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	aa 97       	sbiw	r28, 0x2a	; 42
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
	/* Rotate motor clockwise*/
	DcMotor_Rotate(ROTATE_CLOCKWISE,5);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	65 e0       	ldi	r22, 0x05	; 5
    1724:	0e 94 c8 05 	call	0xb90	; 0xb90 <DcMotor_Rotate>
	delaySeconds(15);
    1728:	8f e0       	ldi	r24, 0x0F	; 15
    172a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <delaySeconds>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a6 e9       	ldi	r26, 0x96	; 150
    1734:	b3 e4       	ldi	r27, 0x43	; 67
    1736:	8f a3       	std	Y+39, r24	; 0x27
    1738:	98 a7       	std	Y+40, r25	; 0x28
    173a:	a9 a7       	std	Y+41, r26	; 0x29
    173c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	6f a1       	ldd	r22, Y+39	; 0x27
    1740:	78 a5       	ldd	r23, Y+40	; 0x28
    1742:	89 a5       	ldd	r24, Y+41	; 0x29
    1744:	9a a5       	ldd	r25, Y+42	; 0x2a
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	4a ef       	ldi	r20, 0xFA	; 250
    174c:	54 e4       	ldi	r21, 0x44	; 68
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	8b a3       	std	Y+35, r24	; 0x23
    1758:	9c a3       	std	Y+36, r25	; 0x24
    175a:	ad a3       	std	Y+37, r26	; 0x25
    175c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    175e:	6b a1       	ldd	r22, Y+35	; 0x23
    1760:	7c a1       	ldd	r23, Y+36	; 0x24
    1762:	8d a1       	ldd	r24, Y+37	; 0x25
    1764:	9e a1       	ldd	r25, Y+38	; 0x26
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e8       	ldi	r20, 0x80	; 128
    176c:	5f e3       	ldi	r21, 0x3F	; 63
    176e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1772:	88 23       	and	r24, r24
    1774:	2c f4       	brge	.+10     	; 0x1780 <CONTROL_motorRotate+0x74>
		__ticks = 1;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	9a a3       	std	Y+34, r25	; 0x22
    177c:	89 a3       	std	Y+33, r24	; 0x21
    177e:	3f c0       	rjmp	.+126    	; 0x17fe <CONTROL_motorRotate+0xf2>
	else if (__tmp > 65535)
    1780:	6b a1       	ldd	r22, Y+35	; 0x23
    1782:	7c a1       	ldd	r23, Y+36	; 0x24
    1784:	8d a1       	ldd	r24, Y+37	; 0x25
    1786:	9e a1       	ldd	r25, Y+38	; 0x26
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	3f ef       	ldi	r19, 0xFF	; 255
    178c:	4f e7       	ldi	r20, 0x7F	; 127
    178e:	57 e4       	ldi	r21, 0x47	; 71
    1790:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1794:	18 16       	cp	r1, r24
    1796:	4c f5       	brge	.+82     	; 0x17ea <CONTROL_motorRotate+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1798:	6f a1       	ldd	r22, Y+39	; 0x27
    179a:	78 a5       	ldd	r23, Y+40	; 0x28
    179c:	89 a5       	ldd	r24, Y+41	; 0x29
    179e:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9a a3       	std	Y+34, r25	; 0x22
    17be:	89 a3       	std	Y+33, r24	; 0x21
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <CONTROL_motorRotate+0xd4>
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	98 a3       	std	Y+32, r25	; 0x20
    17c8:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17cc:	98 a1       	ldd	r25, Y+32	; 0x20
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <CONTROL_motorRotate+0xc2>
    17d2:	98 a3       	std	Y+32, r25	; 0x20
    17d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	89 a1       	ldd	r24, Y+33	; 0x21
    17d8:	9a a1       	ldd	r25, Y+34	; 0x22
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9a a3       	std	Y+34, r25	; 0x22
    17de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	89 a1       	ldd	r24, Y+33	; 0x21
    17e2:	9a a1       	ldd	r25, Y+34	; 0x22
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <CONTROL_motorRotate+0xb6>
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <CONTROL_motorRotate+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	6b a1       	ldd	r22, Y+35	; 0x23
    17ec:	7c a1       	ldd	r23, Y+36	; 0x24
    17ee:	8d a1       	ldd	r24, Y+37	; 0x25
    17f0:	9e a1       	ldd	r25, Y+38	; 0x26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9a a3       	std	Y+34, r25	; 0x22
    17fc:	89 a3       	std	Y+33, r24	; 0x21
    17fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1800:	9a a1       	ldd	r25, Y+34	; 0x22
    1802:	9e 8f       	std	Y+30, r25	; 0x1e
    1804:	8d 8f       	std	Y+29, r24	; 0x1d
    1806:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1808:	9e 8d       	ldd	r25, Y+30	; 0x1e
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <CONTROL_motorRotate+0xfe>
    180e:	9e 8f       	std	Y+30, r25	; 0x1e
    1810:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);

	/* Stop motor */
	DcMotor_Rotate(STOP_THE_MOTOR,5);
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	65 e0       	ldi	r22, 0x05	; 5
    1816:	0e 94 c8 05 	call	0xb90	; 0xb90 <DcMotor_Rotate>
	delaySeconds(3);
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <delaySeconds>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a6 e9       	ldi	r26, 0x96	; 150
    1826:	b3 e4       	ldi	r27, 0x43	; 67
    1828:	89 8f       	std	Y+25, r24	; 0x19
    182a:	9a 8f       	std	Y+26, r25	; 0x1a
    182c:	ab 8f       	std	Y+27, r26	; 0x1b
    182e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	69 8d       	ldd	r22, Y+25	; 0x19
    1832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a ef       	ldi	r20, 0xFA	; 250
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8d 8b       	std	Y+21, r24	; 0x15
    184a:	9e 8b       	std	Y+22, r25	; 0x16
    184c:	af 8b       	std	Y+23, r26	; 0x17
    184e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1850:	6d 89       	ldd	r22, Y+21	; 0x15
    1852:	7e 89       	ldd	r23, Y+22	; 0x16
    1854:	8f 89       	ldd	r24, Y+23	; 0x17
    1856:	98 8d       	ldd	r25, Y+24	; 0x18
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <CONTROL_motorRotate+0x166>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 8b       	std	Y+20, r25	; 0x14
    186e:	8b 8b       	std	Y+19, r24	; 0x13
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <CONTROL_motorRotate+0x1e4>
	else if (__tmp > 65535)
    1872:	6d 89       	ldd	r22, Y+21	; 0x15
    1874:	7e 89       	ldd	r23, Y+22	; 0x16
    1876:	8f 89       	ldd	r24, Y+23	; 0x17
    1878:	98 8d       	ldd	r25, Y+24	; 0x18
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <CONTROL_motorRotate+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9c 8b       	std	Y+20, r25	; 0x14
    18b0:	8b 8b       	std	Y+19, r24	; 0x13
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <CONTROL_motorRotate+0x1c6>
    18b4:	88 ec       	ldi	r24, 0xC8	; 200
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9a 8b       	std	Y+18, r25	; 0x12
    18ba:	89 8b       	std	Y+17, r24	; 0x11
    18bc:	89 89       	ldd	r24, Y+17	; 0x11
    18be:	9a 89       	ldd	r25, Y+18	; 0x12
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <CONTROL_motorRotate+0x1b4>
    18c4:	9a 8b       	std	Y+18, r25	; 0x12
    18c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9c 8b       	std	Y+20, r25	; 0x14
    18d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	8b 89       	ldd	r24, Y+19	; 0x13
    18d4:	9c 89       	ldd	r25, Y+20	; 0x14
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <CONTROL_motorRotate+0x1a8>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <CONTROL_motorRotate+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6d 89       	ldd	r22, Y+21	; 0x15
    18de:	7e 89       	ldd	r23, Y+22	; 0x16
    18e0:	8f 89       	ldd	r24, Y+23	; 0x17
    18e2:	98 8d       	ldd	r25, Y+24	; 0x18
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9c 8b       	std	Y+20, r25	; 0x14
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	9c 89       	ldd	r25, Y+20	; 0x14
    18f4:	98 8b       	std	Y+16, r25	; 0x10
    18f6:	8f 87       	std	Y+15, r24	; 0x0f
    18f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fa:	98 89       	ldd	r25, Y+16	; 0x10
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <CONTROL_motorRotate+0x1f0>
    1900:	98 8b       	std	Y+16, r25	; 0x10
    1902:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);

	/* Rotate motor clockwise*/
	DcMotor_Rotate(ROTATE_ANTI_CLOCKWISE,5);
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	65 e0       	ldi	r22, 0x05	; 5
    1908:	0e 94 c8 05 	call	0xb90	; 0xb90 <DcMotor_Rotate>
	delaySeconds(15);
    190c:	8f e0       	ldi	r24, 0x0F	; 15
    190e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <delaySeconds>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a6 e9       	ldi	r26, 0x96	; 150
    1918:	b3 e4       	ldi	r27, 0x43	; 67
    191a:	8b 87       	std	Y+11, r24	; 0x0b
    191c:	9c 87       	std	Y+12, r25	; 0x0c
    191e:	ad 87       	std	Y+13, r26	; 0x0d
    1920:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a ef       	ldi	r20, 0xFA	; 250
    1930:	54 e4       	ldi	r21, 0x44	; 68
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8f 83       	std	Y+7, r24	; 0x07
    193c:	98 87       	std	Y+8, r25	; 0x08
    193e:	a9 87       	std	Y+9, r26	; 0x09
    1940:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <CONTROL_motorRotate+0x258>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <CONTROL_motorRotate+0x2d6>
	else if (__tmp > 65535)
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <CONTROL_motorRotate+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6b 85       	ldd	r22, Y+11	; 0x0b
    197e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	9e 85       	ldd	r25, Y+14	; 0x0e
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <CONTROL_motorRotate+0x2b8>
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <CONTROL_motorRotate+0x2a6>
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <CONTROL_motorRotate+0x29a>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <CONTROL_motorRotate+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <CONTROL_motorRotate+0x2e2>
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

	/* Stop motor */
	DcMotor_Rotate(STOP_THE_MOTOR,5);
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	65 e0       	ldi	r22, 0x05	; 5
    19fa:	0e 94 c8 05 	call	0xb90	; 0xb90 <DcMotor_Rotate>

}
    19fe:	aa 96       	adiw	r28, 0x2a	; 42
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <CONTROL_activeBuzzer>:
/*
 * Description : -
 * A function to active buzzer for 1 minute
 */
void CONTROL_activeBuzzer(void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62

	/*Turn on the buzzer*/
	Buzzer_on();
    1a18:	0e 94 bc 06 	call	0xd78	; 0xd78 <Buzzer_on>

	delaySeconds(20);
    1a1c:	84 e1       	ldi	r24, 0x14	; 20
    1a1e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <delaySeconds>

	Buzzer_off();
    1a22:	0e 94 c8 06 	call	0xd90	; 0xd90 <Buzzer_off>
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <delaySeconds>:
/*
 * Description : 
 * A function that counts the sec by causing an interrupt every second and increase our global variable
 */
void delaySeconds(uint8 sec)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	2c 97       	sbiw	r28, 0x0c	; 12
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	8f 83       	std	Y+7, r24	; 0x07
	/* setting the callBack function to count seconds */
	TIMER1_setCallBack(countSec);
    1a42:	8b e5       	ldi	r24, 0x5B	; 91
    1a44:	9d e0       	ldi	r25, 0x0D	; 13
    1a46:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <TIMER1_setCallBack>
	/* timer1 configurations to count sec per interrupt */
	Timer1_ConfigType timer1Config = {0,31250,N_256,COMPARE};
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	01 96       	adiw	r24, 0x01	; 1
    1a4e:	99 87       	std	Y+9, r25	; 0x09
    1a50:	88 87       	std	Y+8, r24	; 0x08
    1a52:	ee e6       	ldi	r30, 0x6E	; 110
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	fb 87       	std	Y+11, r31	; 0x0b
    1a58:	ea 87       	std	Y+10, r30	; 0x0a
    1a5a:	f6 e0       	ldi	r31, 0x06	; 6
    1a5c:	fc 87       	std	Y+12, r31	; 0x0c
    1a5e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a60:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a62:	00 80       	ld	r0, Z
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	9b 87       	std	Y+11, r25	; 0x0b
    1a6c:	8a 87       	std	Y+10, r24	; 0x0a
    1a6e:	e8 85       	ldd	r30, Y+8	; 0x08
    1a70:	f9 85       	ldd	r31, Y+9	; 0x09
    1a72:	00 82       	st	Z, r0
    1a74:	88 85       	ldd	r24, Y+8	; 0x08
    1a76:	99 85       	ldd	r25, Y+9	; 0x09
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	99 87       	std	Y+9, r25	; 0x09
    1a7c:	88 87       	std	Y+8, r24	; 0x08
    1a7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a80:	91 50       	subi	r25, 0x01	; 1
    1a82:	9c 87       	std	Y+12, r25	; 0x0c
    1a84:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a86:	ee 23       	and	r30, r30
    1a88:	51 f7       	brne	.-44     	; 0x1a5e <delaySeconds+0x32>

	TIMER1_init(&timer1Config);
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER1_init>
	while(g_sec < sec);
    1a92:	90 91 74 00 	lds	r25, 0x0074
    1a96:	8f 81       	ldd	r24, Y+7	; 0x07
    1a98:	98 17       	cp	r25, r24
    1a9a:	d8 f3       	brcs	.-10     	; 0x1a92 <delaySeconds+0x66>
	g_sec = 0;
    1a9c:	10 92 74 00 	sts	0x0074, r1
	TIMER1_deInit();
    1aa0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <TIMER1_deInit>

}
    1aa4:	2c 96       	adiw	r28, 0x0c	; 12
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	de bf       	out	0x3e, r29	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	cd bf       	out	0x3d, r28	; 61
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <countSec>:
/*
 * Description : 
 * A function that increase our global variable each second
 */
void countSec(void)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    1abe:	80 91 74 00 	lds	r24, 0x0074
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	80 93 74 00 	sts	0x0074, r24
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <__vector_9>:

/****************************Functions and ISRs*********************************/

/* Normal mode ISR */
ISR(TIMER1_OVF_vect)
{
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	2f 93       	push	r18
    1ada:	3f 93       	push	r19
    1adc:	4f 93       	push	r20
    1ade:	5f 93       	push	r21
    1ae0:	6f 93       	push	r22
    1ae2:	7f 93       	push	r23
    1ae4:	8f 93       	push	r24
    1ae6:	9f 93       	push	r25
    1ae8:	af 93       	push	r26
    1aea:	bf 93       	push	r27
    1aec:	ef 93       	push	r30
    1aee:	ff 93       	push	r31
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1af8:	80 91 77 00 	lds	r24, 0x0077
    1afc:	90 91 78 00 	lds	r25, 0x0078
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1b04:	e0 91 77 00 	lds	r30, 0x0077
    1b08:	f0 91 78 00 	lds	r31, 0x0078
    1b0c:	09 95       	icall
	}
}
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	ff 91       	pop	r31
    1b14:	ef 91       	pop	r30
    1b16:	bf 91       	pop	r27
    1b18:	af 91       	pop	r26
    1b1a:	9f 91       	pop	r25
    1b1c:	8f 91       	pop	r24
    1b1e:	7f 91       	pop	r23
    1b20:	6f 91       	pop	r22
    1b22:	5f 91       	pop	r21
    1b24:	4f 91       	pop	r20
    1b26:	3f 91       	pop	r19
    1b28:	2f 91       	pop	r18
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	0f 90       	pop	r0
    1b30:	1f 90       	pop	r1
    1b32:	18 95       	reti

00001b34 <__vector_7>:

/* Compare mode ISR */
ISR(TIMER1_COMPA_vect)
{
    1b34:	1f 92       	push	r1
    1b36:	0f 92       	push	r0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b5e:	80 91 77 00 	lds	r24, 0x0077
    1b62:	90 91 78 00 	lds	r25, 0x0078
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	29 f0       	breq	.+10     	; 0x1b74 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    1b6a:	e0 91 77 00 	lds	r30, 0x0077
    1b6e:	f0 91 78 00 	lds	r31, 0x0078
    1b72:	09 95       	icall
	}
}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	bf 91       	pop	r27
    1b7e:	af 91       	pop	r26
    1b80:	9f 91       	pop	r25
    1b82:	8f 91       	pop	r24
    1b84:	7f 91       	pop	r23
    1b86:	6f 91       	pop	r22
    1b88:	5f 91       	pop	r21
    1b8a:	4f 91       	pop	r20
    1b8c:	3f 91       	pop	r19
    1b8e:	2f 91       	pop	r18
    1b90:	0f 90       	pop	r0
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	0f 90       	pop	r0
    1b96:	1f 90       	pop	r1
    1b98:	18 95       	reti

00001b9a <TIMER1_init>:
/*
 * Description :
 * A function to initialize the timer
 */
void TIMER1_init(const Timer1_ConfigType* config_ptr)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <TIMER1_init+0x6>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
	 * For TCCR1A register : -
	 * non-pwm mode so FOC1A and FOC2A = 1
	 * in case of compare and normal mode , WGM11 & WGM10 & WGM13 = 0
	 * but only WGM12 = 1 in case of compare and equal to 0 in case of normal mode
	 */
	TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    1ba8:	ef e4       	ldi	r30, 0x4F	; 79
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8c e0       	ldi	r24, 0x0C	; 12
    1bae:	80 83       	st	Z, r24
	/*
	 * For TCCR1B register : -
	 * WGM12 = 1 -> Compare mode or 0 -> Normal mode
	 * CS12 : CS10 = prescaler value
	 */
	TCCR1B = ( config_ptr -> prescaler ) | ( ( config_ptr -> mode ) << WGM12 );
    1bb0:	ae e4       	ldi	r26, 0x4E	; 78
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb8:	84 81       	ldd	r24, Z+4	; 0x04
    1bba:	28 2f       	mov	r18, r24
    1bbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc0:	85 81       	ldd	r24, Z+5	; 0x05
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	82 2b       	or	r24, r18
    1bd4:	8c 93       	st	X, r24
	/*
	 * OCR1A and TCNT1 and TIMASK registers configurations : -
	 */

	/*Timer works in compare mode*/
	if(config_ptr->mode==COMPARE)
    1bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bda:	85 81       	ldd	r24, Z+5	; 0x05
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	71 f4       	brne	.+28     	; 0x1bfc <TIMER1_init+0x62>
	{
		/*
		 * For OCR1A register : -
		 * we put the max compare mode value here in case of compare mode only
		 */
		OCR1A = config_ptr -> compare_value;
    1be0:	aa e4       	ldi	r26, 0x4A	; 74
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e9 81       	ldd	r30, Y+1	; 0x01
    1be6:	fa 81       	ldd	r31, Y+2	; 0x02
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	11 96       	adiw	r26, 0x01	; 1
    1bee:	9c 93       	st	X, r25
    1bf0:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable compare mode (A) interrupt
		 */
		TIMSK=(1<<OCIE1A);
    1bf2:	e9 e5       	ldi	r30, 0x59	; 89
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 e1       	ldi	r24, 0x10	; 16
    1bf8:	80 83       	st	Z, r24
    1bfa:	12 c0       	rjmp	.+36     	; 0x1c20 <TIMER1_init+0x86>
	}

	/*Timer works in Normal mode*/
	else if(config_ptr->mode==NORMAL)
    1bfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1c00:	85 81       	ldd	r24, Z+5	; 0x05
    1c02:	88 23       	and	r24, r24
    1c04:	69 f4       	brne	.+26     	; 0x1c20 <TIMER1_init+0x86>
	{
		/*
		 * For TCNT1 register : -
		 * we put the initial counter value here
		 */
		TCNT1 = config_ptr -> initial_value;
    1c06:	ac e4       	ldi	r26, 0x4C	; 76
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c0e:	80 81       	ld	r24, Z
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	11 96       	adiw	r26, 0x01	; 1
    1c14:	9c 93       	st	X, r25
    1c16:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable Normal mode interrupt
		 */
		TIMSK = ( 1 << TOIE1 );
    1c18:	e9 e5       	ldi	r30, 0x59	; 89
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	80 83       	st	Z, r24
	}
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <TIMER1_deInit>:
/*
 * Description :
 * A function to disable the timer
 */
void TIMER1_deInit(void)
{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	/* clear all registers */
	TCCR1A = TCCR1B = TIMSK = TCNT1 = OCR1A = 0;
    1c32:	6f e4       	ldi	r22, 0x4F	; 79
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	4e e4       	ldi	r20, 0x4E	; 78
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	29 e5       	ldi	r18, 0x59	; 89
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	ac e4       	ldi	r26, 0x4C	; 76
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	ea e4       	ldi	r30, 0x4A	; 74
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	10 82       	st	Z, r1
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	11 96       	adiw	r26, 0x01	; 1
    1c50:	9c 93       	st	X, r25
    1c52:	8e 93       	st	-X, r24
    1c54:	8d 91       	ld	r24, X+
    1c56:	9c 91       	ld	r25, X
    1c58:	11 97       	sbiw	r26, 0x01	; 1
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	80 83       	st	Z, r24
    1c5e:	f9 01       	movw	r30, r18
    1c60:	80 81       	ld	r24, Z
    1c62:	fa 01       	movw	r30, r20
    1c64:	80 83       	st	Z, r24
    1c66:	fa 01       	movw	r30, r20
    1c68:	80 81       	ld	r24, Z
    1c6a:	fb 01       	movw	r30, r22
    1c6c:	80 83       	st	Z, r24
}
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <TIMER1_setCallBack>:
/*
 * Description : -
 * A function to set callback function
 */
void TIMER1_setCallBack(void ( *a_ptr ) ( void ))
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <TIMER1_setCallBack+0x6>
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	90 93 78 00 	sts	0x0078, r25
    1c8a:	80 93 77 00 	sts	0x0077, r24

}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <UART_init>:
 * Description :
 * A function to setup the UART with the given baud rate and number of send bits and parity
 * checker and number of stop bits .
 */
void UART_init(const UART_ConfigType* config)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <UART_init+0x6>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	/*double speed mode*/
	UCSRA = ( 1 << U2X );
    1ca6:	eb e2       	ldi	r30, 0x2B	; 43
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	80 83       	st	Z, r24

	/*Enable Transmitter and Receiver*/
	UCSRB = ( 1 << RXEN ) | ( 1 << TXEN );
    1cae:	ea e2       	ldi	r30, 0x2A	; 42
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	88 e1       	ldi	r24, 0x18	; 24
    1cb4:	80 83       	st	Z, r24

	/*Select register UCSRC*/
	UCSRC = ( 1 << URSEL );
    1cb6:	e0 e4       	ldi	r30, 0x40	; 64
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 e8       	ldi	r24, 0x80	; 128
    1cbc:	80 83       	st	Z, r24

	/*Parity checker*/
	UCSRC |= ( ( config -> parity & 1 ) << UPM0 ) | ( ( config -> parity & 2 )<< UPM1 );
    1cbe:	a0 e4       	ldi	r26, 0x40	; 64
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e0 e4       	ldi	r30, 0x40	; 64
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	38 2f       	mov	r19, r24
    1cca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cce:	81 81       	ldd	r24, Z+1	; 0x01
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	81 70       	andi	r24, 0x01	; 1
    1cd6:	90 70       	andi	r25, 0x00	; 0
    1cd8:	82 95       	swap	r24
    1cda:	92 95       	swap	r25
    1cdc:	90 7f       	andi	r25, 0xF0	; 240
    1cde:	98 27       	eor	r25, r24
    1ce0:	80 7f       	andi	r24, 0xF0	; 240
    1ce2:	98 27       	eor	r25, r24
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cea:	81 81       	ldd	r24, Z+1	; 0x01
    1cec:	88 2f       	mov	r24, r24
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	82 70       	andi	r24, 0x02	; 2
    1cf2:	90 70       	andi	r25, 0x00	; 0
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	82 95       	swap	r24
    1cfa:	92 95       	swap	r25
    1cfc:	90 7f       	andi	r25, 0xF0	; 240
    1cfe:	98 27       	eor	r25, r24
    1d00:	80 7f       	andi	r24, 0xF0	; 240
    1d02:	98 27       	eor	r25, r24
    1d04:	82 2b       	or	r24, r18
    1d06:	83 2b       	or	r24, r19
    1d08:	8c 93       	st	X, r24

	/*Number of stop bits*/
	UCSRC |= ( config->stop_bit) << USBS ;
    1d0a:	a0 e4       	ldi	r26, 0x40	; 64
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e0 e4       	ldi	r30, 0x40	; 64
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	28 2f       	mov	r18, r24
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	82 81       	ldd	r24, Z+2	; 0x02
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	82 2b       	or	r24, r18
    1d2e:	8c 93       	st	X, r24

	/*Character size*/
	UCSRC |= ( ( config -> bit_data & 1 ) << UCSZ0 ) | ( ( config -> bit_data & 2 ) << UCSZ1);
    1d30:	a0 e4       	ldi	r26, 0x40	; 64
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e0 e4       	ldi	r30, 0x40	; 64
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	38 2f       	mov	r19, r24
    1d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d40:	80 81       	ld	r24, Z
    1d42:	88 2f       	mov	r24, r24
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	81 70       	andi	r24, 0x01	; 1
    1d48:	90 70       	andi	r25, 0x00	; 0
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	28 2f       	mov	r18, r24
    1d50:	e9 81       	ldd	r30, Y+1	; 0x01
    1d52:	fa 81       	ldd	r31, Y+2	; 0x02
    1d54:	80 81       	ld	r24, Z
    1d56:	88 2f       	mov	r24, r24
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	82 70       	andi	r24, 0x02	; 2
    1d5c:	90 70       	andi	r25, 0x00	; 0
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	82 2b       	or	r24, r18
    1d68:	83 2b       	or	r24, r19
    1d6a:	8c 93       	st	X, r24

	/* Setup the baud rate value
	 * UBRRL = 1st 8 bits of rate
	 * UBRRh = The other bits
	 */
	UBRRL = (uint8) config -> baud_rate ;
    1d6c:	a9 e2       	ldi	r26, 0x29	; 41
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e9 81       	ldd	r30, Y+1	; 0x01
    1d72:	fa 81       	ldd	r31, Y+2	; 0x02
    1d74:	83 81       	ldd	r24, Z+3	; 0x03
    1d76:	94 81       	ldd	r25, Z+4	; 0x04
    1d78:	8c 93       	st	X, r24
	UBRRH = (config -> baud_rate) >> 8;
    1d7a:	a0 e4       	ldi	r26, 0x40	; 64
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d80:	fa 81       	ldd	r31, Y+2	; 0x02
    1d82:	83 81       	ldd	r24, Z+3	; 0x03
    1d84:	94 81       	ldd	r25, Z+4	; 0x04
    1d86:	89 2f       	mov	r24, r25
    1d88:	99 27       	eor	r25, r25
    1d8a:	8c 93       	st	X, r24
}
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <UART_sendByte>:
/*
 * Description :
 * A function to send a given byte using UART
 */
void UART_sendByte(const uint8 data)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	0f 92       	push	r0
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	89 83       	std	Y+1, r24	; 0x01
	/*Polling till the UDR register is empty*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    1da2:	eb e2       	ldi	r30, 0x2B	; 43
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	80 72       	andi	r24, 0x20	; 32
    1dae:	90 70       	andi	r25, 0x00	; 0
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	b9 f3       	breq	.-18     	; 0x1da2 <UART_sendByte+0xc>

	/*send the data*/
	UDR=data;
    1db4:	ec e2       	ldi	r30, 0x2C	; 44
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	80 83       	st	Z, r24

}
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <UART_recieveByte>:
/*
 * Description :
 * A function to return the received byte
 */
uint8 UART_recieveByte(void)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
	/*Polling till the receive is completed*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
    1dcc:	eb e2       	ldi	r30, 0x2B	; 43
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 23       	and	r24, r24
    1dd4:	dc f7       	brge	.-10     	; 0x1dcc <UART_recieveByte+0x8>

	/*get the data from UDR register and return it*/
	return UDR;
    1dd6:	ec e2       	ldi	r30, 0x2C	; 44
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z

}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <UART_sendString>:
 * Description :
 * A function to send a given string , u don't need to add anything after the end of string
 * but don't send a string that contain #
 */
void UART_sendString(const uint8 *str)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	00 d0       	rcall	.+0      	; 0x1de8 <UART_sendString+0x6>
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <UART_sendString+0x8>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
	int counter;

	/*Sending our string*/
	for(counter=0;str[counter]!=NULL_PTR;counter++)
    1df2:	1a 82       	std	Y+2, r1	; 0x02
    1df4:	19 82       	std	Y+1, r1	; 0x01
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <UART_sendString+0x34>
		UART_sendByte(str[counter]);
    1df8:	29 81       	ldd	r18, Y+1	; 0x01
    1dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	fc 01       	movw	r30, r24
    1e02:	e2 0f       	add	r30, r18
    1e04:	f3 1f       	adc	r31, r19
    1e06:	80 81       	ld	r24, Z
    1e08:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_sendByte>
void UART_sendString(const uint8 *str)
{
	int counter;

	/*Sending our string*/
	for(counter=0;str[counter]!=NULL_PTR;counter++)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	29 81       	ldd	r18, Y+1	; 0x01
    1e18:	3a 81       	ldd	r19, Y+2	; 0x02
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	fc 01       	movw	r30, r24
    1e20:	e2 0f       	add	r30, r18
    1e22:	f3 1f       	adc	r31, r19
    1e24:	80 81       	ld	r24, Z
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	29 f7       	brne	.-54     	; 0x1df8 <UART_sendString+0x16>
		UART_sendByte(str[counter]);

	/*Sending # as an indication for the end of string*/
	UART_sendByte('#');
    1e2e:	83 e2       	ldi	r24, 0x23	; 35
    1e30:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_sendByte>

}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <UART_receiveString>:
/*
 * Description :
 * A function that receive a string ended by #
 */
void UART_receiveString(uint8 *str)
{
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <UART_receiveString+0xa>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <UART_receiveString+0xc>
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
	int counter;

	/*Receive the first byte*/
	str[0]=UART_recieveByte();
    1e56:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <UART_recieveByte>
    1e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1e5e:	80 83       	st	Z, r24
    1e60:	10 c0       	rjmp	.+32     	; 0x1e82 <UART_receiveString+0x40>

	/*Receive the remaining bytes till #*/
	while(str[counter]!='#')
	{
		counter++;
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	9a 83       	std	Y+2, r25	; 0x02
    1e6a:	89 83       	std	Y+1, r24	; 0x01
		str[counter]=UART_recieveByte();
    1e6c:	29 81       	ldd	r18, Y+1	; 0x01
    1e6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	8c 01       	movw	r16, r24
    1e76:	02 0f       	add	r16, r18
    1e78:	13 1f       	adc	r17, r19
    1e7a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <UART_recieveByte>
    1e7e:	f8 01       	movw	r30, r16
    1e80:	80 83       	st	Z, r24

	/*Receive the first byte*/
	str[0]=UART_recieveByte();

	/*Receive the remaining bytes till #*/
	while(str[counter]!='#')
    1e82:	29 81       	ldd	r18, Y+1	; 0x01
    1e84:	3a 81       	ldd	r19, Y+2	; 0x02
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
    1e90:	80 81       	ld	r24, Z
    1e92:	83 32       	cpi	r24, 0x23	; 35
    1e94:	31 f7       	brne	.-52     	; 0x1e62 <UART_receiveString+0x20>
		counter++;
		str[counter]=UART_recieveByte();
	}

	/*replace # with NULL*/
	str[counter]='\0';
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	f9 01       	movw	r30, r18
    1ea0:	e8 0f       	add	r30, r24
    1ea2:	f9 1f       	adc	r31, r25
    1ea4:	10 82       	st	Z, r1
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	08 95       	ret

00001eb8 <__prologue_saves__>:
    1eb8:	2f 92       	push	r2
    1eba:	3f 92       	push	r3
    1ebc:	4f 92       	push	r4
    1ebe:	5f 92       	push	r5
    1ec0:	6f 92       	push	r6
    1ec2:	7f 92       	push	r7
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	ca 1b       	sub	r28, r26
    1ee2:	db 0b       	sbc	r29, r27
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	09 94       	ijmp

00001ef0 <__epilogue_restores__>:
    1ef0:	2a 88       	ldd	r2, Y+18	; 0x12
    1ef2:	39 88       	ldd	r3, Y+17	; 0x11
    1ef4:	48 88       	ldd	r4, Y+16	; 0x10
    1ef6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ef8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1efa:	7d 84       	ldd	r7, Y+13	; 0x0d
    1efc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1efe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f00:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f02:	b9 84       	ldd	r11, Y+9	; 0x09
    1f04:	c8 84       	ldd	r12, Y+8	; 0x08
    1f06:	df 80       	ldd	r13, Y+7	; 0x07
    1f08:	ee 80       	ldd	r14, Y+6	; 0x06
    1f0a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f0c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f0e:	1b 81       	ldd	r17, Y+3	; 0x03
    1f10:	aa 81       	ldd	r26, Y+2	; 0x02
    1f12:	b9 81       	ldd	r27, Y+1	; 0x01
    1f14:	ce 0f       	add	r28, r30
    1f16:	d1 1d       	adc	r29, r1
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	ed 01       	movw	r28, r26
    1f24:	08 95       	ret

00001f26 <_exit>:
    1f26:	f8 94       	cli

00001f28 <__stop_program>:
    1f28:	ff cf       	rjmp	.-2      	; 0x1f28 <__stop_program>
