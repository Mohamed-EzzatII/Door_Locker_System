
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015a  00800060  00004454  000044e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001ba  008001ba  00004642  2**0
                  ALLOC
  3 .stab         00003b7c  00000000  00000000  00004644  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001341  00000000  00000000  000081c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009501  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009661  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000097f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b835  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c936  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d8b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000da38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000dcfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <main>
      8a:	0c 94 28 22 	jmp	0x4450	; 0x4450 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 21 	jmp	0x4370	; 0x4370 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 21 	jmp	0x4370	; 0x4370 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 21 	jmp	0x4358	; 0x4358 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 21 	jmp	0x4390	; 0x4390 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ea       	ldi	r22, 0xAC	; 172
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b8 21 	jmp	0x4370	; 0x4370 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b8 21 	jmp	0x4370	; 0x4370 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b8 21 	jmp	0x4370	; 0x4370 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d4 21 	jmp	0x43a8	; 0x43a8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bc 21 	jmp	0x4378	; 0x4378 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d8 21 	jmp	0x43b0	; 0x43b0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HMI_recieveOperation>:
/*
 * Description : -
 * A function that recieve a Operation
 */
volatile uint8 HMI_recieveOperation(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*Polling till we get a request for communication*/
	while(UART_recieveByte()!=START_COMM);
     ca6:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
     caa:	8f 30       	cpi	r24, 0x0F	; 15
     cac:	e1 f7       	brne	.-8      	; 0xca6 <HMI_recieveOperation+0x8>

	/*tell the other micro that we are ready to recieve*/
	UART_sendByte(READY_RECIEVE);
     cae:	8e e0       	ldi	r24, 0x0E	; 14
     cb0:	0e 94 1d 21 	call	0x423a	; 0x423a <UART_sendByte>

	/*recieve the operation*/
	return UART_recieveByte();
     cb4:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <HMI_sendOperation>:
/*
 * Description : -
 * A function that send a Operation
 */
void HMI_sendOperation(uint8 op)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	0f 92       	push	r0
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	89 83       	std	Y+1, r24	; 0x01
	/*request communication*/
	UART_sendByte(START_COMM);
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	0e 94 1d 21 	call	0x423a	; 0x423a <UART_sendByte>

	/*ready to recieve*/
	while(UART_recieveByte()!=READY_RECIEVE);
     cd0:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
     cd4:	8e 30       	cpi	r24, 0x0E	; 14
     cd6:	e1 f7       	brne	.-8      	; 0xcd0 <HMI_sendOperation+0x12>

	/*Send operation*/
	UART_sendByte(op);
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	0e 94 1d 21 	call	0x423a	; 0x423a <UART_sendByte>
}
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <HMI_sendPassword>:
/* Description
 * A function to get the password from user while entering it
 * and send it to control ECU .
 */
volatile void HMI_sendPassword(uint8 row,uint8 col,uint8 op)
{
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	ca 54       	subi	r28, 0x4A	; 74
     cf4:	d0 40       	sbci	r29, 0x00	; 0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	fe 01       	movw	r30, r28
     d02:	e8 5b       	subi	r30, 0xB8	; 184
     d04:	ff 4f       	sbci	r31, 0xFF	; 255
     d06:	80 83       	st	Z, r24
     d08:	fe 01       	movw	r30, r28
     d0a:	e7 5b       	subi	r30, 0xB7	; 183
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	60 83       	st	Z, r22
     d10:	fe 01       	movw	r30, r28
     d12:	e6 5b       	subi	r30, 0xB6	; 182
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	40 83       	st	Z, r20
	uint8 counter=0;
     d18:	fe 01       	movw	r30, r28
     d1a:	e9 5b       	subi	r30, 0xB9	; 185
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	10 82       	st	Z, r1

	/* Sending our operation to MC2 and ask him to start*/
	HMI_sendOperation(op);
     d20:	fe 01       	movw	r30, r28
     d22:	e6 5b       	subi	r30, 0xB6	; 182
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	80 81       	ld	r24, Z
     d28:	0e 94 5f 06 	call	0xcbe	; 0xcbe <HMI_sendOperation>
     d2c:	fe 01       	movw	r30, r28
     d2e:	ed 5b       	subi	r30, 0xBD	; 189
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	a6 e9       	ldi	r26, 0x96	; 150
     d38:	b3 e4       	ldi	r27, 0x43	; 67
     d3a:	80 83       	st	Z, r24
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	a2 83       	std	Z+2, r26	; 0x02
     d40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d42:	8e 01       	movw	r16, r28
     d44:	01 5c       	subi	r16, 0xC1	; 193
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	fe 01       	movw	r30, r28
     d4a:	ed 5b       	subi	r30, 0xBD	; 189
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	60 81       	ld	r22, Z
     d50:	71 81       	ldd	r23, Z+1	; 0x01
     d52:	82 81       	ldd	r24, Z+2	; 0x02
     d54:	93 81       	ldd	r25, Z+3	; 0x03
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	4a ef       	ldi	r20, 0xFA	; 250
     d5c:	54 e4       	ldi	r21, 0x44	; 68
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	f8 01       	movw	r30, r16
     d68:	80 83       	st	Z, r24
     d6a:	91 83       	std	Z+1, r25	; 0x01
     d6c:	a2 83       	std	Z+2, r26	; 0x02
     d6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d70:	fe 01       	movw	r30, r28
     d72:	ff 96       	adiw	r30, 0x3f	; 63
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <HMI_sendPassword+0xb0>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e af       	std	Y+62, r25	; 0x3e
     d92:	8d af       	std	Y+61, r24	; 0x3d
     d94:	46 c0       	rjmp	.+140    	; 0xe22 <HMI_sendPassword+0x13c>
	else if (__tmp > 65535)
     d96:	fe 01       	movw	r30, r28
     d98:	ff 96       	adiw	r30, 0x3f	; 63
     d9a:	60 81       	ld	r22, Z
     d9c:	71 81       	ldd	r23, Z+1	; 0x01
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	64 f5       	brge	.+88     	; 0xe0a <HMI_sendPassword+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	fe 01       	movw	r30, r28
     db4:	ed 5b       	subi	r30, 0xBD	; 189
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e af       	std	Y+62, r25	; 0x3e
     dde:	8d af       	std	Y+61, r24	; 0x3d
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <HMI_sendPassword+0x11a>
     de2:	88 ec       	ldi	r24, 0xC8	; 200
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c af       	std	Y+60, r25	; 0x3c
     de8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dea:	8b ad       	ldd	r24, Y+59	; 0x3b
     dec:	9c ad       	ldd	r25, Y+60	; 0x3c
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <HMI_sendPassword+0x108>
     df2:	9c af       	std	Y+60, r25	; 0x3c
     df4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8d ad       	ldd	r24, Y+61	; 0x3d
     df8:	9e ad       	ldd	r25, Y+62	; 0x3e
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e af       	std	Y+62, r25	; 0x3e
     dfe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8d ad       	ldd	r24, Y+61	; 0x3d
     e02:	9e ad       	ldd	r25, Y+62	; 0x3e
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <HMI_sendPassword+0xfc>
     e08:	16 c0       	rjmp	.+44     	; 0xe36 <HMI_sendPassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	fe 01       	movw	r30, r28
     e0c:	ff 96       	adiw	r30, 0x3f	; 63
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	9e af       	std	Y+62, r25	; 0x3e
     e20:	8d af       	std	Y+61, r24	; 0x3d
     e22:	8d ad       	ldd	r24, Y+61	; 0x3d
     e24:	9e ad       	ldd	r25, Y+62	; 0x3e
     e26:	9a af       	std	Y+58, r25	; 0x3a
     e28:	89 af       	std	Y+57, r24	; 0x39
     e2a:	89 ad       	ldd	r24, Y+57	; 0x39
     e2c:	9a ad       	ldd	r25, Y+58	; 0x3a
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	f1 f7       	brne	.-4      	; 0xe2e <HMI_sendPassword+0x148>
     e32:	9a af       	std	Y+58, r25	; 0x3a
     e34:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(300);

	/*Move LCD cursor to the place which we will get password from*/
	LCD_moveCursor(row,col);
     e36:	fe 01       	movw	r30, r28
     e38:	e8 5b       	subi	r30, 0xB8	; 184
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	de 01       	movw	r26, r28
     e3e:	a7 5b       	subi	r26, 0xB7	; 183
     e40:	bf 4f       	sbci	r27, 0xFF	; 255
     e42:	80 81       	ld	r24, Z
     e44:	6c 91       	ld	r22, X
     e46:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a6 e9       	ldi	r26, 0x96	; 150
     e50:	b3 e4       	ldi	r27, 0x43	; 67
     e52:	8d ab       	std	Y+53, r24	; 0x35
     e54:	9e ab       	std	Y+54, r25	; 0x36
     e56:	af ab       	std	Y+55, r26	; 0x37
     e58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5a:	6d a9       	ldd	r22, Y+53	; 0x35
     e5c:	7e a9       	ldd	r23, Y+54	; 0x36
     e5e:	8f a9       	ldd	r24, Y+55	; 0x37
     e60:	98 ad       	ldd	r25, Y+56	; 0x38
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a ef       	ldi	r20, 0xFA	; 250
     e68:	54 e4       	ldi	r21, 0x44	; 68
     e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	89 ab       	std	Y+49, r24	; 0x31
     e74:	9a ab       	std	Y+50, r25	; 0x32
     e76:	ab ab       	std	Y+51, r26	; 0x33
     e78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e7a:	69 a9       	ldd	r22, Y+49	; 0x31
     e7c:	7a a9       	ldd	r23, Y+50	; 0x32
     e7e:	8b a9       	ldd	r24, Y+51	; 0x33
     e80:	9c a9       	ldd	r25, Y+52	; 0x34
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e8       	ldi	r20, 0x80	; 128
     e88:	5f e3       	ldi	r21, 0x3F	; 63
     e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e8e:	88 23       	and	r24, r24
     e90:	2c f4       	brge	.+10     	; 0xe9c <HMI_sendPassword+0x1b6>
		__ticks = 1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	98 ab       	std	Y+48, r25	; 0x30
     e98:	8f a7       	std	Y+47, r24	; 0x2f
     e9a:	3f c0       	rjmp	.+126    	; 0xf1a <HMI_sendPassword+0x234>
	else if (__tmp > 65535)
     e9c:	69 a9       	ldd	r22, Y+49	; 0x31
     e9e:	7a a9       	ldd	r23, Y+50	; 0x32
     ea0:	8b a9       	ldd	r24, Y+51	; 0x33
     ea2:	9c a9       	ldd	r25, Y+52	; 0x34
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	3f ef       	ldi	r19, 0xFF	; 255
     ea8:	4f e7       	ldi	r20, 0x7F	; 127
     eaa:	57 e4       	ldi	r21, 0x47	; 71
     eac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	4c f5       	brge	.+82     	; 0xf06 <HMI_sendPassword+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb4:	6d a9       	ldd	r22, Y+53	; 0x35
     eb6:	7e a9       	ldd	r23, Y+54	; 0x36
     eb8:	8f a9       	ldd	r24, Y+55	; 0x37
     eba:	98 ad       	ldd	r25, Y+56	; 0x38
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e2       	ldi	r20, 0x20	; 32
     ec2:	51 e4       	ldi	r21, 0x41	; 65
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	bc 01       	movw	r22, r24
     ece:	cd 01       	movw	r24, r26
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	98 ab       	std	Y+48, r25	; 0x30
     eda:	8f a7       	std	Y+47, r24	; 0x2f
     edc:	0f c0       	rjmp	.+30     	; 0xefc <HMI_sendPassword+0x216>
     ede:	88 ec       	ldi	r24, 0xC8	; 200
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9e a7       	std	Y+46, r25	; 0x2e
     ee4:	8d a7       	std	Y+45, r24	; 0x2d
     ee6:	8d a5       	ldd	r24, Y+45	; 0x2d
     ee8:	9e a5       	ldd	r25, Y+46	; 0x2e
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <HMI_sendPassword+0x204>
     eee:	9e a7       	std	Y+46, r25	; 0x2e
     ef0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ef4:	98 a9       	ldd	r25, Y+48	; 0x30
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	98 ab       	std	Y+48, r25	; 0x30
     efa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efc:	8f a5       	ldd	r24, Y+47	; 0x2f
     efe:	98 a9       	ldd	r25, Y+48	; 0x30
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	69 f7       	brne	.-38     	; 0xede <HMI_sendPassword+0x1f8>
     f04:	14 c0       	rjmp	.+40     	; 0xf2e <HMI_sendPassword+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f06:	69 a9       	ldd	r22, Y+49	; 0x31
     f08:	7a a9       	ldd	r23, Y+50	; 0x32
     f0a:	8b a9       	ldd	r24, Y+51	; 0x33
     f0c:	9c a9       	ldd	r25, Y+52	; 0x34
     f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	98 ab       	std	Y+48, r25	; 0x30
     f18:	8f a7       	std	Y+47, r24	; 0x2f
     f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f1c:	98 a9       	ldd	r25, Y+48	; 0x30
     f1e:	9c a7       	std	Y+44, r25	; 0x2c
     f20:	8b a7       	std	Y+43, r24	; 0x2b
     f22:	8b a5       	ldd	r24, Y+43	; 0x2b
     f24:	9c a5       	ldd	r25, Y+44	; 0x2c
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <HMI_sendPassword+0x240>
     f2a:	9c a7       	std	Y+44, r25	; 0x2c
     f2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);
	/*get password and display * instead of entered character*/
	for(counter=0;counter<5;counter++)
     f2e:	fe 01       	movw	r30, r28
     f30:	e9 5b       	subi	r30, 0xB9	; 185
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	10 82       	st	Z, r1
     f36:	f4 c0       	rjmp	.+488    	; 0x1120 <HMI_sendPassword+0x43a>
	{
		UART_sendByte( KEYPAD_getPressedKey());
     f38:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <KEYPAD_getPressedKey>
     f3c:	0e 94 1d 21 	call	0x423a	; 0x423a <UART_sendByte>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a8 ec       	ldi	r26, 0xC8	; 200
     f46:	b2 e4       	ldi	r27, 0x42	; 66
     f48:	8f a3       	std	Y+39, r24	; 0x27
     f4a:	98 a7       	std	Y+40, r25	; 0x28
     f4c:	a9 a7       	std	Y+41, r26	; 0x29
     f4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f50:	6f a1       	ldd	r22, Y+39	; 0x27
     f52:	78 a5       	ldd	r23, Y+40	; 0x28
     f54:	89 a5       	ldd	r24, Y+41	; 0x29
     f56:	9a a5       	ldd	r25, Y+42	; 0x2a
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	4a ef       	ldi	r20, 0xFA	; 250
     f5e:	54 e4       	ldi	r21, 0x44	; 68
     f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8b a3       	std	Y+35, r24	; 0x23
     f6a:	9c a3       	std	Y+36, r25	; 0x24
     f6c:	ad a3       	std	Y+37, r26	; 0x25
     f6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f70:	6b a1       	ldd	r22, Y+35	; 0x23
     f72:	7c a1       	ldd	r23, Y+36	; 0x24
     f74:	8d a1       	ldd	r24, Y+37	; 0x25
     f76:	9e a1       	ldd	r25, Y+38	; 0x26
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f84:	88 23       	and	r24, r24
     f86:	2c f4       	brge	.+10     	; 0xf92 <HMI_sendPassword+0x2ac>
		__ticks = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9a a3       	std	Y+34, r25	; 0x22
     f8e:	89 a3       	std	Y+33, r24	; 0x21
     f90:	3f c0       	rjmp	.+126    	; 0x1010 <HMI_sendPassword+0x32a>
	else if (__tmp > 65535)
     f92:	6b a1       	ldd	r22, Y+35	; 0x23
     f94:	7c a1       	ldd	r23, Y+36	; 0x24
     f96:	8d a1       	ldd	r24, Y+37	; 0x25
     f98:	9e a1       	ldd	r25, Y+38	; 0x26
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	4f e7       	ldi	r20, 0x7F	; 127
     fa0:	57 e4       	ldi	r21, 0x47	; 71
     fa2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	4c f5       	brge	.+82     	; 0xffc <HMI_sendPassword+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	6f a1       	ldd	r22, Y+39	; 0x27
     fac:	78 a5       	ldd	r23, Y+40	; 0x28
     fae:	89 a5       	ldd	r24, Y+41	; 0x29
     fb0:	9a a5       	ldd	r25, Y+42	; 0x2a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9a a3       	std	Y+34, r25	; 0x22
     fd0:	89 a3       	std	Y+33, r24	; 0x21
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <HMI_sendPassword+0x30c>
     fd4:	88 ec       	ldi	r24, 0xC8	; 200
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	98 a3       	std	Y+32, r25	; 0x20
     fda:	8f 8f       	std	Y+31, r24	; 0x1f
     fdc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fde:	98 a1       	ldd	r25, Y+32	; 0x20
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <HMI_sendPassword+0x2fa>
     fe4:	98 a3       	std	Y+32, r25	; 0x20
     fe6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	89 a1       	ldd	r24, Y+33	; 0x21
     fea:	9a a1       	ldd	r25, Y+34	; 0x22
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	9a a3       	std	Y+34, r25	; 0x22
     ff0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff2:	89 a1       	ldd	r24, Y+33	; 0x21
     ff4:	9a a1       	ldd	r25, Y+34	; 0x22
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	69 f7       	brne	.-38     	; 0xfd4 <HMI_sendPassword+0x2ee>
     ffa:	14 c0       	rjmp	.+40     	; 0x1024 <HMI_sendPassword+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffc:	6b a1       	ldd	r22, Y+35	; 0x23
     ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    1000:	8d a1       	ldd	r24, Y+37	; 0x25
    1002:	9e a1       	ldd	r25, Y+38	; 0x26
    1004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9a a3       	std	Y+34, r25	; 0x22
    100e:	89 a3       	std	Y+33, r24	; 0x21
    1010:	89 a1       	ldd	r24, Y+33	; 0x21
    1012:	9a a1       	ldd	r25, Y+34	; 0x22
    1014:	9e 8f       	std	Y+30, r25	; 0x1e
    1016:	8d 8f       	std	Y+29, r24	; 0x1d
    1018:	8d 8d       	ldd	r24, Y+29	; 0x1d
    101a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <HMI_sendPassword+0x336>
    1020:	9e 8f       	std	Y+30, r25	; 0x1e
    1022:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		LCD_displayCharacter('*');
    1024:	8a e2       	ldi	r24, 0x2A	; 42
    1026:	0e 94 ad 1a 	call	0x355a	; 0x355a <LCD_displayCharacter>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a8 ec       	ldi	r26, 0xC8	; 200
    1030:	b2 e4       	ldi	r27, 0x42	; 66
    1032:	89 8f       	std	Y+25, r24	; 0x19
    1034:	9a 8f       	std	Y+26, r25	; 0x1a
    1036:	ab 8f       	std	Y+27, r26	; 0x1b
    1038:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	69 8d       	ldd	r22, Y+25	; 0x19
    103c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	8d 8b       	std	Y+21, r24	; 0x15
    1054:	9e 8b       	std	Y+22, r25	; 0x16
    1056:	af 8b       	std	Y+23, r26	; 0x17
    1058:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    105a:	6d 89       	ldd	r22, Y+21	; 0x15
    105c:	7e 89       	ldd	r23, Y+22	; 0x16
    105e:	8f 89       	ldd	r24, Y+23	; 0x17
    1060:	98 8d       	ldd	r25, Y+24	; 0x18
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	2c f4       	brge	.+10     	; 0x107c <HMI_sendPassword+0x396>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9c 8b       	std	Y+20, r25	; 0x14
    1078:	8b 8b       	std	Y+19, r24	; 0x13
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <HMI_sendPassword+0x414>
	else if (__tmp > 65535)
    107c:	6d 89       	ldd	r22, Y+21	; 0x15
    107e:	7e 89       	ldd	r23, Y+22	; 0x16
    1080:	8f 89       	ldd	r24, Y+23	; 0x17
    1082:	98 8d       	ldd	r25, Y+24	; 0x18
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f5       	brge	.+82     	; 0x10e6 <HMI_sendPassword+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	69 8d       	ldd	r22, Y+25	; 0x19
    1096:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    109a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9c 8b       	std	Y+20, r25	; 0x14
    10ba:	8b 8b       	std	Y+19, r24	; 0x13
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <HMI_sendPassword+0x3f6>
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9a 8b       	std	Y+18, r25	; 0x12
    10c4:	89 8b       	std	Y+17, r24	; 0x11
    10c6:	89 89       	ldd	r24, Y+17	; 0x11
    10c8:	9a 89       	ldd	r25, Y+18	; 0x12
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <HMI_sendPassword+0x3e4>
    10ce:	9a 8b       	std	Y+18, r25	; 0x12
    10d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	8b 89       	ldd	r24, Y+19	; 0x13
    10d4:	9c 89       	ldd	r25, Y+20	; 0x14
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9c 8b       	std	Y+20, r25	; 0x14
    10da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	8b 89       	ldd	r24, Y+19	; 0x13
    10de:	9c 89       	ldd	r25, Y+20	; 0x14
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f7       	brne	.-38     	; 0x10be <HMI_sendPassword+0x3d8>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <HMI_sendPassword+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	6d 89       	ldd	r22, Y+21	; 0x15
    10e8:	7e 89       	ldd	r23, Y+22	; 0x16
    10ea:	8f 89       	ldd	r24, Y+23	; 0x17
    10ec:	98 8d       	ldd	r25, Y+24	; 0x18
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9c 8b       	std	Y+20, r25	; 0x14
    10f8:	8b 8b       	std	Y+19, r24	; 0x13
    10fa:	8b 89       	ldd	r24, Y+19	; 0x13
    10fc:	9c 89       	ldd	r25, Y+20	; 0x14
    10fe:	98 8b       	std	Y+16, r25	; 0x10
    1100:	8f 87       	std	Y+15, r24	; 0x0f
    1102:	8f 85       	ldd	r24, Y+15	; 0x0f
    1104:	98 89       	ldd	r25, Y+16	; 0x10
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <HMI_sendPassword+0x420>
    110a:	98 8b       	std	Y+16, r25	; 0x10
    110c:	8f 87       	std	Y+15, r24	; 0x0f

	/*Move LCD cursor to the place which we will get password from*/
	LCD_moveCursor(row,col);
	_delay_ms(300);
	/*get password and display * instead of entered character*/
	for(counter=0;counter<5;counter++)
    110e:	de 01       	movw	r26, r28
    1110:	a9 5b       	subi	r26, 0xB9	; 185
    1112:	bf 4f       	sbci	r27, 0xFF	; 255
    1114:	fe 01       	movw	r30, r28
    1116:	e9 5b       	subi	r30, 0xB9	; 185
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	80 81       	ld	r24, Z
    111c:	8f 5f       	subi	r24, 0xFF	; 255
    111e:	8c 93       	st	X, r24
    1120:	fe 01       	movw	r30, r28
    1122:	e9 5b       	subi	r30, 0xB9	; 185
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 81       	ld	r24, Z
    1128:	85 30       	cpi	r24, 0x05	; 5
    112a:	08 f4       	brcc	.+2      	; 0x112e <HMI_sendPassword+0x448>
    112c:	05 cf       	rjmp	.-502    	; 0xf38 <HMI_sendPassword+0x252>
		LCD_displayCharacter('*');
		_delay_ms(100);
	}

	/* Polling till the user entered = as enter button */
	while( KEYPAD_getPressedKey() != '=' );
    112e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <KEYPAD_getPressedKey>
    1132:	8d 33       	cpi	r24, 0x3D	; 61
    1134:	e1 f7       	brne	.-8      	; 0x112e <HMI_sendPassword+0x448>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	a6 e9       	ldi	r26, 0x96	; 150
    113c:	b3 e4       	ldi	r27, 0x43	; 67
    113e:	8b 87       	std	Y+11, r24	; 0x0b
    1140:	9c 87       	std	Y+12, r25	; 0x0c
    1142:	ad 87       	std	Y+13, r26	; 0x0d
    1144:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	6b 85       	ldd	r22, Y+11	; 0x0b
    1148:	7c 85       	ldd	r23, Y+12	; 0x0c
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	9e 85       	ldd	r25, Y+14	; 0x0e
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a ef       	ldi	r20, 0xFA	; 250
    1154:	54 e4       	ldi	r21, 0x44	; 68
    1156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	8f 83       	std	Y+7, r24	; 0x07
    1160:	98 87       	std	Y+8, r25	; 0x08
    1162:	a9 87       	std	Y+9, r26	; 0x09
    1164:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	5f e3       	ldi	r21, 0x3F	; 63
    1176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    117a:	88 23       	and	r24, r24
    117c:	2c f4       	brge	.+10     	; 0x1188 <HMI_sendPassword+0x4a2>
		__ticks = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	9e 83       	std	Y+6, r25	; 0x06
    1184:	8d 83       	std	Y+5, r24	; 0x05
    1186:	3f c0       	rjmp	.+126    	; 0x1206 <HMI_sendPassword+0x520>
	else if (__tmp > 65535)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	3f ef       	ldi	r19, 0xFF	; 255
    1194:	4f e7       	ldi	r20, 0x7F	; 127
    1196:	57 e4       	ldi	r21, 0x47	; 71
    1198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    119c:	18 16       	cp	r1, r24
    119e:	4c f5       	brge	.+82     	; 0x11f2 <HMI_sendPassword+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e2       	ldi	r20, 0x20	; 32
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	bc 01       	movw	r22, r24
    11ba:	cd 01       	movw	r24, r26
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
    11c8:	0f c0       	rjmp	.+30     	; 0x11e8 <HMI_sendPassword+0x502>
    11ca:	88 ec       	ldi	r24, 0xC8	; 200
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <HMI_sendPassword+0x4f0>
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	69 f7       	brne	.-38     	; 0x11ca <HMI_sendPassword+0x4e4>
    11f0:	14 c0       	rjmp	.+40     	; 0x121a <HMI_sendPassword+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f2:	6f 81       	ldd	r22, Y+7	; 0x07
    11f4:	78 85       	ldd	r23, Y+8	; 0x08
    11f6:	89 85       	ldd	r24, Y+9	; 0x09
    11f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	9a 81       	ldd	r25, Y+2	; 0x02
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <HMI_sendPassword+0x52c>
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
}
    121a:	c6 5b       	subi	r28, 0xB6	; 182
    121c:	df 4f       	sbci	r29, 0xFF	; 255
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	08 95       	ret

00001232 <HMI_createSystemPassword>:
/* Description
 * A function to create system password , and get to change password
 * or open door screen
 */
void HMI_createSystemPassword(void)
{
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	c6 54       	subi	r28, 0x46	; 70
    1240:	d0 40       	sbci	r29, 0x00	; 0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    124c:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	/*Ask the user to enter password first time*/
	LCD_displayString("please enter password:");
    1250:	80 e6       	ldi	r24, 0x60	; 96
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
    1258:	fe 01       	movw	r30, r28
    125a:	ed 5b       	subi	r30, 0xBD	; 189
    125c:	ff 4f       	sbci	r31, 0xFF	; 255
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a0 ea       	ldi	r26, 0xA0	; 160
    1264:	b1 e4       	ldi	r27, 0x41	; 65
    1266:	80 83       	st	Z, r24
    1268:	91 83       	std	Z+1, r25	; 0x01
    126a:	a2 83       	std	Z+2, r26	; 0x02
    126c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126e:	8e 01       	movw	r16, r28
    1270:	01 5c       	subi	r16, 0xC1	; 193
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	fe 01       	movw	r30, r28
    1276:	ed 5b       	subi	r30, 0xBD	; 189
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	60 81       	ld	r22, Z
    127c:	71 81       	ldd	r23, Z+1	; 0x01
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a ef       	ldi	r20, 0xFA	; 250
    1288:	54 e4       	ldi	r21, 0x44	; 68
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	f8 01       	movw	r30, r16
    1294:	80 83       	st	Z, r24
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	a2 83       	std	Z+2, r26	; 0x02
    129a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    129c:	fe 01       	movw	r30, r28
    129e:	ff 96       	adiw	r30, 0x3f	; 63
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e8       	ldi	r20, 0x80	; 128
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <HMI_createSystemPassword+0x90>
		__ticks = 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9e af       	std	Y+62, r25	; 0x3e
    12be:	8d af       	std	Y+61, r24	; 0x3d
    12c0:	46 c0       	rjmp	.+140    	; 0x134e <HMI_createSystemPassword+0x11c>
	else if (__tmp > 65535)
    12c2:	fe 01       	movw	r30, r28
    12c4:	ff 96       	adiw	r30, 0x3f	; 63
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	64 f5       	brge	.+88     	; 0x1336 <HMI_createSystemPassword+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	fe 01       	movw	r30, r28
    12e0:	ed 5b       	subi	r30, 0xBD	; 189
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9e af       	std	Y+62, r25	; 0x3e
    130a:	8d af       	std	Y+61, r24	; 0x3d
    130c:	0f c0       	rjmp	.+30     	; 0x132c <HMI_createSystemPassword+0xfa>
    130e:	88 ec       	ldi	r24, 0xC8	; 200
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9c af       	std	Y+60, r25	; 0x3c
    1314:	8b af       	std	Y+59, r24	; 0x3b
    1316:	8b ad       	ldd	r24, Y+59	; 0x3b
    1318:	9c ad       	ldd	r25, Y+60	; 0x3c
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <HMI_createSystemPassword+0xe8>
    131e:	9c af       	std	Y+60, r25	; 0x3c
    1320:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8d ad       	ldd	r24, Y+61	; 0x3d
    1324:	9e ad       	ldd	r25, Y+62	; 0x3e
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9e af       	std	Y+62, r25	; 0x3e
    132a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8d ad       	ldd	r24, Y+61	; 0x3d
    132e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <HMI_createSystemPassword+0xdc>
    1334:	16 c0       	rjmp	.+44     	; 0x1362 <HMI_createSystemPassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	fe 01       	movw	r30, r28
    1338:	ff 96       	adiw	r30, 0x3f	; 63
    133a:	60 81       	ld	r22, Z
    133c:	71 81       	ldd	r23, Z+1	; 0x01
    133e:	82 81       	ldd	r24, Z+2	; 0x02
    1340:	93 81       	ldd	r25, Z+3	; 0x03
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9e af       	std	Y+62, r25	; 0x3e
    134c:	8d af       	std	Y+61, r24	; 0x3d
    134e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1350:	9e ad       	ldd	r25, Y+62	; 0x3e
    1352:	9a af       	std	Y+58, r25	; 0x3a
    1354:	89 af       	std	Y+57, r24	; 0x39
    1356:	89 ad       	ldd	r24, Y+57	; 0x39
    1358:	9a ad       	ldd	r25, Y+58	; 0x3a
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <HMI_createSystemPassword+0x128>
    135e:	9a af       	std	Y+58, r25	; 0x3a
    1360:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	HMI_sendPassword(1,0,PASSWORD_SEND2CONFIRM);
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	42 e0       	ldi	r20, 0x02	; 2
    1368:	0e 94 73 06 	call	0xce6	; 0xce6 <HMI_sendPassword>
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a8 e4       	ldi	r26, 0x48	; 72
    1372:	b3 e4       	ldi	r27, 0x43	; 67
    1374:	8d ab       	std	Y+53, r24	; 0x35
    1376:	9e ab       	std	Y+54, r25	; 0x36
    1378:	af ab       	std	Y+55, r26	; 0x37
    137a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137c:	6d a9       	ldd	r22, Y+53	; 0x35
    137e:	7e a9       	ldd	r23, Y+54	; 0x36
    1380:	8f a9       	ldd	r24, Y+55	; 0x37
    1382:	98 ad       	ldd	r25, Y+56	; 0x38
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	4a ef       	ldi	r20, 0xFA	; 250
    138a:	54 e4       	ldi	r21, 0x44	; 68
    138c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	89 ab       	std	Y+49, r24	; 0x31
    1396:	9a ab       	std	Y+50, r25	; 0x32
    1398:	ab ab       	std	Y+51, r26	; 0x33
    139a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    139c:	69 a9       	ldd	r22, Y+49	; 0x31
    139e:	7a a9       	ldd	r23, Y+50	; 0x32
    13a0:	8b a9       	ldd	r24, Y+51	; 0x33
    13a2:	9c a9       	ldd	r25, Y+52	; 0x34
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e8       	ldi	r20, 0x80	; 128
    13aa:	5f e3       	ldi	r21, 0x3F	; 63
    13ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13b0:	88 23       	and	r24, r24
    13b2:	2c f4       	brge	.+10     	; 0x13be <HMI_createSystemPassword+0x18c>
		__ticks = 1;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	98 ab       	std	Y+48, r25	; 0x30
    13ba:	8f a7       	std	Y+47, r24	; 0x2f
    13bc:	3f c0       	rjmp	.+126    	; 0x143c <HMI_createSystemPassword+0x20a>
	else if (__tmp > 65535)
    13be:	69 a9       	ldd	r22, Y+49	; 0x31
    13c0:	7a a9       	ldd	r23, Y+50	; 0x32
    13c2:	8b a9       	ldd	r24, Y+51	; 0x33
    13c4:	9c a9       	ldd	r25, Y+52	; 0x34
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	3f ef       	ldi	r19, 0xFF	; 255
    13ca:	4f e7       	ldi	r20, 0x7F	; 127
    13cc:	57 e4       	ldi	r21, 0x47	; 71
    13ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13d2:	18 16       	cp	r1, r24
    13d4:	4c f5       	brge	.+82     	; 0x1428 <HMI_createSystemPassword+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d6:	6d a9       	ldd	r22, Y+53	; 0x35
    13d8:	7e a9       	ldd	r23, Y+54	; 0x36
    13da:	8f a9       	ldd	r24, Y+55	; 0x37
    13dc:	98 ad       	ldd	r25, Y+56	; 0x38
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e2       	ldi	r20, 0x20	; 32
    13e4:	51 e4       	ldi	r21, 0x41	; 65
    13e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	bc 01       	movw	r22, r24
    13f0:	cd 01       	movw	r24, r26
    13f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	98 ab       	std	Y+48, r25	; 0x30
    13fc:	8f a7       	std	Y+47, r24	; 0x2f
    13fe:	0f c0       	rjmp	.+30     	; 0x141e <HMI_createSystemPassword+0x1ec>
    1400:	88 ec       	ldi	r24, 0xC8	; 200
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9e a7       	std	Y+46, r25	; 0x2e
    1406:	8d a7       	std	Y+45, r24	; 0x2d
    1408:	8d a5       	ldd	r24, Y+45	; 0x2d
    140a:	9e a5       	ldd	r25, Y+46	; 0x2e
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <HMI_createSystemPassword+0x1da>
    1410:	9e a7       	std	Y+46, r25	; 0x2e
    1412:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1414:	8f a5       	ldd	r24, Y+47	; 0x2f
    1416:	98 a9       	ldd	r25, Y+48	; 0x30
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	98 ab       	std	Y+48, r25	; 0x30
    141c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1420:	98 a9       	ldd	r25, Y+48	; 0x30
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	69 f7       	brne	.-38     	; 0x1400 <HMI_createSystemPassword+0x1ce>
    1426:	14 c0       	rjmp	.+40     	; 0x1450 <HMI_createSystemPassword+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1428:	69 a9       	ldd	r22, Y+49	; 0x31
    142a:	7a a9       	ldd	r23, Y+50	; 0x32
    142c:	8b a9       	ldd	r24, Y+51	; 0x33
    142e:	9c a9       	ldd	r25, Y+52	; 0x34
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	98 ab       	std	Y+48, r25	; 0x30
    143a:	8f a7       	std	Y+47, r24	; 0x2f
    143c:	8f a5       	ldd	r24, Y+47	; 0x2f
    143e:	98 a9       	ldd	r25, Y+48	; 0x30
    1440:	9c a7       	std	Y+44, r25	; 0x2c
    1442:	8b a7       	std	Y+43, r24	; 0x2b
    1444:	8b a5       	ldd	r24, Y+43	; 0x2b
    1446:	9c a5       	ldd	r25, Y+44	; 0x2c
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <HMI_createSystemPassword+0x216>
    144c:	9c a7       	std	Y+44, r25	; 0x2c
    144e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);

	/*Ask the user to enter password second time*/
	LCD_moveCursor(1,0);
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>
	LCD_displayString("same password : ");
    1458:	87 e7       	ldi	r24, 0x77	; 119
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 ea       	ldi	r26, 0xA0	; 160
    1466:	b1 e4       	ldi	r27, 0x41	; 65
    1468:	8f a3       	std	Y+39, r24	; 0x27
    146a:	98 a7       	std	Y+40, r25	; 0x28
    146c:	a9 a7       	std	Y+41, r26	; 0x29
    146e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6f a1       	ldd	r22, Y+39	; 0x27
    1472:	78 a5       	ldd	r23, Y+40	; 0x28
    1474:	89 a5       	ldd	r24, Y+41	; 0x29
    1476:	9a a5       	ldd	r25, Y+42	; 0x2a
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8b a3       	std	Y+35, r24	; 0x23
    148a:	9c a3       	std	Y+36, r25	; 0x24
    148c:	ad a3       	std	Y+37, r26	; 0x25
    148e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1490:	6b a1       	ldd	r22, Y+35	; 0x23
    1492:	7c a1       	ldd	r23, Y+36	; 0x24
    1494:	8d a1       	ldd	r24, Y+37	; 0x25
    1496:	9e a1       	ldd	r25, Y+38	; 0x26
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <HMI_createSystemPassword+0x280>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <HMI_createSystemPassword+0x2fe>
	else if (__tmp > 65535)
    14b2:	6b a1       	ldd	r22, Y+35	; 0x23
    14b4:	7c a1       	ldd	r23, Y+36	; 0x24
    14b6:	8d a1       	ldd	r24, Y+37	; 0x25
    14b8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <HMI_createSystemPassword+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6f a1       	ldd	r22, Y+39	; 0x27
    14cc:	78 a5       	ldd	r23, Y+40	; 0x28
    14ce:	89 a5       	ldd	r24, Y+41	; 0x29
    14d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <HMI_createSystemPassword+0x2e0>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	98 a3       	std	Y+32, r25	; 0x20
    14fa:	8f 8f       	std	Y+31, r24	; 0x1f
    14fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <HMI_createSystemPassword+0x2ce>
    1504:	98 a3       	std	Y+32, r25	; 0x20
    1506:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	89 a1       	ldd	r24, Y+33	; 0x21
    150a:	9a a1       	ldd	r25, Y+34	; 0x22
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9a a3       	std	Y+34, r25	; 0x22
    1510:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	89 a1       	ldd	r24, Y+33	; 0x21
    1514:	9a a1       	ldd	r25, Y+34	; 0x22
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <HMI_createSystemPassword+0x2c2>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <HMI_createSystemPassword+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6b a1       	ldd	r22, Y+35	; 0x23
    151e:	7c a1       	ldd	r23, Y+36	; 0x24
    1520:	8d a1       	ldd	r24, Y+37	; 0x25
    1522:	9e a1       	ldd	r25, Y+38	; 0x26
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9a a3       	std	Y+34, r25	; 0x22
    152e:	89 a3       	std	Y+33, r24	; 0x21
    1530:	89 a1       	ldd	r24, Y+33	; 0x21
    1532:	9a a1       	ldd	r25, Y+34	; 0x22
    1534:	9e 8f       	std	Y+30, r25	; 0x1e
    1536:	8d 8f       	std	Y+29, r24	; 0x1d
    1538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <HMI_createSystemPassword+0x30a>
    1540:	9e 8f       	std	Y+30, r25	; 0x1e
    1542:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	HMI_sendPassword(1,17,PASSWORD_CHECK);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	61 e1       	ldi	r22, 0x11	; 17
    1548:	44 e0       	ldi	r20, 0x04	; 4
    154a:	0e 94 73 06 	call	0xce6	; 0xce6 <HMI_sendPassword>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a8 e4       	ldi	r26, 0x48	; 72
    1554:	b3 e4       	ldi	r27, 0x43	; 67
    1556:	89 8f       	std	Y+25, r24	; 0x19
    1558:	9a 8f       	std	Y+26, r25	; 0x1a
    155a:	ab 8f       	std	Y+27, r26	; 0x1b
    155c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155e:	69 8d       	ldd	r22, Y+25	; 0x19
    1560:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	4a ef       	ldi	r20, 0xFA	; 250
    156c:	54 e4       	ldi	r21, 0x44	; 68
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	8d 8b       	std	Y+21, r24	; 0x15
    1578:	9e 8b       	std	Y+22, r25	; 0x16
    157a:	af 8b       	std	Y+23, r26	; 0x17
    157c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    157e:	6d 89       	ldd	r22, Y+21	; 0x15
    1580:	7e 89       	ldd	r23, Y+22	; 0x16
    1582:	8f 89       	ldd	r24, Y+23	; 0x17
    1584:	98 8d       	ldd	r25, Y+24	; 0x18
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	5f e3       	ldi	r21, 0x3F	; 63
    158e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1592:	88 23       	and	r24, r24
    1594:	2c f4       	brge	.+10     	; 0x15a0 <HMI_createSystemPassword+0x36e>
		__ticks = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9c 8b       	std	Y+20, r25	; 0x14
    159c:	8b 8b       	std	Y+19, r24	; 0x13
    159e:	3f c0       	rjmp	.+126    	; 0x161e <HMI_createSystemPassword+0x3ec>
	else if (__tmp > 65535)
    15a0:	6d 89       	ldd	r22, Y+21	; 0x15
    15a2:	7e 89       	ldd	r23, Y+22	; 0x16
    15a4:	8f 89       	ldd	r24, Y+23	; 0x17
    15a6:	98 8d       	ldd	r25, Y+24	; 0x18
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b4:	18 16       	cp	r1, r24
    15b6:	4c f5       	brge	.+82     	; 0x160a <HMI_createSystemPassword+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	51 e4       	ldi	r21, 0x41	; 65
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9c 8b       	std	Y+20, r25	; 0x14
    15de:	8b 8b       	std	Y+19, r24	; 0x13
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <HMI_createSystemPassword+0x3ce>
    15e2:	88 ec       	ldi	r24, 0xC8	; 200
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9a 8b       	std	Y+18, r25	; 0x12
    15e8:	89 8b       	std	Y+17, r24	; 0x11
    15ea:	89 89       	ldd	r24, Y+17	; 0x11
    15ec:	9a 89       	ldd	r25, Y+18	; 0x12
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <HMI_createSystemPassword+0x3bc>
    15f2:	9a 8b       	std	Y+18, r25	; 0x12
    15f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	8b 89       	ldd	r24, Y+19	; 0x13
    15f8:	9c 89       	ldd	r25, Y+20	; 0x14
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9c 8b       	std	Y+20, r25	; 0x14
    15fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1600:	8b 89       	ldd	r24, Y+19	; 0x13
    1602:	9c 89       	ldd	r25, Y+20	; 0x14
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	69 f7       	brne	.-38     	; 0x15e2 <HMI_createSystemPassword+0x3b0>
    1608:	17 c0       	rjmp	.+46     	; 0x1638 <HMI_createSystemPassword+0x406>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160a:	6d 89       	ldd	r22, Y+21	; 0x15
    160c:	7e 89       	ldd	r23, Y+22	; 0x16
    160e:	8f 89       	ldd	r24, Y+23	; 0x17
    1610:	98 8d       	ldd	r25, Y+24	; 0x18
    1612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9c 8b       	std	Y+20, r25	; 0x14
    161c:	8b 8b       	std	Y+19, r24	; 0x13
    161e:	8b 89       	ldd	r24, Y+19	; 0x13
    1620:	9c 89       	ldd	r25, Y+20	; 0x14
    1622:	98 8b       	std	Y+16, r25	; 0x10
    1624:	8f 87       	std	Y+15, r24	; 0x0f
    1626:	8f 85       	ldd	r24, Y+15	; 0x0f
    1628:	98 89       	ldd	r25, Y+16	; 0x10
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <HMI_createSystemPassword+0x3f8>
    162e:	98 8b       	std	Y+16, r25	; 0x10
    1630:	8f 87       	std	Y+15, r24	; 0x0f
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <HMI_createSystemPassword+0x406>
	_delay_ms(200);

	/*repeat the previous step again*/
	while(UART_recieveByte()==PASS_MISMATCH)
	{
		HMI_createSystemPassword();
    1634:	0e 94 19 09 	call	0x1232	; 0x1232 <HMI_createSystemPassword>
	_delay_ms(20);
	HMI_sendPassword(1,17,PASSWORD_CHECK);
	_delay_ms(200);

	/*repeat the previous step again*/
	while(UART_recieveByte()==PASS_MISMATCH)
    1638:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
    163c:	80 31       	cpi	r24, 0x10	; 16
    163e:	d1 f3       	breq	.-12     	; 0x1634 <HMI_createSystemPassword+0x402>
	{
		HMI_createSystemPassword();
	}

	LCD_clearScreen();
    1640:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	LCD_displayString("Password updated successfully!");
    1644:	88 e8       	ldi	r24, 0x88	; 136
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	aa e7       	ldi	r26, 0x7A	; 122
    1652:	b4 e4       	ldi	r27, 0x44	; 68
    1654:	8b 87       	std	Y+11, r24	; 0x0b
    1656:	9c 87       	std	Y+12, r25	; 0x0c
    1658:	ad 87       	std	Y+13, r26	; 0x0d
    165a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165c:	6b 85       	ldd	r22, Y+11	; 0x0b
    165e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	4a ef       	ldi	r20, 0xFA	; 250
    166a:	54 e4       	ldi	r21, 0x44	; 68
    166c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	8f 83       	std	Y+7, r24	; 0x07
    1676:	98 87       	std	Y+8, r25	; 0x08
    1678:	a9 87       	std	Y+9, r26	; 0x09
    167a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167c:	6f 81       	ldd	r22, Y+7	; 0x07
    167e:	78 85       	ldd	r23, Y+8	; 0x08
    1680:	89 85       	ldd	r24, Y+9	; 0x09
    1682:	9a 85       	ldd	r25, Y+10	; 0x0a
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e8       	ldi	r20, 0x80	; 128
    168a:	5f e3       	ldi	r21, 0x3F	; 63
    168c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1690:	88 23       	and	r24, r24
    1692:	2c f4       	brge	.+10     	; 0x169e <HMI_createSystemPassword+0x46c>
		__ticks = 1;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9e 83       	std	Y+6, r25	; 0x06
    169a:	8d 83       	std	Y+5, r24	; 0x05
    169c:	3f c0       	rjmp	.+126    	; 0x171c <HMI_createSystemPassword+0x4ea>
	else if (__tmp > 65535)
    169e:	6f 81       	ldd	r22, Y+7	; 0x07
    16a0:	78 85       	ldd	r23, Y+8	; 0x08
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	4f e7       	ldi	r20, 0x7F	; 127
    16ac:	57 e4       	ldi	r21, 0x47	; 71
    16ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16b2:	18 16       	cp	r1, r24
    16b4:	4c f5       	brge	.+82     	; 0x1708 <HMI_createSystemPassword+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    16bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e2       	ldi	r20, 0x20	; 32
    16c4:	51 e4       	ldi	r21, 0x41	; 65
    16c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	0f c0       	rjmp	.+30     	; 0x16fe <HMI_createSystemPassword+0x4cc>
    16e0:	88 ec       	ldi	r24, 0xC8	; 200
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	9c 83       	std	Y+4, r25	; 0x04
    16e6:	8b 83       	std	Y+3, r24	; 0x03
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <HMI_createSystemPassword+0x4ba>
    16f0:	9c 83       	std	Y+4, r25	; 0x04
    16f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	69 f7       	brne	.-38     	; 0x16e0 <HMI_createSystemPassword+0x4ae>
    1706:	14 c0       	rjmp	.+40     	; 0x1730 <HMI_createSystemPassword+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1708:	6f 81       	ldd	r22, Y+7	; 0x07
    170a:	78 85       	ldd	r23, Y+8	; 0x08
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <HMI_createSystemPassword+0x4f6>
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	HMI_changeOrOpen();
    1730:	0e 94 6e 10 	call	0x20dc	; 0x20dc <HMI_changeOrOpen>

}
    1734:	ca 5b       	subi	r28, 0xBA	; 186
    1736:	df 4f       	sbci	r29, 0xFF	; 255
    1738:	0f b6       	in	r0, 0x3f	; 63
    173a:	f8 94       	cli
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	cd bf       	out	0x3d, r28	; 61
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	08 95       	ret

0000174c <HMI_openDoor>:

/* Description : -
 * A helping function to open door , which rotate the motor clockwise
 */
void HMI_openDoor(void)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	6c 97       	sbiw	r28, 0x1c	; 28
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
	/*Rotate motor clockwise*/
	HMI_sendOperation(OPEN_DOOR);
    1760:	85 e0       	ldi	r24, 0x05	; 5
    1762:	0e 94 5f 06 	call	0xcbe	; 0xcbe <HMI_sendOperation>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 ea       	ldi	r26, 0xA0	; 160
    176c:	b1 e4       	ldi	r27, 0x41	; 65
    176e:	89 8f       	std	Y+25, r24	; 0x19
    1770:	9a 8f       	std	Y+26, r25	; 0x1a
    1772:	ab 8f       	std	Y+27, r26	; 0x1b
    1774:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	69 8d       	ldd	r22, Y+25	; 0x19
    1778:	7a 8d       	ldd	r23, Y+26	; 0x1a
    177a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    177c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a ef       	ldi	r20, 0xFA	; 250
    1784:	54 e4       	ldi	r21, 0x44	; 68
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	8d 8b       	std	Y+21, r24	; 0x15
    1790:	9e 8b       	std	Y+22, r25	; 0x16
    1792:	af 8b       	std	Y+23, r26	; 0x17
    1794:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1796:	6d 89       	ldd	r22, Y+21	; 0x15
    1798:	7e 89       	ldd	r23, Y+22	; 0x16
    179a:	8f 89       	ldd	r24, Y+23	; 0x17
    179c:	98 8d       	ldd	r25, Y+24	; 0x18
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <HMI_openDoor+0x6c>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9c 8b       	std	Y+20, r25	; 0x14
    17b4:	8b 8b       	std	Y+19, r24	; 0x13
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <HMI_openDoor+0xea>
	else if (__tmp > 65535)
    17b8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ba:	7e 89       	ldd	r23, Y+22	; 0x16
    17bc:	8f 89       	ldd	r24, Y+23	; 0x17
    17be:	98 8d       	ldd	r25, Y+24	; 0x18
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <HMI_openDoor+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	69 8d       	ldd	r22, Y+25	; 0x19
    17d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	51 e4       	ldi	r21, 0x41	; 65
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9c 8b       	std	Y+20, r25	; 0x14
    17f6:	8b 8b       	std	Y+19, r24	; 0x13
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <HMI_openDoor+0xcc>
    17fa:	88 ec       	ldi	r24, 0xC8	; 200
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9a 8b       	std	Y+18, r25	; 0x12
    1800:	89 8b       	std	Y+17, r24	; 0x11
    1802:	89 89       	ldd	r24, Y+17	; 0x11
    1804:	9a 89       	ldd	r25, Y+18	; 0x12
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <HMI_openDoor+0xba>
    180a:	9a 8b       	std	Y+18, r25	; 0x12
    180c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8b 89       	ldd	r24, Y+19	; 0x13
    1810:	9c 89       	ldd	r25, Y+20	; 0x14
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	9c 8b       	std	Y+20, r25	; 0x14
    1816:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8b 89       	ldd	r24, Y+19	; 0x13
    181a:	9c 89       	ldd	r25, Y+20	; 0x14
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	69 f7       	brne	.-38     	; 0x17fa <HMI_openDoor+0xae>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <HMI_openDoor+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	6d 89       	ldd	r22, Y+21	; 0x15
    1824:	7e 89       	ldd	r23, Y+22	; 0x16
    1826:	8f 89       	ldd	r24, Y+23	; 0x17
    1828:	98 8d       	ldd	r25, Y+24	; 0x18
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	9c 8b       	std	Y+20, r25	; 0x14
    1834:	8b 8b       	std	Y+19, r24	; 0x13
    1836:	8b 89       	ldd	r24, Y+19	; 0x13
    1838:	9c 89       	ldd	r25, Y+20	; 0x14
    183a:	98 8b       	std	Y+16, r25	; 0x10
    183c:	8f 87       	std	Y+15, r24	; 0x0f
    183e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1840:	98 89       	ldd	r25, Y+16	; 0x10
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <HMI_openDoor+0xf6>
    1846:	98 8b       	std	Y+16, r25	; 0x10
    1848:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

	LCD_clearScreen();
    184a:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	LCD_displayString("Door is Unlocking!!");
    184e:	87 ea       	ldi	r24, 0xA7	; 167
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
	delaySeconds(15);
    1856:	8f e0       	ldi	r24, 0x0F	; 15
    1858:	0e 94 81 11 	call	0x2302	; 0x2302 <delaySeconds>

	LCD_clearScreen();
    185c:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	LCD_displayString("Door is Unlocked!!");
    1860:	8b eb       	ldi	r24, 0xBB	; 187
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
	delaySeconds(3);
    1868:	83 e0       	ldi	r24, 0x03	; 3
    186a:	0e 94 81 11 	call	0x2302	; 0x2302 <delaySeconds>

	LCD_clearScreen();
    186e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	LCD_displayString("Door is locking!!");
    1872:	8e ec       	ldi	r24, 0xCE	; 206
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
	delaySeconds(15);
    187a:	8f e0       	ldi	r24, 0x0F	; 15
    187c:	0e 94 81 11 	call	0x2302	; 0x2302 <delaySeconds>

	LCD_clearScreen();
    1880:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	LCD_displayString("Door is locked!!");
    1884:	80 ee       	ldi	r24, 0xE0	; 224
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	aa e7       	ldi	r26, 0x7A	; 122
    1892:	b4 e4       	ldi	r27, 0x44	; 68
    1894:	8b 87       	std	Y+11, r24	; 0x0b
    1896:	9c 87       	std	Y+12, r25	; 0x0c
    1898:	ad 87       	std	Y+13, r26	; 0x0d
    189a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	4a ef       	ldi	r20, 0xFA	; 250
    18aa:	54 e4       	ldi	r21, 0x44	; 68
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8f 83       	std	Y+7, r24	; 0x07
    18b6:	98 87       	std	Y+8, r25	; 0x08
    18b8:	a9 87       	std	Y+9, r26	; 0x09
    18ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18bc:	6f 81       	ldd	r22, Y+7	; 0x07
    18be:	78 85       	ldd	r23, Y+8	; 0x08
    18c0:	89 85       	ldd	r24, Y+9	; 0x09
    18c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d0:	88 23       	and	r24, r24
    18d2:	2c f4       	brge	.+10     	; 0x18de <HMI_openDoor+0x192>
		__ticks = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	3f c0       	rjmp	.+126    	; 0x195c <HMI_openDoor+0x210>
	else if (__tmp > 65535)
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3f ef       	ldi	r19, 0xFF	; 255
    18ea:	4f e7       	ldi	r20, 0x7F	; 127
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f2:	18 16       	cp	r1, r24
    18f4:	4c f5       	brge	.+82     	; 0x1948 <HMI_openDoor+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e2       	ldi	r20, 0x20	; 32
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	bc 01       	movw	r22, r24
    1910:	cd 01       	movw	r24, r26
    1912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
    191e:	0f c0       	rjmp	.+30     	; 0x193e <HMI_openDoor+0x1f2>
    1920:	88 ec       	ldi	r24, 0xC8	; 200
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	9c 83       	std	Y+4, r25	; 0x04
    1926:	8b 83       	std	Y+3, r24	; 0x03
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <HMI_openDoor+0x1e0>
    1930:	9c 83       	std	Y+4, r25	; 0x04
    1932:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9e 83       	std	Y+6, r25	; 0x06
    193c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	69 f7       	brne	.-38     	; 0x1920 <HMI_openDoor+0x1d4>
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <HMI_openDoor+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	9e 81       	ldd	r25, Y+6	; 0x06
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <HMI_openDoor+0x21c>
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1000);
	HMI_changeOrOpen();
    1970:	0e 94 6e 10 	call	0x20dc	; 0x20dc <HMI_changeOrOpen>

}
    1974:	6c 96       	adiw	r28, 0x1c	; 28
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <HMI_threeWrong>:

void HMI_threeWrong()
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	6c 97       	sbiw	r28, 0x1c	; 28
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
	/*We exceeded 3 wrong entries*/
	if(g_checkPassword==MAX_WRONG)
    199a:	80 91 ba 01 	lds	r24, 0x01BA
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <HMI_threeWrong+0x1e>
    19a2:	f4 c0       	rjmp	.+488    	; 0x1b8c <HMI_threeWrong+0x206>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a0 ea       	ldi	r26, 0xA0	; 160
    19aa:	b1 e4       	ldi	r27, 0x41	; 65
    19ac:	89 8f       	std	Y+25, r24	; 0x19
    19ae:	9a 8f       	std	Y+26, r25	; 0x1a
    19b0:	ab 8f       	std	Y+27, r26	; 0x1b
    19b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b4:	69 8d       	ldd	r22, Y+25	; 0x19
    19b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	4a ef       	ldi	r20, 0xFA	; 250
    19c2:	54 e4       	ldi	r21, 0x44	; 68
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	8d 8b       	std	Y+21, r24	; 0x15
    19ce:	9e 8b       	std	Y+22, r25	; 0x16
    19d0:	af 8b       	std	Y+23, r26	; 0x17
    19d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e8       	ldi	r20, 0x80	; 128
    19e2:	5f e3       	ldi	r21, 0x3F	; 63
    19e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e8:	88 23       	and	r24, r24
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <HMI_threeWrong+0x70>
		__ticks = 1;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c 8b       	std	Y+20, r25	; 0x14
    19f2:	8b 8b       	std	Y+19, r24	; 0x13
    19f4:	3f c0       	rjmp	.+126    	; 0x1a74 <HMI_threeWrong+0xee>
	else if (__tmp > 65535)
    19f6:	6d 89       	ldd	r22, Y+21	; 0x15
    19f8:	7e 89       	ldd	r23, Y+22	; 0x16
    19fa:	8f 89       	ldd	r24, Y+23	; 0x17
    19fc:	98 8d       	ldd	r25, Y+24	; 0x18
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	4c f5       	brge	.+82     	; 0x1a60 <HMI_threeWrong+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e2       	ldi	r20, 0x20	; 32
    1a1c:	51 e4       	ldi	r21, 0x41	; 65
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9c 8b       	std	Y+20, r25	; 0x14
    1a34:	8b 8b       	std	Y+19, r24	; 0x13
    1a36:	0f c0       	rjmp	.+30     	; 0x1a56 <HMI_threeWrong+0xd0>
    1a38:	88 ec       	ldi	r24, 0xC8	; 200
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9a 8b       	std	Y+18, r25	; 0x12
    1a3e:	89 8b       	std	Y+17, r24	; 0x11
    1a40:	89 89       	ldd	r24, Y+17	; 0x11
    1a42:	9a 89       	ldd	r25, Y+18	; 0x12
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <HMI_threeWrong+0xbe>
    1a48:	9a 8b       	std	Y+18, r25	; 0x12
    1a4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	9c 8b       	std	Y+20, r25	; 0x14
    1a54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a56:	8b 89       	ldd	r24, Y+19	; 0x13
    1a58:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	69 f7       	brne	.-38     	; 0x1a38 <HMI_threeWrong+0xb2>
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <HMI_threeWrong+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9c 8b       	std	Y+20, r25	; 0x14
    1a72:	8b 8b       	std	Y+19, r24	; 0x13
    1a74:	8b 89       	ldd	r24, Y+19	; 0x13
    1a76:	9c 89       	ldd	r25, Y+20	; 0x14
    1a78:	98 8b       	std	Y+16, r25	; 0x10
    1a7a:	8f 87       	std	Y+15, r24	; 0x0f
    1a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7e:	98 89       	ldd	r25, Y+16	; 0x10
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <HMI_threeWrong+0xfa>
    1a84:	98 8b       	std	Y+16, r25	; 0x10
    1a86:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(20);
		/*Tell control MCU*/
		HMI_sendOperation(TIME_1_WRONG);
    1a88:	8a e0       	ldi	r24, 0x0A	; 10
    1a8a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <HMI_sendOperation>

		/*Display wrong pass on screen*/
		LCD_clearScreen();
    1a8e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 ea       	ldi	r26, 0xA0	; 160
    1a98:	b1 e4       	ldi	r27, 0x41	; 65
    1a9a:	8b 87       	std	Y+11, r24	; 0x0b
    1a9c:	9c 87       	std	Y+12, r25	; 0x0c
    1a9e:	ad 87       	std	Y+13, r26	; 0x0d
    1aa0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a ef       	ldi	r20, 0xFA	; 250
    1ab0:	54 e4       	ldi	r21, 0x44	; 68
    1ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8f 83       	std	Y+7, r24	; 0x07
    1abc:	98 87       	std	Y+8, r25	; 0x08
    1abe:	a9 87       	std	Y+9, r26	; 0x09
    1ac0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	89 85       	ldd	r24, Y+9	; 0x09
    1ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <HMI_threeWrong+0x15e>
		__ticks = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <HMI_threeWrong+0x1dc>
	else if (__tmp > 65535)
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	3f ef       	ldi	r19, 0xFF	; 255
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	57 e4       	ldi	r21, 0x47	; 71
    1af4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	4c f5       	brge	.+82     	; 0x1b4e <HMI_threeWrong+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9e 83       	std	Y+6, r25	; 0x06
    1b22:	8d 83       	std	Y+5, r24	; 0x05
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <HMI_threeWrong+0x1be>
    1b26:	88 ec       	ldi	r24, 0xC8	; 200
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <HMI_threeWrong+0x1ac>
    1b36:	9c 83       	std	Y+4, r25	; 0x04
    1b38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <HMI_threeWrong+0x1a0>
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <HMI_threeWrong+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b50:	78 85       	ldd	r23, Y+8	; 0x08
    1b52:	89 85       	ldd	r24, Y+9	; 0x09
    1b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9e 83       	std	Y+6, r25	; 0x06
    1b60:	8d 83       	std	Y+5, r24	; 0x05
    1b62:	8d 81       	ldd	r24, Y+5	; 0x05
    1b64:	9e 81       	ldd	r25, Y+6	; 0x06
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <HMI_threeWrong+0x1e8>
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		LCD_displayString("Error !! wrong password");
    1b76:	81 ef       	ldi	r24, 0xF1	; 241
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>

		delaySeconds(20);
    1b7e:	84 e1       	ldi	r24, 0x14	; 20
    1b80:	0e 94 81 11 	call	0x2302	; 0x2302 <delaySeconds>
		g_checkPassword=0;
    1b84:	10 92 ba 01 	sts	0x01BA, r1
		HMI_changeOrOpen();
    1b88:	0e 94 6e 10 	call	0x20dc	; 0x20dc <HMI_changeOrOpen>
	}
}
    1b8c:	6c 96       	adiw	r28, 0x1c	; 28
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <HMI_openDoorCheck>:

/* Description : -
 * A function to open door and start rotation clockwise
 */
void HMI_openDoorCheck(void)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	6d 97       	sbiw	r28, 0x1d	; 29
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1bb2:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	/*Ask the user to enter password*/
	LCD_displayString("please enter password:");
    1bb6:	80 e6       	ldi	r24, 0x60	; 96
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>

	HMI_sendPassword(1,0,PASSWORD_CHECK);
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	44 e0       	ldi	r20, 0x04	; 4
    1bc4:	0e 94 73 06 	call	0xce6	; 0xce6 <HMI_sendPassword>

	uint8 pass_stat=UART_recieveByte();
    1bc8:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
    1bcc:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Password matches*/
	if(pass_stat == PASS_MATCH)
    1bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd0:	81 31       	cpi	r24, 0x11	; 17
    1bd2:	09 f0       	breq	.+2      	; 0x1bd6 <HMI_openDoorCheck+0x38>
    1bd4:	2b c1       	rjmp	.+598    	; 0x1e2c <HMI_openDoorCheck+0x28e>
	{
		LCD_clearScreen();
    1bd6:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
		HMI_openDoor();
    1bda:	0e 94 a6 0b 	call	0x174c	; 0x174c <HMI_openDoor>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 ea       	ldi	r26, 0xA0	; 160
    1be4:	b1 e4       	ldi	r27, 0x41	; 65
    1be6:	89 8f       	std	Y+25, r24	; 0x19
    1be8:	9a 8f       	std	Y+26, r25	; 0x1a
    1bea:	ab 8f       	std	Y+27, r26	; 0x1b
    1bec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a ef       	ldi	r20, 0xFA	; 250
    1bfc:	54 e4       	ldi	r21, 0x44	; 68
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8d 8b       	std	Y+21, r24	; 0x15
    1c08:	9e 8b       	std	Y+22, r25	; 0x16
    1c0a:	af 8b       	std	Y+23, r26	; 0x17
    1c0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c10:	7e 89       	ldd	r23, Y+22	; 0x16
    1c12:	8f 89       	ldd	r24, Y+23	; 0x17
    1c14:	98 8d       	ldd	r25, Y+24	; 0x18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <HMI_openDoorCheck+0x92>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9c 8b       	std	Y+20, r25	; 0x14
    1c2c:	8b 8b       	std	Y+19, r24	; 0x13
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <HMI_openDoorCheck+0x110>
	else if (__tmp > 65535)
    1c30:	6d 89       	ldd	r22, Y+21	; 0x15
    1c32:	7e 89       	ldd	r23, Y+22	; 0x16
    1c34:	8f 89       	ldd	r24, Y+23	; 0x17
    1c36:	98 8d       	ldd	r25, Y+24	; 0x18
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <HMI_openDoorCheck+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9c 8b       	std	Y+20, r25	; 0x14
    1c6e:	8b 8b       	std	Y+19, r24	; 0x13
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <HMI_openDoorCheck+0xf2>
    1c72:	88 ec       	ldi	r24, 0xC8	; 200
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9a 8b       	std	Y+18, r25	; 0x12
    1c78:	89 8b       	std	Y+17, r24	; 0x11
    1c7a:	89 89       	ldd	r24, Y+17	; 0x11
    1c7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <HMI_openDoorCheck+0xe0>
    1c82:	9a 8b       	std	Y+18, r25	; 0x12
    1c84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	8b 89       	ldd	r24, Y+19	; 0x13
    1c88:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	8b 89       	ldd	r24, Y+19	; 0x13
    1c92:	9c 89       	ldd	r25, Y+20	; 0x14
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <HMI_openDoorCheck+0xd4>
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <HMI_openDoorCheck+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9c 8b       	std	Y+20, r25	; 0x14
    1cac:	8b 8b       	std	Y+19, r24	; 0x13
    1cae:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb2:	98 8b       	std	Y+16, r25	; 0x10
    1cb4:	8f 87       	std	Y+15, r24	; 0x0f
    1cb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb8:	98 89       	ldd	r25, Y+16	; 0x10
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <HMI_openDoorCheck+0x11c>
    1cbe:	98 8b       	std	Y+16, r25	; 0x10
    1cc0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(20);
		g_checkPassword=0;
    1cc2:	10 92 ba 01 	sts	0x01BA, r1
		HMI_sendOperation(OPEN_DOOR);
    1cc6:	85 e0       	ldi	r24, 0x05	; 5
    1cc8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <HMI_sendOperation>
    1ccc:	b3 c0       	rjmp	.+358    	; 0x1e34 <HMI_openDoorCheck+0x296>
		return;
	}
	/*Password doesn't match*/
	while(pass_stat == PASS_MISMATCH)
	{
		g_checkPassword++;
    1cce:	80 91 ba 01 	lds	r24, 0x01BA
    1cd2:	8f 5f       	subi	r24, 0xFF	; 255
    1cd4:	80 93 ba 01 	sts	0x01BA, r24
		LCD_clearScreen();
    1cd8:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
		LCD_displayString("Wrong Password ! ");
    1cdc:	89 e0       	ldi	r24, 0x09	; 9
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
		LCD_moveCursor(1,0);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>
		LCD_displayString("Wrong password");
    1cec:	8b e1       	ldi	r24, 0x1B	; 27
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
		LCD_moveCursor(1,0);
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>
		LCD_displayString("Remaining trials : ");
    1cfc:	8a e2       	ldi	r24, 0x2A	; 42
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
		LCD_integerToString(3-g_checkPassword);
    1d04:	80 91 ba 01 	lds	r24, 0x01BA
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	82 1b       	sub	r24, r18
    1d12:	93 0b       	sbc	r25, r19
    1d14:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <LCD_integerToString>
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	aa e7       	ldi	r26, 0x7A	; 122
    1d1e:	b4 e4       	ldi	r27, 0x44	; 68
    1d20:	8b 87       	std	Y+11, r24	; 0x0b
    1d22:	9c 87       	std	Y+12, r25	; 0x0c
    1d24:	ad 87       	std	Y+13, r26	; 0x0d
    1d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a ef       	ldi	r20, 0xFA	; 250
    1d36:	54 e4       	ldi	r21, 0x44	; 68
    1d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8f 83       	std	Y+7, r24	; 0x07
    1d42:	98 87       	std	Y+8, r25	; 0x08
    1d44:	a9 87       	std	Y+9, r26	; 0x09
    1d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e8       	ldi	r20, 0x80	; 128
    1d56:	5f e3       	ldi	r21, 0x3F	; 63
    1d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d5c:	88 23       	and	r24, r24
    1d5e:	2c f4       	brge	.+10     	; 0x1d6a <HMI_openDoorCheck+0x1cc>
		__ticks = 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	3f c0       	rjmp	.+126    	; 0x1de8 <HMI_openDoorCheck+0x24a>
	else if (__tmp > 65535)
    1d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6c:	78 85       	ldd	r23, Y+8	; 0x08
    1d6e:	89 85       	ldd	r24, Y+9	; 0x09
    1d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	3f ef       	ldi	r19, 0xFF	; 255
    1d76:	4f e7       	ldi	r20, 0x7F	; 127
    1d78:	57 e4       	ldi	r21, 0x47	; 71
    1d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d7e:	18 16       	cp	r1, r24
    1d80:	4c f5       	brge	.+82     	; 0x1dd4 <HMI_openDoorCheck+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	cd 01       	movw	r24, r26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <HMI_openDoorCheck+0x22c>
    1dac:	88 ec       	ldi	r24, 0xC8	; 200
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9c 83       	std	Y+4, r25	; 0x04
    1db2:	8b 83       	std	Y+3, r24	; 0x03
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	f1 f7       	brne	.-4      	; 0x1db8 <HMI_openDoorCheck+0x21a>
    1dbc:	9c 83       	std	Y+4, r25	; 0x04
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	9e 83       	std	Y+6, r25	; 0x06
    1dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	69 f7       	brne	.-38     	; 0x1dac <HMI_openDoorCheck+0x20e>
    1dd2:	14 c0       	rjmp	.+40     	; 0x1dfc <HMI_openDoorCheck+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	9e 83       	std	Y+6, r25	; 0x06
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dea:	9e 81       	ldd	r25, Y+6	; 0x06
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	9a 81       	ldd	r25, Y+2	; 0x02
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <HMI_openDoorCheck+0x256>
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		HMI_threeWrong();
    1dfc:	0e 94 c3 0c 	call	0x1986	; 0x1986 <HMI_threeWrong>

		LCD_clearScreen();
    1e00:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
		/*Call the function again*/
		HMI_openDoorCheck();
    1e04:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <HMI_openDoorCheck>

		LCD_clearScreen();
    1e08:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
		/*Ask the user to enter password*/
		LCD_displayString("please enter password:");
    1e0c:	80 e6       	ldi	r24, 0x60	; 96
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>

		HMI_sendPassword(1,0,PASSWORD_CHECK);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	60 e0       	ldi	r22, 0x00	; 0
    1e18:	44 e0       	ldi	r20, 0x04	; 4
    1e1a:	0e 94 73 06 	call	0xce6	; 0xce6 <HMI_sendPassword>

		pass_stat=UART_recieveByte();
    1e1e:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
    1e22:	8d 8f       	std	Y+29, r24	; 0x1d
		if(g_checkPassword==0)
    1e24:	80 91 ba 01 	lds	r24, 0x01BA
    1e28:	88 23       	and	r24, r24
    1e2a:	21 f0       	breq	.+8      	; 0x1e34 <HMI_openDoorCheck+0x296>
		g_checkPassword=0;
		HMI_sendOperation(OPEN_DOOR);
		return;
	}
	/*Password doesn't match*/
	while(pass_stat == PASS_MISMATCH)
    1e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2e:	80 31       	cpi	r24, 0x10	; 16
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <HMI_openDoorCheck+0x296>
    1e32:	4d cf       	rjmp	.-358    	; 0x1cce <HMI_openDoorCheck+0x130>

		pass_stat=UART_recieveByte();
		if(g_checkPassword==0)
			break;
	}
}
    1e34:	6d 96       	adiw	r28, 0x1d	; 29
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <HMI_changePass>:

/* Description : -
 * A function to change the password
 */
void HMI_changePass(void)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1e5a:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	TIMER1_deInit();
    1e5e:	0e 94 67 20 	call	0x40ce	; 0x40ce <TIMER1_deInit>
	/*Ask the user to enter password*/
	LCD_displayString("please enter password:");
    1e62:	80 e6       	ldi	r24, 0x60	; 96
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
	HMI_sendPassword(1,0,PASSWORD_CHECK);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	44 e0       	ldi	r20, 0x04	; 4
    1e70:	0e 94 73 06 	call	0xce6	; 0xce6 <HMI_sendPassword>


	uint8 pass_stat=UART_recieveByte();
    1e74:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
    1e78:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Password matches*/
	if(pass_stat == PASS_MATCH)
    1e7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e7c:	81 31       	cpi	r24, 0x11	; 17
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <HMI_changePass+0x3c>
    1e80:	20 c1       	rjmp	.+576    	; 0x20c2 <HMI_changePass+0x27c>
	{
		LCD_clearScreen();
    1e82:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
		HMI_createSystemPassword();
    1e86:	0e 94 19 09 	call	0x1232	; 0x1232 <HMI_createSystemPassword>
		g_checkPassword=0;
    1e8a:	10 92 ba 01 	sts	0x01BA, r1
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	aa e7       	ldi	r26, 0x7A	; 122
    1e94:	b4 e4       	ldi	r27, 0x44	; 68
    1e96:	89 8f       	std	Y+25, r24	; 0x19
    1e98:	9a 8f       	std	Y+26, r25	; 0x1a
    1e9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a ef       	ldi	r20, 0xFA	; 250
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8d 8b       	std	Y+21, r24	; 0x15
    1eb8:	9e 8b       	std	Y+22, r25	; 0x16
    1eba:	af 8b       	std	Y+23, r26	; 0x17
    1ebc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	2c f4       	brge	.+10     	; 0x1ee0 <HMI_changePass+0x9a>
		__ticks = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	3f c0       	rjmp	.+126    	; 0x1f5e <HMI_changePass+0x118>
	else if (__tmp > 65535)
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	3f ef       	ldi	r19, 0xFF	; 255
    1eec:	4f e7       	ldi	r20, 0x7F	; 127
    1eee:	57 e4       	ldi	r21, 0x47	; 71
    1ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef4:	18 16       	cp	r1, r24
    1ef6:	4c f5       	brge	.+82     	; 0x1f4a <HMI_changePass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef8:	69 8d       	ldd	r22, Y+25	; 0x19
    1efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e2       	ldi	r20, 0x20	; 32
    1f06:	51 e4       	ldi	r21, 0x41	; 65
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <HMI_changePass+0xfa>
    1f22:	88 ec       	ldi	r24, 0xC8	; 200
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9a 8b       	std	Y+18, r25	; 0x12
    1f28:	89 8b       	std	Y+17, r24	; 0x11
    1f2a:	89 89       	ldd	r24, Y+17	; 0x11
    1f2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <HMI_changePass+0xe8>
    1f32:	9a 8b       	std	Y+18, r25	; 0x12
    1f34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f36:	8b 89       	ldd	r24, Y+19	; 0x13
    1f38:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	9c 8b       	std	Y+20, r25	; 0x14
    1f3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f40:	8b 89       	ldd	r24, Y+19	; 0x13
    1f42:	9c 89       	ldd	r25, Y+20	; 0x14
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	69 f7       	brne	.-38     	; 0x1f22 <HMI_changePass+0xdc>
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <HMI_changePass+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f50:	98 8d       	ldd	r25, Y+24	; 0x18
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9c 8b       	std	Y+20, r25	; 0x14
    1f5c:	8b 8b       	std	Y+19, r24	; 0x13
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	9c 89       	ldd	r25, Y+20	; 0x14
    1f62:	98 8b       	std	Y+16, r25	; 0x10
    1f64:	8f 87       	std	Y+15, r24	; 0x0f
    1f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f68:	98 89       	ldd	r25, Y+16	; 0x10
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <HMI_changePass+0x124>
    1f6e:	98 8b       	std	Y+16, r25	; 0x10
    1f70:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		HMI_changeOrOpen();
    1f72:	0e 94 6e 10 	call	0x20dc	; 0x20dc <HMI_changeOrOpen>
    1f76:	a9 c0       	rjmp	.+338    	; 0x20ca <HMI_changePass+0x284>

	/*Password doesn't match*/
	/*Password doesn't match*/
	while(pass_stat == PASS_MISMATCH)
	{
		g_checkPassword++;
    1f78:	80 91 ba 01 	lds	r24, 0x01BA
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
    1f7e:	80 93 ba 01 	sts	0x01BA, r24
		HMI_threeWrong();
    1f82:	0e 94 c3 0c 	call	0x1986	; 0x1986 <HMI_threeWrong>

		LCD_clearScreen();
    1f86:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
		LCD_displayString("Wrong Password ! ");
    1f8a:	89 e0       	ldi	r24, 0x09	; 9
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
		LCD_moveCursor(1,0);
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>
		LCD_displayString("Remaining trials : ");
    1f9a:	8a e2       	ldi	r24, 0x2A	; 42
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
		LCD_integerToString(3-g_checkPassword);
    1fa2:	80 91 ba 01 	lds	r24, 0x01BA
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	83 e0       	ldi	r24, 0x03	; 3
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	82 1b       	sub	r24, r18
    1fb0:	93 0b       	sbc	r25, r19
    1fb2:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <LCD_integerToString>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	aa e7       	ldi	r26, 0x7A	; 122
    1fbc:	b4 e4       	ldi	r27, 0x44	; 68
    1fbe:	8b 87       	std	Y+11, r24	; 0x0b
    1fc0:	9c 87       	std	Y+12, r25	; 0x0c
    1fc2:	ad 87       	std	Y+13, r26	; 0x0d
    1fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a ef       	ldi	r20, 0xFA	; 250
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8f 83       	std	Y+7, r24	; 0x07
    1fe0:	98 87       	std	Y+8, r25	; 0x08
    1fe2:	a9 87       	std	Y+9, r26	; 0x09
    1fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe8:	78 85       	ldd	r23, Y+8	; 0x08
    1fea:	89 85       	ldd	r24, Y+9	; 0x09
    1fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <HMI_changePass+0x1c2>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <HMI_changePass+0x240>
	else if (__tmp > 65535)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <HMI_changePass+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	6b 85       	ldd	r22, Y+11	; 0x0b
    2022:	7c 85       	ldd	r23, Y+12	; 0x0c
    2024:	8d 85       	ldd	r24, Y+13	; 0x0d
    2026:	9e 85       	ldd	r25, Y+14	; 0x0e
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <HMI_changePass+0x222>
    204a:	88 ec       	ldi	r24, 0xC8	; 200
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
    2052:	8b 81       	ldd	r24, Y+3	; 0x03
    2054:	9c 81       	ldd	r25, Y+4	; 0x04
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <HMI_changePass+0x210>
    205a:	9c 83       	std	Y+4, r25	; 0x04
    205c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8d 81       	ldd	r24, Y+5	; 0x05
    206a:	9e 81       	ldd	r25, Y+6	; 0x06
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <HMI_changePass+0x204>
    2070:	14 c0       	rjmp	.+40     	; 0x209a <HMI_changePass+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <HMI_changePass+0x24c>
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);

		LCD_clearScreen();
    209a:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>

		/*Call the function again*/

		LCD_clearScreen();
    209e:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
		/*Ask the user to enter password*/
		LCD_displayString("please enter password:");
    20a2:	80 e6       	ldi	r24, 0x60	; 96
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>

		HMI_sendPassword(1,0,PASSWORD_CHECK);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	44 e0       	ldi	r20, 0x04	; 4
    20b0:	0e 94 73 06 	call	0xce6	; 0xce6 <HMI_sendPassword>

		pass_stat=UART_recieveByte();
    20b4:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
    20b8:	8d 8f       	std	Y+29, r24	; 0x1d
		if(g_checkPassword==0)
    20ba:	80 91 ba 01 	lds	r24, 0x01BA
    20be:	88 23       	and	r24, r24
    20c0:	21 f0       	breq	.+8      	; 0x20ca <HMI_changePass+0x284>
		return;
	}

	/*Password doesn't match*/
	/*Password doesn't match*/
	while(pass_stat == PASS_MISMATCH)
    20c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c4:	80 31       	cpi	r24, 0x10	; 16
    20c6:	09 f4       	brne	.+2      	; 0x20ca <HMI_changePass+0x284>
    20c8:	57 cf       	rjmp	.-338    	; 0x1f78 <HMI_changePass+0x132>

		pass_stat=UART_recieveByte();
		if(g_checkPassword==0)
			break;
	}
}
    20ca:	6d 96       	adiw	r28, 0x1d	; 29
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <HMI_changeOrOpen>:

/* Description : -
 * A function to get what the user wants to do
 */
void HMI_changeOrOpen(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	6d 97       	sbiw	r28, 0x1d	; 29
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_clearScreen();
    20f0:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	/*Ask the user to enter what he wants to do*/
	LCD_displayString("+ : Open the door");
    20f4:	8e e3       	ldi	r24, 0x3E	; 62
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
	LCD_moveCursor(1,0);
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>
	LCD_displayString("- : Change Password");
    2104:	80 e5       	ldi	r24, 0x50	; 80
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	aa ef       	ldi	r26, 0xFA	; 250
    2112:	b3 e4       	ldi	r27, 0x43	; 67
    2114:	89 8f       	std	Y+25, r24	; 0x19
    2116:	9a 8f       	std	Y+26, r25	; 0x1a
    2118:	ab 8f       	std	Y+27, r26	; 0x1b
    211a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211c:	69 8d       	ldd	r22, Y+25	; 0x19
    211e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2120:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2122:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	4a ef       	ldi	r20, 0xFA	; 250
    212a:	54 e4       	ldi	r21, 0x44	; 68
    212c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	8d 8b       	std	Y+21, r24	; 0x15
    2136:	9e 8b       	std	Y+22, r25	; 0x16
    2138:	af 8b       	std	Y+23, r26	; 0x17
    213a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	40 e8       	ldi	r20, 0x80	; 128
    214a:	5f e3       	ldi	r21, 0x3F	; 63
    214c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2150:	88 23       	and	r24, r24
    2152:	2c f4       	brge	.+10     	; 0x215e <HMI_changeOrOpen+0x82>
		__ticks = 1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9c 8b       	std	Y+20, r25	; 0x14
    215a:	8b 8b       	std	Y+19, r24	; 0x13
    215c:	3f c0       	rjmp	.+126    	; 0x21dc <HMI_changeOrOpen+0x100>
	else if (__tmp > 65535)
    215e:	6d 89       	ldd	r22, Y+21	; 0x15
    2160:	7e 89       	ldd	r23, Y+22	; 0x16
    2162:	8f 89       	ldd	r24, Y+23	; 0x17
    2164:	98 8d       	ldd	r25, Y+24	; 0x18
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	3f ef       	ldi	r19, 0xFF	; 255
    216a:	4f e7       	ldi	r20, 0x7F	; 127
    216c:	57 e4       	ldi	r21, 0x47	; 71
    216e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2172:	18 16       	cp	r1, r24
    2174:	4c f5       	brge	.+82     	; 0x21c8 <HMI_changeOrOpen+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2176:	69 8d       	ldd	r22, Y+25	; 0x19
    2178:	7a 8d       	ldd	r23, Y+26	; 0x1a
    217a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    217c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e2       	ldi	r20, 0x20	; 32
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9c 8b       	std	Y+20, r25	; 0x14
    219c:	8b 8b       	std	Y+19, r24	; 0x13
    219e:	0f c0       	rjmp	.+30     	; 0x21be <HMI_changeOrOpen+0xe2>
    21a0:	88 ec       	ldi	r24, 0xC8	; 200
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	9a 8b       	std	Y+18, r25	; 0x12
    21a6:	89 8b       	std	Y+17, r24	; 0x11
    21a8:	89 89       	ldd	r24, Y+17	; 0x11
    21aa:	9a 89       	ldd	r25, Y+18	; 0x12
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <HMI_changeOrOpen+0xd0>
    21b0:	9a 8b       	std	Y+18, r25	; 0x12
    21b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b4:	8b 89       	ldd	r24, Y+19	; 0x13
    21b6:	9c 89       	ldd	r25, Y+20	; 0x14
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21be:	8b 89       	ldd	r24, Y+19	; 0x13
    21c0:	9c 89       	ldd	r25, Y+20	; 0x14
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	69 f7       	brne	.-38     	; 0x21a0 <HMI_changeOrOpen+0xc4>
    21c6:	14 c0       	rjmp	.+40     	; 0x21f0 <HMI_changeOrOpen+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ca:	7e 89       	ldd	r23, Y+22	; 0x16
    21cc:	8f 89       	ldd	r24, Y+23	; 0x17
    21ce:	98 8d       	ldd	r25, Y+24	; 0x18
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	9c 8b       	std	Y+20, r25	; 0x14
    21da:	8b 8b       	std	Y+19, r24	; 0x13
    21dc:	8b 89       	ldd	r24, Y+19	; 0x13
    21de:	9c 89       	ldd	r25, Y+20	; 0x14
    21e0:	98 8b       	std	Y+16, r25	; 0x10
    21e2:	8f 87       	std	Y+15, r24	; 0x0f
    21e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e6:	98 89       	ldd	r25, Y+16	; 0x10
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <HMI_changeOrOpen+0x10c>
    21ec:	98 8b       	std	Y+16, r25	; 0x10
    21ee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	key=KEYPAD_getPressedKey();
    21f0:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <KEYPAD_getPressedKey>
    21f4:	8d 8f       	std	Y+29, r24	; 0x1d
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	aa ef       	ldi	r26, 0xFA	; 250
    21fc:	b3 e4       	ldi	r27, 0x43	; 67
    21fe:	8b 87       	std	Y+11, r24	; 0x0b
    2200:	9c 87       	std	Y+12, r25	; 0x0c
    2202:	ad 87       	std	Y+13, r26	; 0x0d
    2204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2206:	6b 85       	ldd	r22, Y+11	; 0x0b
    2208:	7c 85       	ldd	r23, Y+12	; 0x0c
    220a:	8d 85       	ldd	r24, Y+13	; 0x0d
    220c:	9e 85       	ldd	r25, Y+14	; 0x0e
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a ef       	ldi	r20, 0xFA	; 250
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8f 83       	std	Y+7, r24	; 0x07
    2220:	98 87       	std	Y+8, r25	; 0x08
    2222:	a9 87       	std	Y+9, r26	; 0x09
    2224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	5f e3       	ldi	r21, 0x3F	; 63
    2236:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223a:	88 23       	and	r24, r24
    223c:	2c f4       	brge	.+10     	; 0x2248 <HMI_changeOrOpen+0x16c>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
    2246:	3f c0       	rjmp	.+126    	; 0x22c6 <HMI_changeOrOpen+0x1ea>
	else if (__tmp > 65535)
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	3f ef       	ldi	r19, 0xFF	; 255
    2254:	4f e7       	ldi	r20, 0x7F	; 127
    2256:	57 e4       	ldi	r21, 0x47	; 71
    2258:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225c:	18 16       	cp	r1, r24
    225e:	4c f5       	brge	.+82     	; 0x22b2 <HMI_changeOrOpen+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2260:	6b 85       	ldd	r22, Y+11	; 0x0b
    2262:	7c 85       	ldd	r23, Y+12	; 0x0c
    2264:	8d 85       	ldd	r24, Y+13	; 0x0d
    2266:	9e 85       	ldd	r25, Y+14	; 0x0e
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e2       	ldi	r20, 0x20	; 32
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9e 83       	std	Y+6, r25	; 0x06
    2286:	8d 83       	std	Y+5, r24	; 0x05
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <HMI_changeOrOpen+0x1cc>
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	8b 83       	std	Y+3, r24	; 0x03
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <HMI_changeOrOpen+0x1ba>
    229a:	9c 83       	std	Y+4, r25	; 0x04
    229c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	8d 81       	ldd	r24, Y+5	; 0x05
    22a0:	9e 81       	ldd	r25, Y+6	; 0x06
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9e 83       	std	Y+6, r25	; 0x06
    22a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	69 f7       	brne	.-38     	; 0x228a <HMI_changeOrOpen+0x1ae>
    22b0:	14 c0       	rjmp	.+40     	; 0x22da <HMI_changeOrOpen+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9e 83       	std	Y+6, r25	; 0x06
    22c4:	8d 83       	std	Y+5, r24	; 0x05
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	9a 83       	std	Y+2, r25	; 0x02
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <HMI_changeOrOpen+0x1f6>
    22d6:	9a 83       	std	Y+2, r25	; 0x02
    22d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	/*The user chose to open door , so we call it's function*/
	if(key=='+')
    22da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22dc:	8b 32       	cpi	r24, 0x2B	; 43
    22de:	19 f4       	brne	.+6      	; 0x22e6 <HMI_changeOrOpen+0x20a>
	{
		HMI_openDoorCheck();
    22e0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <HMI_openDoorCheck>
    22e4:	05 c0       	rjmp	.+10     	; 0x22f0 <HMI_changeOrOpen+0x214>
	}

	/*The user chose to change password , so we call it's function*/
	else if(key=='-')
    22e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e8:	8d 32       	cpi	r24, 0x2D	; 45
    22ea:	11 f4       	brne	.+4      	; 0x22f0 <HMI_changeOrOpen+0x214>
	{
		HMI_changePass();
    22ec:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <HMI_changePass>
	}
}
    22f0:	6d 96       	adiw	r28, 0x1d	; 29
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <delaySeconds>:
/*
 * Description :
 * A function that counts the sec by causing an interrupt every second and increase our global variable
 */
void delaySeconds(uint8 sec)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	2c 97       	sbiw	r28, 0x0c	; 12
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	8f 83       	std	Y+7, r24	; 0x07
	/* setting the callBack function to count seconds */
	TIMER1_setCallBack(countSec);
    2318:	86 ec       	ldi	r24, 0xC6	; 198
    231a:	91 e1       	ldi	r25, 0x11	; 17
    231c:	0e 94 8c 20 	call	0x4118	; 0x4118 <TIMER1_setCallBack>
	/* timer1 configurations to count sec per interrupt */
	Timer1_ConfigType timer1Config = {0,31250,N_256,COMPARE};
    2320:	ce 01       	movw	r24, r28
    2322:	01 96       	adiw	r24, 0x01	; 1
    2324:	99 87       	std	Y+9, r25	; 0x09
    2326:	88 87       	std	Y+8, r24	; 0x08
    2328:	e4 eb       	ldi	r30, 0xB4	; 180
    232a:	f1 e0       	ldi	r31, 0x01	; 1
    232c:	fb 87       	std	Y+11, r31	; 0x0b
    232e:	ea 87       	std	Y+10, r30	; 0x0a
    2330:	f6 e0       	ldi	r31, 0x06	; 6
    2332:	fc 87       	std	Y+12, r31	; 0x0c
    2334:	ea 85       	ldd	r30, Y+10	; 0x0a
    2336:	fb 85       	ldd	r31, Y+11	; 0x0b
    2338:	00 80       	ld	r0, Z
    233a:	8a 85       	ldd	r24, Y+10	; 0x0a
    233c:	9b 85       	ldd	r25, Y+11	; 0x0b
    233e:	01 96       	adiw	r24, 0x01	; 1
    2340:	9b 87       	std	Y+11, r25	; 0x0b
    2342:	8a 87       	std	Y+10, r24	; 0x0a
    2344:	e8 85       	ldd	r30, Y+8	; 0x08
    2346:	f9 85       	ldd	r31, Y+9	; 0x09
    2348:	00 82       	st	Z, r0
    234a:	88 85       	ldd	r24, Y+8	; 0x08
    234c:	99 85       	ldd	r25, Y+9	; 0x09
    234e:	01 96       	adiw	r24, 0x01	; 1
    2350:	99 87       	std	Y+9, r25	; 0x09
    2352:	88 87       	std	Y+8, r24	; 0x08
    2354:	9c 85       	ldd	r25, Y+12	; 0x0c
    2356:	91 50       	subi	r25, 0x01	; 1
    2358:	9c 87       	std	Y+12, r25	; 0x0c
    235a:	ec 85       	ldd	r30, Y+12	; 0x0c
    235c:	ee 23       	and	r30, r30
    235e:	51 f7       	brne	.-44     	; 0x2334 <delaySeconds+0x32>

	TIMER1_init(&timer1Config);
    2360:	ce 01       	movw	r24, r28
    2362:	01 96       	adiw	r24, 0x01	; 1
    2364:	0e 94 1f 20 	call	0x403e	; 0x403e <TIMER1_init>
	while(g_sec < sec);
    2368:	90 91 bb 01 	lds	r25, 0x01BB
    236c:	8f 81       	ldd	r24, Y+7	; 0x07
    236e:	98 17       	cp	r25, r24
    2370:	d8 f3       	brcs	.-10     	; 0x2368 <delaySeconds+0x66>
	g_sec = 0;
    2372:	10 92 bb 01 	sts	0x01BB, r1
	TIMER1_deInit();
    2376:	0e 94 67 20 	call	0x40ce	; 0x40ce <TIMER1_deInit>

}
    237a:	2c 96       	adiw	r28, 0x0c	; 12
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <countSec>:
/*
 * Description :
 * A function that increase our global variable each second
 */
void countSec(void)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
	g_sec++;
    2394:	80 91 bb 01 	lds	r24, 0x01BB
    2398:	8f 5f       	subi	r24, 0xFF	; 255
    239a:	80 93 bb 01 	sts	0x01BB, r24
}
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	27 97       	sbiw	r28, 0x07	; 7
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	6a 83       	std	Y+2, r22	; 0x02
    23bc:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	88 30       	cpi	r24, 0x08	; 8
    23c2:	08 f0       	brcs	.+2      	; 0x23c6 <GPIO_setupPinDirection+0x22>
    23c4:	d2 c0       	rjmp	.+420    	; 0x256a <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	09 f0       	breq	.+2      	; 0x23ce <GPIO_setupPinDirection+0x2a>
    23cc:	63 c0       	rjmp	.+198    	; 0x2494 <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	3f 83       	std	Y+7, r19	; 0x07
    23d6:	2e 83       	std	Y+6, r18	; 0x06
    23d8:	8e 81       	ldd	r24, Y+6	; 0x06
    23da:	9f 81       	ldd	r25, Y+7	; 0x07
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	91 05       	cpc	r25, r1
    23e0:	e9 f0       	breq	.+58     	; 0x241c <GPIO_setupPinDirection+0x78>
    23e2:	2e 81       	ldd	r18, Y+6	; 0x06
    23e4:	3f 81       	ldd	r19, Y+7	; 0x07
    23e6:	22 30       	cpi	r18, 0x02	; 2
    23e8:	31 05       	cpc	r19, r1
    23ea:	61 f1       	breq	.+88     	; 0x2444 <GPIO_setupPinDirection+0xa0>
    23ec:	8e 81       	ldd	r24, Y+6	; 0x06
    23ee:	9f 81       	ldd	r25, Y+7	; 0x07
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	e1 f5       	brne	.+120    	; 0x246c <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
    23f4:	aa e3       	ldi	r26, 0x3A	; 58
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ea e3       	ldi	r30, 0x3A	; 58
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	48 2f       	mov	r20, r24
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	28 2f       	mov	r18, r24
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	02 2e       	mov	r0, r18
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <GPIO_setupPinDirection+0x6e>
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	0a 94       	dec	r0
    2414:	e2 f7       	brpl	.-8      	; 0x240e <GPIO_setupPinDirection+0x6a>
    2416:	84 2b       	or	r24, r20
    2418:	8c 93       	st	X, r24
    241a:	a7 c0       	rjmp	.+334    	; 0x256a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
    241c:	a7 e3       	ldi	r26, 0x37	; 55
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e7 e3       	ldi	r30, 0x37	; 55
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	48 2f       	mov	r20, r24
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	02 2e       	mov	r0, r18
    2434:	02 c0       	rjmp	.+4      	; 0x243a <GPIO_setupPinDirection+0x96>
    2436:	88 0f       	add	r24, r24
    2438:	99 1f       	adc	r25, r25
    243a:	0a 94       	dec	r0
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <GPIO_setupPinDirection+0x92>
    243e:	84 2b       	or	r24, r20
    2440:	8c 93       	st	X, r24
    2442:	93 c0       	rjmp	.+294    	; 0x256a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
    2444:	a4 e3       	ldi	r26, 0x34	; 52
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e4 e3       	ldi	r30, 0x34	; 52
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	48 2f       	mov	r20, r24
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	02 2e       	mov	r0, r18
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <GPIO_setupPinDirection+0xbe>
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	0a 94       	dec	r0
    2464:	e2 f7       	brpl	.-8      	; 0x245e <GPIO_setupPinDirection+0xba>
    2466:	84 2b       	or	r24, r20
    2468:	8c 93       	st	X, r24
    246a:	7f c0       	rjmp	.+254    	; 0x256a <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
    246c:	a1 e3       	ldi	r26, 0x31	; 49
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e1 e3       	ldi	r30, 0x31	; 49
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <GPIO_setupPinDirection+0xe6>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <GPIO_setupPinDirection+0xe2>
    248e:	84 2b       	or	r24, r20
    2490:	8c 93       	st	X, r24
    2492:	6b c0       	rjmp	.+214    	; 0x256a <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	88 23       	and	r24, r24
    2498:	09 f0       	breq	.+2      	; 0x249c <GPIO_setupPinDirection+0xf8>
    249a:	67 c0       	rjmp	.+206    	; 0x256a <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	3d 83       	std	Y+5, r19	; 0x05
    24a4:	2c 83       	std	Y+4, r18	; 0x04
    24a6:	8c 81       	ldd	r24, Y+4	; 0x04
    24a8:	9d 81       	ldd	r25, Y+5	; 0x05
    24aa:	81 30       	cpi	r24, 0x01	; 1
    24ac:	91 05       	cpc	r25, r1
    24ae:	f9 f0       	breq	.+62     	; 0x24ee <GPIO_setupPinDirection+0x14a>
    24b0:	2c 81       	ldd	r18, Y+4	; 0x04
    24b2:	3d 81       	ldd	r19, Y+5	; 0x05
    24b4:	22 30       	cpi	r18, 0x02	; 2
    24b6:	31 05       	cpc	r19, r1
    24b8:	79 f1       	breq	.+94     	; 0x2518 <GPIO_setupPinDirection+0x174>
    24ba:	8c 81       	ldd	r24, Y+4	; 0x04
    24bc:	9d 81       	ldd	r25, Y+5	; 0x05
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <GPIO_setupPinDirection+0x120>
    24c2:	3f c0       	rjmp	.+126    	; 0x2542 <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
    24c4:	aa e3       	ldi	r26, 0x3A	; 58
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ea e3       	ldi	r30, 0x3A	; 58
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	48 2f       	mov	r20, r24
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 2e       	mov	r0, r18
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <GPIO_setupPinDirection+0x13e>
    24de:	88 0f       	add	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	0a 94       	dec	r0
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <GPIO_setupPinDirection+0x13a>
    24e6:	80 95       	com	r24
    24e8:	84 23       	and	r24, r20
    24ea:	8c 93       	st	X, r24
    24ec:	3e c0       	rjmp	.+124    	; 0x256a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
    24ee:	a7 e3       	ldi	r26, 0x37	; 55
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e7 e3       	ldi	r30, 0x37	; 55
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	48 2f       	mov	r20, r24
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	28 2f       	mov	r18, r24
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 2e       	mov	r0, r18
    2506:	02 c0       	rjmp	.+4      	; 0x250c <GPIO_setupPinDirection+0x168>
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	0a 94       	dec	r0
    250e:	e2 f7       	brpl	.-8      	; 0x2508 <GPIO_setupPinDirection+0x164>
    2510:	80 95       	com	r24
    2512:	84 23       	and	r24, r20
    2514:	8c 93       	st	X, r24
    2516:	29 c0       	rjmp	.+82     	; 0x256a <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
    2518:	a4 e3       	ldi	r26, 0x34	; 52
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e4 e3       	ldi	r30, 0x34	; 52
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	48 2f       	mov	r20, r24
    2524:	8a 81       	ldd	r24, Y+2	; 0x02
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	02 2e       	mov	r0, r18
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <GPIO_setupPinDirection+0x192>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	0a 94       	dec	r0
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <GPIO_setupPinDirection+0x18e>
    253a:	80 95       	com	r24
    253c:	84 23       	and	r24, r20
    253e:	8c 93       	st	X, r24
    2540:	14 c0       	rjmp	.+40     	; 0x256a <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
    2542:	a1 e3       	ldi	r26, 0x31	; 49
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e1 e3       	ldi	r30, 0x31	; 49
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	48 2f       	mov	r20, r24
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	02 2e       	mov	r0, r18
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <GPIO_setupPinDirection+0x1bc>
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	0a 94       	dec	r0
    2562:	e2 f7       	brpl	.-8      	; 0x255c <GPIO_setupPinDirection+0x1b8>
    2564:	80 95       	com	r24
    2566:	84 23       	and	r24, r20
    2568:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    256a:	27 96       	adiw	r28, 0x07	; 7
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <GPIO_setupPortDirection+0x6>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <GPIO_setupPortDirection+0x8>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	84 30       	cpi	r24, 0x04	; 4
    2590:	30 f5       	brcc	.+76     	; 0x25de <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	3c 83       	std	Y+4, r19	; 0x04
    259a:	2b 83       	std	Y+3, r18	; 0x03
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	9c 81       	ldd	r25, Y+4	; 0x04
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	91 05       	cpc	r25, r1
    25a4:	71 f0       	breq	.+28     	; 0x25c2 <GPIO_setupPortDirection+0x46>
    25a6:	2b 81       	ldd	r18, Y+3	; 0x03
    25a8:	3c 81       	ldd	r19, Y+4	; 0x04
    25aa:	22 30       	cpi	r18, 0x02	; 2
    25ac:	31 05       	cpc	r19, r1
    25ae:	71 f0       	breq	.+28     	; 0x25cc <GPIO_setupPortDirection+0x50>
    25b0:	8b 81       	ldd	r24, Y+3	; 0x03
    25b2:	9c 81       	ldd	r25, Y+4	; 0x04
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	79 f4       	brne	.+30     	; 0x25d6 <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
    25b8:	ea e3       	ldi	r30, 0x3A	; 58
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	80 83       	st	Z, r24
    25c0:	0e c0       	rjmp	.+28     	; 0x25de <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
    25c2:	e7 e3       	ldi	r30, 0x37	; 55
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	80 83       	st	Z, r24
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
    25cc:	e4 e3       	ldi	r30, 0x34	; 52
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	80 83       	st	Z, r24
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
    25d6:	e1 e3       	ldi	r30, 0x31	; 49
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	80 83       	st	Z, r24
			break;
		}
	}
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	27 97       	sbiw	r28, 0x07	; 7
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	6a 83       	std	Y+2, r22	; 0x02
    2604:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	88 30       	cpi	r24, 0x08	; 8
    260a:	08 f0       	brcs	.+2      	; 0x260e <GPIO_writePin+0x22>
    260c:	d9 c0       	rjmp	.+434    	; 0x27c0 <GPIO_writePin+0x1d4>
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	81 30       	cpi	r24, 0x01	; 1
    2612:	21 f0       	breq	.+8      	; 0x261c <GPIO_writePin+0x30>
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	88 23       	and	r24, r24
    2618:	09 f0       	breq	.+2      	; 0x261c <GPIO_writePin+0x30>
    261a:	d2 c0       	rjmp	.+420    	; 0x27c0 <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	09 f0       	breq	.+2      	; 0x2624 <GPIO_writePin+0x38>
    2622:	63 c0       	rjmp	.+198    	; 0x26ea <GPIO_writePin+0xfe>
		{
			switch(port_num)
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	28 2f       	mov	r18, r24
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	3f 83       	std	Y+7, r19	; 0x07
    262c:	2e 83       	std	Y+6, r18	; 0x06
    262e:	8e 81       	ldd	r24, Y+6	; 0x06
    2630:	9f 81       	ldd	r25, Y+7	; 0x07
    2632:	81 30       	cpi	r24, 0x01	; 1
    2634:	91 05       	cpc	r25, r1
    2636:	e9 f0       	breq	.+58     	; 0x2672 <GPIO_writePin+0x86>
    2638:	2e 81       	ldd	r18, Y+6	; 0x06
    263a:	3f 81       	ldd	r19, Y+7	; 0x07
    263c:	22 30       	cpi	r18, 0x02	; 2
    263e:	31 05       	cpc	r19, r1
    2640:	61 f1       	breq	.+88     	; 0x269a <GPIO_writePin+0xae>
    2642:	8e 81       	ldd	r24, Y+6	; 0x06
    2644:	9f 81       	ldd	r25, Y+7	; 0x07
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	e1 f5       	brne	.+120    	; 0x26c2 <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
    264a:	ab e3       	ldi	r26, 0x3B	; 59
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	eb e3       	ldi	r30, 0x3B	; 59
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	48 2f       	mov	r20, r24
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	02 2e       	mov	r0, r18
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <GPIO_writePin+0x7c>
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	0a 94       	dec	r0
    266a:	e2 f7       	brpl	.-8      	; 0x2664 <GPIO_writePin+0x78>
    266c:	84 2b       	or	r24, r20
    266e:	8c 93       	st	X, r24
    2670:	a7 c0       	rjmp	.+334    	; 0x27c0 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
    2672:	a8 e3       	ldi	r26, 0x38	; 56
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e8 e3       	ldi	r30, 0x38	; 56
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	48 2f       	mov	r20, r24
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	02 2e       	mov	r0, r18
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <GPIO_writePin+0xa4>
    268c:	88 0f       	add	r24, r24
    268e:	99 1f       	adc	r25, r25
    2690:	0a 94       	dec	r0
    2692:	e2 f7       	brpl	.-8      	; 0x268c <GPIO_writePin+0xa0>
    2694:	84 2b       	or	r24, r20
    2696:	8c 93       	st	X, r24
    2698:	93 c0       	rjmp	.+294    	; 0x27c0 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
    269a:	a5 e3       	ldi	r26, 0x35	; 53
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e5 e3       	ldi	r30, 0x35	; 53
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	48 2f       	mov	r20, r24
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	02 2e       	mov	r0, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <GPIO_writePin+0xcc>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	0a 94       	dec	r0
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <GPIO_writePin+0xc8>
    26bc:	84 2b       	or	r24, r20
    26be:	8c 93       	st	X, r24
    26c0:	7f c0       	rjmp	.+254    	; 0x27c0 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
    26c2:	a2 e3       	ldi	r26, 0x32	; 50
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e2 e3       	ldi	r30, 0x32	; 50
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	48 2f       	mov	r20, r24
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	28 2f       	mov	r18, r24
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	02 2e       	mov	r0, r18
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <GPIO_writePin+0xf4>
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	0a 94       	dec	r0
    26e2:	e2 f7       	brpl	.-8      	; 0x26dc <GPIO_writePin+0xf0>
    26e4:	84 2b       	or	r24, r20
    26e6:	8c 93       	st	X, r24
    26e8:	6b c0       	rjmp	.+214    	; 0x27c0 <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    26ea:	8b 81       	ldd	r24, Y+3	; 0x03
    26ec:	88 23       	and	r24, r24
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <GPIO_writePin+0x106>
    26f0:	67 c0       	rjmp	.+206    	; 0x27c0 <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	3d 83       	std	Y+5, r19	; 0x05
    26fa:	2c 83       	std	Y+4, r18	; 0x04
    26fc:	8c 81       	ldd	r24, Y+4	; 0x04
    26fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	91 05       	cpc	r25, r1
    2704:	f9 f0       	breq	.+62     	; 0x2744 <GPIO_writePin+0x158>
    2706:	2c 81       	ldd	r18, Y+4	; 0x04
    2708:	3d 81       	ldd	r19, Y+5	; 0x05
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	79 f1       	breq	.+94     	; 0x276e <GPIO_writePin+0x182>
    2710:	8c 81       	ldd	r24, Y+4	; 0x04
    2712:	9d 81       	ldd	r25, Y+5	; 0x05
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	09 f0       	breq	.+2      	; 0x271a <GPIO_writePin+0x12e>
    2718:	3f c0       	rjmp	.+126    	; 0x2798 <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    271a:	ab e3       	ldi	r26, 0x3B	; 59
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	eb e3       	ldi	r30, 0x3B	; 59
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	48 2f       	mov	r20, r24
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	02 2e       	mov	r0, r18
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <GPIO_writePin+0x14c>
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	0a 94       	dec	r0
    273a:	e2 f7       	brpl	.-8      	; 0x2734 <GPIO_writePin+0x148>
    273c:	80 95       	com	r24
    273e:	84 23       	and	r24, r20
    2740:	8c 93       	st	X, r24
    2742:	3e c0       	rjmp	.+124    	; 0x27c0 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    2744:	a8 e3       	ldi	r26, 0x38	; 56
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e8 e3       	ldi	r30, 0x38	; 56
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	48 2f       	mov	r20, r24
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	02 2e       	mov	r0, r18
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <GPIO_writePin+0x176>
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	0a 94       	dec	r0
    2764:	e2 f7       	brpl	.-8      	; 0x275e <GPIO_writePin+0x172>
    2766:	80 95       	com	r24
    2768:	84 23       	and	r24, r20
    276a:	8c 93       	st	X, r24
    276c:	29 c0       	rjmp	.+82     	; 0x27c0 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    276e:	a5 e3       	ldi	r26, 0x35	; 53
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e5 e3       	ldi	r30, 0x35	; 53
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	48 2f       	mov	r20, r24
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	02 2e       	mov	r0, r18
    2786:	02 c0       	rjmp	.+4      	; 0x278c <GPIO_writePin+0x1a0>
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	0a 94       	dec	r0
    278e:	e2 f7       	brpl	.-8      	; 0x2788 <GPIO_writePin+0x19c>
    2790:	80 95       	com	r24
    2792:	84 23       	and	r24, r20
    2794:	8c 93       	st	X, r24
    2796:	14 c0       	rjmp	.+40     	; 0x27c0 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    2798:	a2 e3       	ldi	r26, 0x32	; 50
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e2 e3       	ldi	r30, 0x32	; 50
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	48 2f       	mov	r20, r24
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	02 2e       	mov	r0, r18
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <GPIO_writePin+0x1ca>
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	0a 94       	dec	r0
    27b8:	e2 f7       	brpl	.-8      	; 0x27b2 <GPIO_writePin+0x1c6>
    27ba:	80 95       	com	r24
    27bc:	84 23       	and	r24, r20
    27be:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    27c0:	27 96       	adiw	r28, 0x07	; 7
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,GPIO_PinDirectionType direction)
{
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <GPIO_writePort+0x6>
    27d8:	00 d0       	rcall	.+0      	; 0x27da <GPIO_writePort+0x8>
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	84 30       	cpi	r24, 0x04	; 4
    27e6:	30 f5       	brcc	.+76     	; 0x2834 <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	3c 83       	std	Y+4, r19	; 0x04
    27f0:	2b 83       	std	Y+3, r18	; 0x03
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	81 30       	cpi	r24, 0x01	; 1
    27f8:	91 05       	cpc	r25, r1
    27fa:	71 f0       	breq	.+28     	; 0x2818 <GPIO_writePort+0x46>
    27fc:	2b 81       	ldd	r18, Y+3	; 0x03
    27fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2800:	22 30       	cpi	r18, 0x02	; 2
    2802:	31 05       	cpc	r19, r1
    2804:	71 f0       	breq	.+28     	; 0x2822 <GPIO_writePort+0x50>
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	79 f4       	brne	.+30     	; 0x282c <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    280e:	eb e3       	ldi	r30, 0x3B	; 59
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	80 83       	st	Z, r24
    2816:	0e c0       	rjmp	.+28     	; 0x2834 <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    2818:	e8 e3       	ldi	r30, 0x38	; 56
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	80 83       	st	Z, r24
    2820:	09 c0       	rjmp	.+18     	; 0x2834 <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    2822:	e5 e3       	ldi	r30, 0x35	; 53
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	80 83       	st	Z, r24
    282a:	04 c0       	rjmp	.+8      	; 0x2834 <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    282c:	e2 e3       	ldi	r30, 0x32	; 50
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	80 83       	st	Z, r24
			break;
		}
	}
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	00 d0       	rcall	.+0      	; 0x2848 <GPIO_readPin+0x6>
    2848:	00 d0       	rcall	.+0      	; 0x284a <GPIO_readPin+0x8>
    284a:	0f 92       	push	r0
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	88 30       	cpi	r24, 0x08	; 8
    2858:	10 f0       	brcs	.+4      	; 0x285e <GPIO_readPin+0x1c>
	{
		return 0;
    285a:	1d 82       	std	Y+5, r1	; 0x05
    285c:	5f c0       	rjmp	.+190    	; 0x291c <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	28 2f       	mov	r18, r24
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	3c 83       	std	Y+4, r19	; 0x04
    2866:	2b 83       	std	Y+3, r18	; 0x03
    2868:	4b 81       	ldd	r20, Y+3	; 0x03
    286a:	5c 81       	ldd	r21, Y+4	; 0x04
    286c:	41 30       	cpi	r20, 0x01	; 1
    286e:	51 05       	cpc	r21, r1
    2870:	e9 f0       	breq	.+58     	; 0x28ac <GPIO_readPin+0x6a>
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	9c 81       	ldd	r25, Y+4	; 0x04
    2876:	82 30       	cpi	r24, 0x02	; 2
    2878:	91 05       	cpc	r25, r1
    287a:	59 f1       	breq	.+86     	; 0x28d2 <GPIO_readPin+0x90>
    287c:	2b 81       	ldd	r18, Y+3	; 0x03
    287e:	3c 81       	ldd	r19, Y+4	; 0x04
    2880:	21 15       	cp	r18, r1
    2882:	31 05       	cpc	r19, r1
    2884:	c9 f5       	brne	.+114    	; 0x28f8 <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    2886:	e9 e3       	ldi	r30, 0x39	; 57
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a9 01       	movw	r20, r18
    2898:	02 c0       	rjmp	.+4      	; 0x289e <GPIO_readPin+0x5c>
    289a:	55 95       	asr	r21
    289c:	47 95       	ror	r20
    289e:	8a 95       	dec	r24
    28a0:	e2 f7       	brpl	.-8      	; 0x289a <GPIO_readPin+0x58>
    28a2:	ca 01       	movw	r24, r20
    28a4:	58 2f       	mov	r21, r24
    28a6:	51 70       	andi	r21, 0x01	; 1
    28a8:	5d 83       	std	Y+5, r21	; 0x05
    28aa:	38 c0       	rjmp	.+112    	; 0x291c <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    28ac:	e6 e3       	ldi	r30, 0x36	; 54
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a9 01       	movw	r20, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <GPIO_readPin+0x82>
    28c0:	55 95       	asr	r21
    28c2:	47 95       	ror	r20
    28c4:	8a 95       	dec	r24
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <GPIO_readPin+0x7e>
    28c8:	ca 01       	movw	r24, r20
    28ca:	58 2f       	mov	r21, r24
    28cc:	51 70       	andi	r21, 0x01	; 1
    28ce:	5d 83       	std	Y+5, r21	; 0x05
    28d0:	25 c0       	rjmp	.+74     	; 0x291c <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    28d2:	e3 e3       	ldi	r30, 0x33	; 51
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a9 01       	movw	r20, r18
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <GPIO_readPin+0xa8>
    28e6:	55 95       	asr	r21
    28e8:	47 95       	ror	r20
    28ea:	8a 95       	dec	r24
    28ec:	e2 f7       	brpl	.-8      	; 0x28e6 <GPIO_readPin+0xa4>
    28ee:	ca 01       	movw	r24, r20
    28f0:	58 2f       	mov	r21, r24
    28f2:	51 70       	andi	r21, 0x01	; 1
    28f4:	5d 83       	std	Y+5, r21	; 0x05
    28f6:	12 c0       	rjmp	.+36     	; 0x291c <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    28f8:	e0 e3       	ldi	r30, 0x30	; 48
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	28 2f       	mov	r18, r24
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a9 01       	movw	r20, r18
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <GPIO_readPin+0xce>
    290c:	55 95       	asr	r21
    290e:	47 95       	ror	r20
    2910:	8a 95       	dec	r24
    2912:	e2 f7       	brpl	.-8      	; 0x290c <GPIO_readPin+0xca>
    2914:	ca 01       	movw	r24, r20
    2916:	58 2f       	mov	r21, r24
    2918:	51 70       	andi	r21, 0x01	; 1
    291a:	5d 83       	std	Y+5, r21	; 0x05
    291c:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	0f 90       	pop	r0
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	00 d0       	rcall	.+0      	; 0x2934 <GPIO_readPort+0x6>
    2934:	00 d0       	rcall	.+0      	; 0x2936 <GPIO_readPort+0x8>
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	84 30       	cpi	r24, 0x04	; 4
    2940:	10 f0       	brcs	.+4      	; 0x2946 <GPIO_readPort+0x18>
	{
		return 0;
    2942:	1c 82       	std	Y+4, r1	; 0x04
    2944:	26 c0       	rjmp	.+76     	; 0x2992 <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	28 2f       	mov	r18, r24
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	3b 83       	std	Y+3, r19	; 0x03
    294e:	2a 83       	std	Y+2, r18	; 0x02
    2950:	8a 81       	ldd	r24, Y+2	; 0x02
    2952:	9b 81       	ldd	r25, Y+3	; 0x03
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	91 05       	cpc	r25, r1
    2958:	71 f0       	breq	.+28     	; 0x2976 <GPIO_readPort+0x48>
    295a:	2a 81       	ldd	r18, Y+2	; 0x02
    295c:	3b 81       	ldd	r19, Y+3	; 0x03
    295e:	22 30       	cpi	r18, 0x02	; 2
    2960:	31 05       	cpc	r19, r1
    2962:	71 f0       	breq	.+28     	; 0x2980 <GPIO_readPort+0x52>
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	9b 81       	ldd	r25, Y+3	; 0x03
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	79 f4       	brne	.+30     	; 0x298a <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    296c:	e9 e3       	ldi	r30, 0x39	; 57
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	90 81       	ld	r25, Z
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	0e c0       	rjmp	.+28     	; 0x2992 <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    2976:	e6 e3       	ldi	r30, 0x36	; 54
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	20 81       	ld	r18, Z
    297c:	2c 83       	std	Y+4, r18	; 0x04
    297e:	09 c0       	rjmp	.+18     	; 0x2992 <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    2980:	e3 e3       	ldi	r30, 0x33	; 51
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	30 81       	ld	r19, Z
    2986:	3c 83       	std	Y+4, r19	; 0x04
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <GPIO_readPort+0x64>
		default:
			return PINC;
    298a:	e3 e3       	ldi	r30, 0x33	; 51
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	8c 83       	std	Y+4, r24	; 0x04
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <KEYPAD_getPressedKey+0x6>
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	62 e0       	ldi	r22, 0x02	; 2
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	63 e0       	ldi	r22, 0x03	; 3
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	64 e0       	ldi	r22, 0x04	; 4
    29ce:	40 e0       	ldi	r20, 0x00	; 0
    29d0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	64 e0       	ldi	r22, 0x04	; 4
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	65 e0       	ldi	r22, 0x05	; 5
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	66 e0       	ldi	r22, 0x06	; 6
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	67 e0       	ldi	r22, 0x07	; 7
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    29fc:	19 82       	std	Y+1, r1	; 0x01
    29fe:	3e c0       	rjmp	.+124    	; 0x2a7c <KEYPAD_getPressedKey+0xda>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	98 2f       	mov	r25, r24
    2a04:	9f 5f       	subi	r25, 0xFF	; 255
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	69 2f       	mov	r22, r25
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	98 2f       	mov	r25, r24
    2a14:	9f 5f       	subi	r25, 0xFF	; 255
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	69 2f       	mov	r22, r25
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	0e 94 f6 12 	call	0x25ec	; 0x25ec <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2a20:	1a 82       	std	Y+2, r1	; 0x02
    2a22:	1e c0       	rjmp	.+60     	; 0x2a60 <KEYPAD_getPressedKey+0xbe>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	98 2f       	mov	r25, r24
    2a28:	9c 5f       	subi	r25, 0xFC	; 252
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	69 2f       	mov	r22, r25
    2a2e:	0e 94 21 14 	call	0x2842	; 0x2842 <GPIO_readPin>
    2a32:	88 23       	and	r24, r24
    2a34:	91 f4       	brne	.+36     	; 0x2a5a <KEYPAD_getPressedKey+0xb8>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	88 0f       	add	r24, r24
    2a3e:	99 1f       	adc	r25, r25
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	98 2f       	mov	r25, r24
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	89 0f       	add	r24, r25
    2a4a:	8f 5f       	subi	r24, 0xFF	; 255
    2a4c:	0e 94 43 15 	call	0x2a86	; 0x2a86 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	8a 83       	std	Y+2, r24	; 0x02
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	84 30       	cpi	r24, 0x04	; 4
    2a64:	f8 f2       	brcs	.-66     	; 0x2a24 <KEYPAD_getPressedKey+0x82>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	98 2f       	mov	r25, r24
    2a6a:	9f 5f       	subi	r25, 0xFF	; 255
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	69 2f       	mov	r22, r25
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	8f 5f       	subi	r24, 0xFF	; 255
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	84 30       	cpi	r24, 0x04	; 4
    2a80:	08 f4       	brcc	.+2      	; 0x2a84 <KEYPAD_getPressedKey+0xe2>
    2a82:	be cf       	rjmp	.-132    	; 0x2a00 <KEYPAD_getPressedKey+0x5e>
    2a84:	bb cf       	rjmp	.-138    	; 0x29fc <KEYPAD_getPressedKey+0x5a>

00002a86 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <KEYPAD_4x4_adjustKeyNumber+0x6>
    2a8c:	00 d0       	rcall	.+0      	; 0x2a8e <KEYPAD_4x4_adjustKeyNumber+0x8>
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2a94:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	3c 83       	std	Y+4, r19	; 0x04
    2a9e:	2b 83       	std	Y+3, r18	; 0x03
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	88 30       	cpi	r24, 0x08	; 8
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	09 f4       	brne	.+2      	; 0x2aac <KEYPAD_4x4_adjustKeyNumber+0x26>
    2aaa:	70 c0       	rjmp	.+224    	; 0x2b8c <KEYPAD_4x4_adjustKeyNumber+0x106>
    2aac:	2b 81       	ldd	r18, Y+3	; 0x03
    2aae:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab0:	29 30       	cpi	r18, 0x09	; 9
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	5c f5       	brge	.+86     	; 0x2b0c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aba:	84 30       	cpi	r24, 0x04	; 4
    2abc:	91 05       	cpc	r25, r1
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2ac0:	59 c0       	rjmp	.+178    	; 0x2b74 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2ac2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ac6:	25 30       	cpi	r18, 0x05	; 5
    2ac8:	31 05       	cpc	r19, r1
    2aca:	9c f4       	brge	.+38     	; 0x2af2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	82 30       	cpi	r24, 0x02	; 2
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2ad6:	48 c0       	rjmp	.+144    	; 0x2b68 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    2ada:	3c 81       	ldd	r19, Y+4	; 0x04
    2adc:	23 30       	cpi	r18, 0x03	; 3
    2ade:	31 05       	cpc	r19, r1
    2ae0:	0c f0       	brlt	.+2      	; 0x2ae4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2ae2:	45 c0       	rjmp	.+138    	; 0x2b6e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	91 05       	cpc	r25, r1
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2aee:	39 c0       	rjmp	.+114    	; 0x2b62 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2af0:	67 c0       	rjmp	.+206    	; 0x2bc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2af2:	2b 81       	ldd	r18, Y+3	; 0x03
    2af4:	3c 81       	ldd	r19, Y+4	; 0x04
    2af6:	26 30       	cpi	r18, 0x06	; 6
    2af8:	31 05       	cpc	r19, r1
    2afa:	09 f4       	brne	.+2      	; 0x2afe <KEYPAD_4x4_adjustKeyNumber+0x78>
    2afc:	41 c0       	rjmp	.+130    	; 0x2b80 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	9c 81       	ldd	r25, Y+4	; 0x04
    2b02:	87 30       	cpi	r24, 0x07	; 7
    2b04:	91 05       	cpc	r25, r1
    2b06:	0c f0       	brlt	.+2      	; 0x2b0a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2b08:	3e c0       	rjmp	.+124    	; 0x2b86 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2b0a:	37 c0       	rjmp	.+110    	; 0x2b7a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b10:	2c 30       	cpi	r18, 0x0C	; 12
    2b12:	31 05       	cpc	r19, r1
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2b16:	46 c0       	rjmp	.+140    	; 0x2ba4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1c:	8d 30       	cpi	r24, 0x0D	; 13
    2b1e:	91 05       	cpc	r25, r1
    2b20:	5c f4       	brge	.+22     	; 0x2b38 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2b22:	2b 81       	ldd	r18, Y+3	; 0x03
    2b24:	3c 81       	ldd	r19, Y+4	; 0x04
    2b26:	2a 30       	cpi	r18, 0x0A	; 10
    2b28:	31 05       	cpc	r19, r1
    2b2a:	b1 f1       	breq	.+108    	; 0x2b98 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	8b 30       	cpi	r24, 0x0B	; 11
    2b32:	91 05       	cpc	r25, r1
    2b34:	a4 f5       	brge	.+104    	; 0x2b9e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2b36:	2d c0       	rjmp	.+90     	; 0x2b92 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2b38:	2b 81       	ldd	r18, Y+3	; 0x03
    2b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2b3c:	2e 30       	cpi	r18, 0x0E	; 14
    2b3e:	31 05       	cpc	r19, r1
    2b40:	b9 f1       	breq	.+110    	; 0x2bb0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	8e 30       	cpi	r24, 0x0E	; 14
    2b48:	91 05       	cpc	r25, r1
    2b4a:	7c f1       	brlt	.+94     	; 0x2baa <KEYPAD_4x4_adjustKeyNumber+0x124>
    2b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b50:	2f 30       	cpi	r18, 0x0F	; 15
    2b52:	31 05       	cpc	r19, r1
    2b54:	79 f1       	breq	.+94     	; 0x2bb4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2b56:	8b 81       	ldd	r24, Y+3	; 0x03
    2b58:	9c 81       	ldd	r25, Y+4	; 0x04
    2b5a:	80 31       	cpi	r24, 0x10	; 16
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	69 f1       	breq	.+90     	; 0x2bba <KEYPAD_4x4_adjustKeyNumber+0x134>
    2b60:	2f c0       	rjmp	.+94     	; 0x2bc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2b62:	87 e0       	ldi	r24, 0x07	; 7
    2b64:	89 83       	std	Y+1, r24	; 0x01
    2b66:	2e c0       	rjmp	.+92     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2b68:	88 e0       	ldi	r24, 0x08	; 8
    2b6a:	89 83       	std	Y+1, r24	; 0x01
    2b6c:	2b c0       	rjmp	.+86     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2b6e:	89 e0       	ldi	r24, 0x09	; 9
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	28 c0       	rjmp	.+80     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2b74:	85 e2       	ldi	r24, 0x25	; 37
    2b76:	89 83       	std	Y+1, r24	; 0x01
    2b78:	25 c0       	rjmp	.+74     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2b7a:	84 e0       	ldi	r24, 0x04	; 4
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	22 c0       	rjmp	.+68     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2b80:	85 e0       	ldi	r24, 0x05	; 5
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	1f c0       	rjmp	.+62     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2b86:	86 e0       	ldi	r24, 0x06	; 6
    2b88:	89 83       	std	Y+1, r24	; 0x01
    2b8a:	1c c0       	rjmp	.+56     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2b8c:	8a e2       	ldi	r24, 0x2A	; 42
    2b8e:	89 83       	std	Y+1, r24	; 0x01
    2b90:	19 c0       	rjmp	.+50     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	16 c0       	rjmp	.+44     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2b98:	82 e0       	ldi	r24, 0x02	; 2
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    2b9c:	13 c0       	rjmp	.+38     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2b9e:	83 e0       	ldi	r24, 0x03	; 3
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	10 c0       	rjmp	.+32     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2ba4:	8d e2       	ldi	r24, 0x2D	; 45
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	0d c0       	rjmp	.+26     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2baa:	8d e0       	ldi	r24, 0x0D	; 13
    2bac:	89 83       	std	Y+1, r24	; 0x01
    2bae:	0a c0       	rjmp	.+20     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
    2bb2:	08 c0       	rjmp	.+16     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2bb4:	8d e3       	ldi	r24, 0x3D	; 61
    2bb6:	89 83       	std	Y+1, r24	; 0x01
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2bba:	8b e2       	ldi	r24, 0x2B	; 43
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2bc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	6c 97       	sbiw	r28, 0x1c	; 28
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	66 e0       	ldi	r22, 0x06	; 6
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	65 e0       	ldi	r22, 0x05	; 5
    2bf6:	41 e0       	ldi	r20, 0x01	; 1
    2bf8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <GPIO_setupPinDirection>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	a0 ea       	ldi	r26, 0xA0	; 160
    2c02:	b1 e4       	ldi	r27, 0x41	; 65
    2c04:	89 8f       	std	Y+25, r24	; 0x19
    2c06:	9a 8f       	std	Y+26, r25	; 0x1a
    2c08:	ab 8f       	std	Y+27, r26	; 0x1b
    2c0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a ef       	ldi	r20, 0xFA	; 250
    2c1a:	54 e4       	ldi	r21, 0x44	; 68
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8d 8b       	std	Y+21, r24	; 0x15
    2c26:	9e 8b       	std	Y+22, r25	; 0x16
    2c28:	af 8b       	std	Y+23, r26	; 0x17
    2c2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c30:	8f 89       	ldd	r24, Y+23	; 0x17
    2c32:	98 8d       	ldd	r25, Y+24	; 0x18
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e8       	ldi	r20, 0x80	; 128
    2c3a:	5f e3       	ldi	r21, 0x3F	; 63
    2c3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c40:	88 23       	and	r24, r24
    2c42:	2c f4       	brge	.+10     	; 0x2c4e <LCD_init+0x7a>
		__ticks = 1;
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	9c 8b       	std	Y+20, r25	; 0x14
    2c4a:	8b 8b       	std	Y+19, r24	; 0x13
    2c4c:	3f c0       	rjmp	.+126    	; 0x2ccc <LCD_init+0xf8>
	else if (__tmp > 65535)
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	3f ef       	ldi	r19, 0xFF	; 255
    2c5a:	4f e7       	ldi	r20, 0x7F	; 127
    2c5c:	57 e4       	ldi	r21, 0x47	; 71
    2c5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c62:	18 16       	cp	r1, r24
    2c64:	4c f5       	brge	.+82     	; 0x2cb8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c66:	69 8d       	ldd	r22, Y+25	; 0x19
    2c68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e2       	ldi	r20, 0x20	; 32
    2c74:	51 e4       	ldi	r21, 0x41	; 65
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	9c 8b       	std	Y+20, r25	; 0x14
    2c8c:	8b 8b       	std	Y+19, r24	; 0x13
    2c8e:	0f c0       	rjmp	.+30     	; 0x2cae <LCD_init+0xda>
    2c90:	88 ec       	ldi	r24, 0xC8	; 200
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	9a 8b       	std	Y+18, r25	; 0x12
    2c96:	89 8b       	std	Y+17, r24	; 0x11
    2c98:	89 89       	ldd	r24, Y+17	; 0x11
    2c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <LCD_init+0xc8>
    2ca0:	9a 8b       	std	Y+18, r25	; 0x12
    2ca2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
    2cac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	69 f7       	brne	.-38     	; 0x2c90 <LCD_init+0xbc>
    2cb6:	14 c0       	rjmp	.+40     	; 0x2ce0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cba:	7e 89       	ldd	r23, Y+22	; 0x16
    2cbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9c 8b       	std	Y+20, r25	; 0x14
    2cca:	8b 8b       	std	Y+19, r24	; 0x13
    2ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    2cce:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd0:	98 8b       	std	Y+16, r25	; 0x10
    2cd2:	8f 87       	std	Y+15, r24	; 0x0f
    2cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd6:	98 89       	ldd	r25, Y+16	; 0x10
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <LCD_init+0x104>
    2cdc:	98 8b       	std	Y+16, r25	; 0x10
    2cde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);

#if(LCD_BIT_MODE == 8)
	/* 2 - Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	6f ef       	ldi	r22, 0xFF	; 255
    2ce4:	0e 94 be 12 	call	0x257c	; 0x257c <GPIO_setupPortDirection>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	a0 ea       	ldi	r26, 0xA0	; 160
    2cee:	b1 e4       	ldi	r27, 0x41	; 65
    2cf0:	8b 87       	std	Y+11, r24	; 0x0b
    2cf2:	9c 87       	std	Y+12, r25	; 0x0c
    2cf4:	ad 87       	std	Y+13, r26	; 0x0d
    2cf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4a ef       	ldi	r20, 0xFA	; 250
    2d06:	54 e4       	ldi	r21, 0x44	; 68
    2d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	8f 83       	std	Y+7, r24	; 0x07
    2d12:	98 87       	std	Y+8, r25	; 0x08
    2d14:	a9 87       	std	Y+9, r26	; 0x09
    2d16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d18:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1a:	78 85       	ldd	r23, Y+8	; 0x08
    2d1c:	89 85       	ldd	r24, Y+9	; 0x09
    2d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e8       	ldi	r20, 0x80	; 128
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d2c:	88 23       	and	r24, r24
    2d2e:	2c f4       	brge	.+10     	; 0x2d3a <LCD_init+0x166>
		__ticks = 1;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	8d 83       	std	Y+5, r24	; 0x05
    2d38:	3f c0       	rjmp	.+126    	; 0x2db8 <LCD_init+0x1e4>
	else if (__tmp > 65535)
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	4f e7       	ldi	r20, 0x7F	; 127
    2d48:	57 e4       	ldi	r21, 0x47	; 71
    2d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d4e:	18 16       	cp	r1, r24
    2d50:	4c f5       	brge	.+82     	; 0x2da4 <LCD_init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e2       	ldi	r20, 0x20	; 32
    2d60:	51 e4       	ldi	r21, 0x41	; 65
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	0f c0       	rjmp	.+30     	; 0x2d9a <LCD_init+0x1c6>
    2d7c:	88 ec       	ldi	r24, 0xC8	; 200
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <LCD_init+0x1b4>
    2d8c:	9c 83       	std	Y+4, r25	; 0x04
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	69 f7       	brne	.-38     	; 0x2d7c <LCD_init+0x1a8>
    2da2:	14 c0       	rjmp	.+40     	; 0x2dcc <LCD_init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	6f 81       	ldd	r22, Y+7	; 0x07
    2da6:	78 85       	ldd	r23, Y+8	; 0x08
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <LCD_init+0x1f0>
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 4 - send command 2 lines 8 bits*/
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2dcc:	88 e3       	ldi	r24, 0x38	; 56
    2dce:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    2dd2:	8c e0       	ldi	r24, 0x0C	; 12
    2dd4:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_sendCommand>
}
    2dde:	6c 96       	adiw	r28, 0x1c	; 28
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	c1 56       	subi	r28, 0x61	; 97
    2dfe:	d0 40       	sbci	r29, 0x00	; 0
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	de bf       	out	0x3e, r29	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	cd bf       	out	0x3d, r28	; 61
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ef 59       	subi	r30, 0x9F	; 159
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	66 e0       	ldi	r22, 0x06	; 6
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 f6 12 	call	0x25ec	; 0x25ec <GPIO_writePin>
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e3 5a       	subi	r30, 0xA3	; 163
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	a0 e8       	ldi	r26, 0x80	; 128
    2e28:	bf e3       	ldi	r27, 0x3F	; 63
    2e2a:	80 83       	st	Z, r24
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	a2 83       	std	Z+2, r26	; 0x02
    2e30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e32:	8e 01       	movw	r16, r28
    2e34:	07 5a       	subi	r16, 0xA7	; 167
    2e36:	1f 4f       	sbci	r17, 0xFF	; 255
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e3 5a       	subi	r30, 0xA3	; 163
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	2b ea       	ldi	r18, 0xAB	; 171
    2e48:	3a ea       	ldi	r19, 0xAA	; 170
    2e4a:	4a e2       	ldi	r20, 0x2A	; 42
    2e4c:	50 e4       	ldi	r21, 0x40	; 64
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	f8 01       	movw	r30, r16
    2e58:	80 83       	st	Z, r24
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	a2 83       	std	Z+2, r26	; 0x02
    2e5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e60:	fe 01       	movw	r30, r28
    2e62:	e7 5a       	subi	r30, 0xA7	; 167
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	82 81       	ldd	r24, Z+2	; 0x02
    2e6c:	93 81       	ldd	r25, Z+3	; 0x03
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e7a:	88 23       	and	r24, r24
    2e7c:	34 f4       	brge	.+12     	; 0x2e8a <LCD_sendCommand+0x9a>
		__ticks = 1;
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e8 5a       	subi	r30, 0xA8	; 168
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	80 83       	st	Z, r24
    2e88:	e0 c0       	rjmp	.+448    	; 0x304a <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e7 5a       	subi	r30, 0xA7	; 167
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	60 81       	ld	r22, Z
    2e92:	71 81       	ldd	r23, Z+1	; 0x01
    2e94:	82 81       	ldd	r24, Z+2	; 0x02
    2e96:	93 81       	ldd	r25, Z+3	; 0x03
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	4f e7       	ldi	r20, 0x7F	; 127
    2e9e:	53 e4       	ldi	r21, 0x43	; 67
    2ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea4:	18 16       	cp	r1, r24
    2ea6:	0c f0       	brlt	.+2      	; 0x2eaa <LCD_sendCommand+0xba>
    2ea8:	c0 c0       	rjmp	.+384    	; 0x302a <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e3 5a       	subi	r30, 0xA3	; 163
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	4a e7       	ldi	r20, 0x7A	; 122
    2ebe:	54 e4       	ldi	r21, 0x44	; 68
    2ec0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	fe 01       	movw	r30, r28
    2eca:	ec 5a       	subi	r30, 0xAC	; 172
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 83       	st	Z, r24
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	a2 83       	std	Z+2, r26	; 0x02
    2ed4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed6:	8e 01       	movw	r16, r28
    2ed8:	00 5b       	subi	r16, 0xB0	; 176
    2eda:	1f 4f       	sbci	r17, 0xFF	; 255
    2edc:	fe 01       	movw	r30, r28
    2ede:	ec 5a       	subi	r30, 0xAC	; 172
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	4a ef       	ldi	r20, 0xFA	; 250
    2ef0:	54 e4       	ldi	r21, 0x44	; 68
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	f8 01       	movw	r30, r16
    2efc:	80 83       	st	Z, r24
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	a2 83       	std	Z+2, r26	; 0x02
    2f02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f04:	fe 01       	movw	r30, r28
    2f06:	e0 5b       	subi	r30, 0xB0	; 176
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	60 81       	ld	r22, Z
    2f0c:	71 81       	ldd	r23, Z+1	; 0x01
    2f0e:	82 81       	ldd	r24, Z+2	; 0x02
    2f10:	93 81       	ldd	r25, Z+3	; 0x03
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	44 f4       	brge	.+16     	; 0x2f32 <LCD_sendCommand+0x142>
		__ticks = 1;
    2f22:	fe 01       	movw	r30, r28
    2f24:	e2 5b       	subi	r30, 0xB2	; 178
    2f26:	ff 4f       	sbci	r31, 0xFF	; 255
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	91 83       	std	Z+1, r25	; 0x01
    2f2e:	80 83       	st	Z, r24
    2f30:	64 c0       	rjmp	.+200    	; 0x2ffa <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    2f32:	fe 01       	movw	r30, r28
    2f34:	e0 5b       	subi	r30, 0xB0	; 176
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	3f ef       	ldi	r19, 0xFF	; 255
    2f44:	4f e7       	ldi	r20, 0x7F	; 127
    2f46:	57 e4       	ldi	r21, 0x47	; 71
    2f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f4c:	18 16       	cp	r1, r24
    2f4e:	0c f0       	brlt	.+2      	; 0x2f52 <LCD_sendCommand+0x162>
    2f50:	43 c0       	rjmp	.+134    	; 0x2fd8 <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f52:	fe 01       	movw	r30, r28
    2f54:	ec 5a       	subi	r30, 0xAC	; 172
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e2       	ldi	r20, 0x20	; 32
    2f66:	51 e4       	ldi	r21, 0x41	; 65
    2f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	8e 01       	movw	r16, r28
    2f72:	02 5b       	subi	r16, 0xB2	; 178
    2f74:	1f 4f       	sbci	r17, 0xFF	; 255
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	f8 01       	movw	r30, r16
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	80 83       	st	Z, r24
    2f88:	1f c0       	rjmp	.+62     	; 0x2fc8 <LCD_sendCommand+0x1d8>
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	e4 5b       	subi	r30, 0xB4	; 180
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	88 ec       	ldi	r24, 0xC8	; 200
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	91 83       	std	Z+1, r25	; 0x01
    2f96:	80 83       	st	Z, r24
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e4 5b       	subi	r30, 0xB4	; 180
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	80 81       	ld	r24, Z
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	01 97       	sbiw	r24, 0x01	; 1
    2fa4:	f1 f7       	brne	.-4      	; 0x2fa2 <LCD_sendCommand+0x1b2>
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e4 5b       	subi	r30, 0xB4	; 180
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	91 83       	std	Z+1, r25	; 0x01
    2fae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb0:	de 01       	movw	r26, r28
    2fb2:	a2 5b       	subi	r26, 0xB2	; 178
    2fb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e2 5b       	subi	r30, 0xB2	; 178
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	11 96       	adiw	r26, 0x01	; 1
    2fc4:	9c 93       	st	X, r25
    2fc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e2 5b       	subi	r30, 0xB2	; 178
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	80 81       	ld	r24, Z
    2fd0:	91 81       	ldd	r25, Z+1	; 0x01
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	d1 f6       	brne	.-76     	; 0x2f8a <LCD_sendCommand+0x19a>
    2fd6:	4b c0       	rjmp	.+150    	; 0x306e <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd8:	8e 01       	movw	r16, r28
    2fda:	02 5b       	subi	r16, 0xB2	; 178
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e0 5b       	subi	r30, 0xB0	; 176
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	91 83       	std	Z+1, r25	; 0x01
    2ff8:	80 83       	st	Z, r24
    2ffa:	de 01       	movw	r26, r28
    2ffc:	a6 5b       	subi	r26, 0xB6	; 182
    2ffe:	bf 4f       	sbci	r27, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	e2 5b       	subi	r30, 0xB2	; 178
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	80 81       	ld	r24, Z
    3008:	91 81       	ldd	r25, Z+1	; 0x01
    300a:	11 96       	adiw	r26, 0x01	; 1
    300c:	9c 93       	st	X, r25
    300e:	8e 93       	st	-X, r24
    3010:	fe 01       	movw	r30, r28
    3012:	e6 5b       	subi	r30, 0xB6	; 182
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	80 81       	ld	r24, Z
    3018:	91 81       	ldd	r25, Z+1	; 0x01
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <LCD_sendCommand+0x22a>
    301e:	fe 01       	movw	r30, r28
    3020:	e6 5b       	subi	r30, 0xB6	; 182
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	91 83       	std	Z+1, r25	; 0x01
    3026:	80 83       	st	Z, r24
    3028:	22 c0       	rjmp	.+68     	; 0x306e <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    302a:	8e 01       	movw	r16, r28
    302c:	08 5a       	subi	r16, 0xA8	; 168
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	fe 01       	movw	r30, r28
    3032:	e7 5a       	subi	r30, 0xA7	; 167
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	f8 01       	movw	r30, r16
    3048:	80 83       	st	Z, r24
    304a:	de 01       	movw	r26, r28
    304c:	a7 5b       	subi	r26, 0xB7	; 183
    304e:	bf 4f       	sbci	r27, 0xFF	; 255
    3050:	fe 01       	movw	r30, r28
    3052:	e8 5a       	subi	r30, 0xA8	; 168
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	80 81       	ld	r24, Z
    3058:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    305a:	fe 01       	movw	r30, r28
    305c:	e7 5b       	subi	r30, 0xB7	; 183
    305e:	ff 4f       	sbci	r31, 0xFF	; 255
    3060:	80 81       	ld	r24, Z
    3062:	8a 95       	dec	r24
    3064:	f1 f7       	brne	.-4      	; 0x3062 <LCD_sendCommand+0x272>
    3066:	fe 01       	movw	r30, r28
    3068:	e7 5b       	subi	r30, 0xB7	; 183
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	65 e0       	ldi	r22, 0x05	; 5
    3072:	41 e0       	ldi	r20, 0x01	; 1
    3074:	0e 94 f6 12 	call	0x25ec	; 0x25ec <GPIO_writePin>
    3078:	fe 01       	movw	r30, r28
    307a:	eb 5b       	subi	r30, 0xBB	; 187
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	a0 e8       	ldi	r26, 0x80	; 128
    3084:	bf e3       	ldi	r27, 0x3F	; 63
    3086:	80 83       	st	Z, r24
    3088:	91 83       	std	Z+1, r25	; 0x01
    308a:	a2 83       	std	Z+2, r26	; 0x02
    308c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    308e:	8e 01       	movw	r16, r28
    3090:	0f 5b       	subi	r16, 0xBF	; 191
    3092:	1f 4f       	sbci	r17, 0xFF	; 255
    3094:	fe 01       	movw	r30, r28
    3096:	eb 5b       	subi	r30, 0xBB	; 187
    3098:	ff 4f       	sbci	r31, 0xFF	; 255
    309a:	60 81       	ld	r22, Z
    309c:	71 81       	ldd	r23, Z+1	; 0x01
    309e:	82 81       	ldd	r24, Z+2	; 0x02
    30a0:	93 81       	ldd	r25, Z+3	; 0x03
    30a2:	2b ea       	ldi	r18, 0xAB	; 171
    30a4:	3a ea       	ldi	r19, 0xAA	; 170
    30a6:	4a e2       	ldi	r20, 0x2A	; 42
    30a8:	50 e4       	ldi	r21, 0x40	; 64
    30aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	f8 01       	movw	r30, r16
    30b4:	80 83       	st	Z, r24
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	a2 83       	std	Z+2, r26	; 0x02
    30ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30bc:	fe 01       	movw	r30, r28
    30be:	ef 5b       	subi	r30, 0xBF	; 191
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	60 81       	ld	r22, Z
    30c4:	71 81       	ldd	r23, Z+1	; 0x01
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e8       	ldi	r20, 0x80	; 128
    30d0:	5f e3       	ldi	r21, 0x3F	; 63
    30d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d6:	88 23       	and	r24, r24
    30d8:	34 f4       	brge	.+12     	; 0x30e6 <LCD_sendCommand+0x2f6>
		__ticks = 1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	fe 01       	movw	r30, r28
    30de:	e0 5c       	subi	r30, 0xC0	; 192
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 83       	st	Z, r24
    30e4:	9d c0       	rjmp	.+314    	; 0x3220 <LCD_sendCommand+0x430>
	else if (__tmp > 255)
    30e6:	fe 01       	movw	r30, r28
    30e8:	ef 5b       	subi	r30, 0xBF	; 191
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	4f e7       	ldi	r20, 0x7F	; 127
    30fa:	53 e4       	ldi	r21, 0x43	; 67
    30fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3100:	18 16       	cp	r1, r24
    3102:	0c f0       	brlt	.+2      	; 0x3106 <LCD_sendCommand+0x316>
    3104:	7e c0       	rjmp	.+252    	; 0x3202 <LCD_sendCommand+0x412>
	{
		_delay_ms(__us / 1000.0);
    3106:	fe 01       	movw	r30, r28
    3108:	eb 5b       	subi	r30, 0xBB	; 187
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	60 81       	ld	r22, Z
    310e:	71 81       	ldd	r23, Z+1	; 0x01
    3110:	82 81       	ldd	r24, Z+2	; 0x02
    3112:	93 81       	ldd	r25, Z+3	; 0x03
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	4a e7       	ldi	r20, 0x7A	; 122
    311a:	54 e4       	ldi	r21, 0x44	; 68
    311c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	8c af       	std	Y+60, r24	; 0x3c
    3126:	9d af       	std	Y+61, r25	; 0x3d
    3128:	ae af       	std	Y+62, r26	; 0x3e
    312a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312c:	6c ad       	ldd	r22, Y+60	; 0x3c
    312e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3130:	8e ad       	ldd	r24, Y+62	; 0x3e
    3132:	9f ad       	ldd	r25, Y+63	; 0x3f
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	4a ef       	ldi	r20, 0xFA	; 250
    313a:	54 e4       	ldi	r21, 0x44	; 68
    313c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	88 af       	std	Y+56, r24	; 0x38
    3146:	99 af       	std	Y+57, r25	; 0x39
    3148:	aa af       	std	Y+58, r26	; 0x3a
    314a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    314c:	68 ad       	ldd	r22, Y+56	; 0x38
    314e:	79 ad       	ldd	r23, Y+57	; 0x39
    3150:	8a ad       	ldd	r24, Y+58	; 0x3a
    3152:	9b ad       	ldd	r25, Y+59	; 0x3b
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	2c f4       	brge	.+10     	; 0x316e <LCD_sendCommand+0x37e>
		__ticks = 1;
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9f ab       	std	Y+55, r25	; 0x37
    316a:	8e ab       	std	Y+54, r24	; 0x36
    316c:	3f c0       	rjmp	.+126    	; 0x31ec <LCD_sendCommand+0x3fc>
	else if (__tmp > 65535)
    316e:	68 ad       	ldd	r22, Y+56	; 0x38
    3170:	79 ad       	ldd	r23, Y+57	; 0x39
    3172:	8a ad       	ldd	r24, Y+58	; 0x3a
    3174:	9b ad       	ldd	r25, Y+59	; 0x3b
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	3f ef       	ldi	r19, 0xFF	; 255
    317a:	4f e7       	ldi	r20, 0x7F	; 127
    317c:	57 e4       	ldi	r21, 0x47	; 71
    317e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3182:	18 16       	cp	r1, r24
    3184:	4c f5       	brge	.+82     	; 0x31d8 <LCD_sendCommand+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3186:	6c ad       	ldd	r22, Y+60	; 0x3c
    3188:	7d ad       	ldd	r23, Y+61	; 0x3d
    318a:	8e ad       	ldd	r24, Y+62	; 0x3e
    318c:	9f ad       	ldd	r25, Y+63	; 0x3f
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	40 e2       	ldi	r20, 0x20	; 32
    3194:	51 e4       	ldi	r21, 0x41	; 65
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	9f ab       	std	Y+55, r25	; 0x37
    31ac:	8e ab       	std	Y+54, r24	; 0x36
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <LCD_sendCommand+0x3de>
    31b0:	88 ec       	ldi	r24, 0xC8	; 200
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9d ab       	std	Y+53, r25	; 0x35
    31b6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31b8:	8c a9       	ldd	r24, Y+52	; 0x34
    31ba:	9d a9       	ldd	r25, Y+53	; 0x35
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <LCD_sendCommand+0x3cc>
    31c0:	9d ab       	std	Y+53, r25	; 0x35
    31c2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c4:	8e a9       	ldd	r24, Y+54	; 0x36
    31c6:	9f a9       	ldd	r25, Y+55	; 0x37
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	9f ab       	std	Y+55, r25	; 0x37
    31cc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ce:	8e a9       	ldd	r24, Y+54	; 0x36
    31d0:	9f a9       	ldd	r25, Y+55	; 0x37
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	69 f7       	brne	.-38     	; 0x31b0 <LCD_sendCommand+0x3c0>
    31d6:	2d c0       	rjmp	.+90     	; 0x3232 <LCD_sendCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d8:	68 ad       	ldd	r22, Y+56	; 0x38
    31da:	79 ad       	ldd	r23, Y+57	; 0x39
    31dc:	8a ad       	ldd	r24, Y+58	; 0x3a
    31de:	9b ad       	ldd	r25, Y+59	; 0x3b
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	9f ab       	std	Y+55, r25	; 0x37
    31ea:	8e ab       	std	Y+54, r24	; 0x36
    31ec:	8e a9       	ldd	r24, Y+54	; 0x36
    31ee:	9f a9       	ldd	r25, Y+55	; 0x37
    31f0:	9b ab       	std	Y+51, r25	; 0x33
    31f2:	8a ab       	std	Y+50, r24	; 0x32
    31f4:	8a a9       	ldd	r24, Y+50	; 0x32
    31f6:	9b a9       	ldd	r25, Y+51	; 0x33
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <LCD_sendCommand+0x408>
    31fc:	9b ab       	std	Y+51, r25	; 0x33
    31fe:	8a ab       	std	Y+50, r24	; 0x32
    3200:	18 c0       	rjmp	.+48     	; 0x3232 <LCD_sendCommand+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3202:	fe 01       	movw	r30, r28
    3204:	ef 5b       	subi	r30, 0xBF	; 191
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	60 81       	ld	r22, Z
    320a:	71 81       	ldd	r23, Z+1	; 0x01
    320c:	82 81       	ldd	r24, Z+2	; 0x02
    320e:	93 81       	ldd	r25, Z+3	; 0x03
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	fe 01       	movw	r30, r28
    321a:	e0 5c       	subi	r30, 0xC0	; 192
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 83       	st	Z, r24
    3220:	fe 01       	movw	r30, r28
    3222:	e0 5c       	subi	r30, 0xC0	; 192
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	80 81       	ld	r24, Z
    3228:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    322a:	89 a9       	ldd	r24, Y+49	; 0x31
    322c:	8a 95       	dec	r24
    322e:	f1 f7       	brne	.-4      	; 0x322c <LCD_sendCommand+0x43c>
    3230:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);

	#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    3232:	fe 01       	movw	r30, r28
    3234:	ef 59       	subi	r30, 0x9F	; 159
    3236:	ff 4f       	sbci	r31, 0xFF	; 255
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	60 81       	ld	r22, Z
    323c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <GPIO_writePort>
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	a0 e8       	ldi	r26, 0x80	; 128
    3246:	bf e3       	ldi	r27, 0x3F	; 63
    3248:	8d a7       	std	Y+45, r24	; 0x2d
    324a:	9e a7       	std	Y+46, r25	; 0x2e
    324c:	af a7       	std	Y+47, r26	; 0x2f
    324e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3250:	6d a5       	ldd	r22, Y+45	; 0x2d
    3252:	7e a5       	ldd	r23, Y+46	; 0x2e
    3254:	8f a5       	ldd	r24, Y+47	; 0x2f
    3256:	98 a9       	ldd	r25, Y+48	; 0x30
    3258:	2b ea       	ldi	r18, 0xAB	; 171
    325a:	3a ea       	ldi	r19, 0xAA	; 170
    325c:	4a e2       	ldi	r20, 0x2A	; 42
    325e:	50 e4       	ldi	r21, 0x40	; 64
    3260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	89 a7       	std	Y+41, r24	; 0x29
    326a:	9a a7       	std	Y+42, r25	; 0x2a
    326c:	ab a7       	std	Y+43, r26	; 0x2b
    326e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3270:	69 a5       	ldd	r22, Y+41	; 0x29
    3272:	7a a5       	ldd	r23, Y+42	; 0x2a
    3274:	8b a5       	ldd	r24, Y+43	; 0x2b
    3276:	9c a5       	ldd	r25, Y+44	; 0x2c
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e8       	ldi	r20, 0x80	; 128
    327e:	5f e3       	ldi	r21, 0x3F	; 63
    3280:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3284:	88 23       	and	r24, r24
    3286:	1c f4       	brge	.+6      	; 0x328e <LCD_sendCommand+0x49e>
		__ticks = 1;
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	88 a7       	std	Y+40, r24	; 0x28
    328c:	91 c0       	rjmp	.+290    	; 0x33b0 <LCD_sendCommand+0x5c0>
	else if (__tmp > 255)
    328e:	69 a5       	ldd	r22, Y+41	; 0x29
    3290:	7a a5       	ldd	r23, Y+42	; 0x2a
    3292:	8b a5       	ldd	r24, Y+43	; 0x2b
    3294:	9c a5       	ldd	r25, Y+44	; 0x2c
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	4f e7       	ldi	r20, 0x7F	; 127
    329c:	53 e4       	ldi	r21, 0x43	; 67
    329e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a2:	18 16       	cp	r1, r24
    32a4:	0c f0       	brlt	.+2      	; 0x32a8 <LCD_sendCommand+0x4b8>
    32a6:	7b c0       	rjmp	.+246    	; 0x339e <LCD_sendCommand+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    32a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    32aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    32ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ae:	98 a9       	ldd	r25, Y+48	; 0x30
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4a e7       	ldi	r20, 0x7A	; 122
    32b6:	54 e4       	ldi	r21, 0x44	; 68
    32b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8c a3       	std	Y+36, r24	; 0x24
    32c2:	9d a3       	std	Y+37, r25	; 0x25
    32c4:	ae a3       	std	Y+38, r26	; 0x26
    32c6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c8:	6c a1       	ldd	r22, Y+36	; 0x24
    32ca:	7d a1       	ldd	r23, Y+37	; 0x25
    32cc:	8e a1       	ldd	r24, Y+38	; 0x26
    32ce:	9f a1       	ldd	r25, Y+39	; 0x27
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a ef       	ldi	r20, 0xFA	; 250
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	88 a3       	std	Y+32, r24	; 0x20
    32e2:	99 a3       	std	Y+33, r25	; 0x21
    32e4:	aa a3       	std	Y+34, r26	; 0x22
    32e6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    32e8:	68 a1       	ldd	r22, Y+32	; 0x20
    32ea:	79 a1       	ldd	r23, Y+33	; 0x21
    32ec:	8a a1       	ldd	r24, Y+34	; 0x22
    32ee:	9b a1       	ldd	r25, Y+35	; 0x23
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	2c f4       	brge	.+10     	; 0x330a <LCD_sendCommand+0x51a>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9f 8f       	std	Y+31, r25	; 0x1f
    3306:	8e 8f       	std	Y+30, r24	; 0x1e
    3308:	3f c0       	rjmp	.+126    	; 0x3388 <LCD_sendCommand+0x598>
	else if (__tmp > 65535)
    330a:	68 a1       	ldd	r22, Y+32	; 0x20
    330c:	79 a1       	ldd	r23, Y+33	; 0x21
    330e:	8a a1       	ldd	r24, Y+34	; 0x22
    3310:	9b a1       	ldd	r25, Y+35	; 0x23
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	4c f5       	brge	.+82     	; 0x3374 <LCD_sendCommand+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3322:	6c a1       	ldd	r22, Y+36	; 0x24
    3324:	7d a1       	ldd	r23, Y+37	; 0x25
    3326:	8e a1       	ldd	r24, Y+38	; 0x26
    3328:	9f a1       	ldd	r25, Y+39	; 0x27
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e2       	ldi	r20, 0x20	; 32
    3330:	51 e4       	ldi	r21, 0x41	; 65
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9f 8f       	std	Y+31, r25	; 0x1f
    3348:	8e 8f       	std	Y+30, r24	; 0x1e
    334a:	0f c0       	rjmp	.+30     	; 0x336a <LCD_sendCommand+0x57a>
    334c:	88 ec       	ldi	r24, 0xC8	; 200
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9d 8f       	std	Y+29, r25	; 0x1d
    3352:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3354:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3356:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <LCD_sendCommand+0x568>
    335c:	9d 8f       	std	Y+29, r25	; 0x1d
    335e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3360:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3362:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	9f 8f       	std	Y+31, r25	; 0x1f
    3368:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    336c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	69 f7       	brne	.-38     	; 0x334c <LCD_sendCommand+0x55c>
    3372:	24 c0       	rjmp	.+72     	; 0x33bc <LCD_sendCommand+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3374:	68 a1       	ldd	r22, Y+32	; 0x20
    3376:	79 a1       	ldd	r23, Y+33	; 0x21
    3378:	8a a1       	ldd	r24, Y+34	; 0x22
    337a:	9b a1       	ldd	r25, Y+35	; 0x23
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9f 8f       	std	Y+31, r25	; 0x1f
    3386:	8e 8f       	std	Y+30, r24	; 0x1e
    3388:	8e 8d       	ldd	r24, Y+30	; 0x1e
    338a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    338c:	9b 8f       	std	Y+27, r25	; 0x1b
    338e:	8a 8f       	std	Y+26, r24	; 0x1a
    3390:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3392:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <LCD_sendCommand+0x5a4>
    3398:	9b 8f       	std	Y+27, r25	; 0x1b
    339a:	8a 8f       	std	Y+26, r24	; 0x1a
    339c:	0f c0       	rjmp	.+30     	; 0x33bc <LCD_sendCommand+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    339e:	69 a5       	ldd	r22, Y+41	; 0x29
    33a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    33a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	88 a7       	std	Y+40, r24	; 0x28
    33b0:	88 a5       	ldd	r24, Y+40	; 0x28
    33b2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33b4:	89 8d       	ldd	r24, Y+25	; 0x19
    33b6:	8a 95       	dec	r24
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <LCD_sendCommand+0x5c6>
    33ba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	65 e0       	ldi	r22, 0x05	; 5
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <GPIO_writePin>
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	a0 e8       	ldi	r26, 0x80	; 128
    33cc:	bf e3       	ldi	r27, 0x3F	; 63
    33ce:	8d 8b       	std	Y+21, r24	; 0x15
    33d0:	9e 8b       	std	Y+22, r25	; 0x16
    33d2:	af 8b       	std	Y+23, r26	; 0x17
    33d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33d6:	6d 89       	ldd	r22, Y+21	; 0x15
    33d8:	7e 89       	ldd	r23, Y+22	; 0x16
    33da:	8f 89       	ldd	r24, Y+23	; 0x17
    33dc:	98 8d       	ldd	r25, Y+24	; 0x18
    33de:	2b ea       	ldi	r18, 0xAB	; 171
    33e0:	3a ea       	ldi	r19, 0xAA	; 170
    33e2:	4a e2       	ldi	r20, 0x2A	; 42
    33e4:	50 e4       	ldi	r21, 0x40	; 64
    33e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ea:	dc 01       	movw	r26, r24
    33ec:	cb 01       	movw	r24, r22
    33ee:	89 8b       	std	Y+17, r24	; 0x11
    33f0:	9a 8b       	std	Y+18, r25	; 0x12
    33f2:	ab 8b       	std	Y+19, r26	; 0x13
    33f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    33f6:	69 89       	ldd	r22, Y+17	; 0x11
    33f8:	7a 89       	ldd	r23, Y+18	; 0x12
    33fa:	8b 89       	ldd	r24, Y+19	; 0x13
    33fc:	9c 89       	ldd	r25, Y+20	; 0x14
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e8       	ldi	r20, 0x80	; 128
    3404:	5f e3       	ldi	r21, 0x3F	; 63
    3406:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    340a:	88 23       	and	r24, r24
    340c:	1c f4       	brge	.+6      	; 0x3414 <LCD_sendCommand+0x624>
		__ticks = 1;
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	88 8b       	std	Y+16, r24	; 0x10
    3412:	91 c0       	rjmp	.+290    	; 0x3536 <LCD_sendCommand+0x746>
	else if (__tmp > 255)
    3414:	69 89       	ldd	r22, Y+17	; 0x11
    3416:	7a 89       	ldd	r23, Y+18	; 0x12
    3418:	8b 89       	ldd	r24, Y+19	; 0x13
    341a:	9c 89       	ldd	r25, Y+20	; 0x14
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4f e7       	ldi	r20, 0x7F	; 127
    3422:	53 e4       	ldi	r21, 0x43	; 67
    3424:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3428:	18 16       	cp	r1, r24
    342a:	0c f0       	brlt	.+2      	; 0x342e <LCD_sendCommand+0x63e>
    342c:	7b c0       	rjmp	.+246    	; 0x3524 <LCD_sendCommand+0x734>
	{
		_delay_ms(__us / 1000.0);
    342e:	6d 89       	ldd	r22, Y+21	; 0x15
    3430:	7e 89       	ldd	r23, Y+22	; 0x16
    3432:	8f 89       	ldd	r24, Y+23	; 0x17
    3434:	98 8d       	ldd	r25, Y+24	; 0x18
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	4a e7       	ldi	r20, 0x7A	; 122
    343c:	54 e4       	ldi	r21, 0x44	; 68
    343e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	8c 87       	std	Y+12, r24	; 0x0c
    3448:	9d 87       	std	Y+13, r25	; 0x0d
    344a:	ae 87       	std	Y+14, r26	; 0x0e
    344c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3450:	7d 85       	ldd	r23, Y+13	; 0x0d
    3452:	8e 85       	ldd	r24, Y+14	; 0x0e
    3454:	9f 85       	ldd	r25, Y+15	; 0x0f
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	4a ef       	ldi	r20, 0xFA	; 250
    345c:	54 e4       	ldi	r21, 0x44	; 68
    345e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	88 87       	std	Y+8, r24	; 0x08
    3468:	99 87       	std	Y+9, r25	; 0x09
    346a:	aa 87       	std	Y+10, r26	; 0x0a
    346c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    346e:	68 85       	ldd	r22, Y+8	; 0x08
    3470:	79 85       	ldd	r23, Y+9	; 0x09
    3472:	8a 85       	ldd	r24, Y+10	; 0x0a
    3474:	9b 85       	ldd	r25, Y+11	; 0x0b
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e8       	ldi	r20, 0x80	; 128
    347c:	5f e3       	ldi	r21, 0x3F	; 63
    347e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3482:	88 23       	and	r24, r24
    3484:	2c f4       	brge	.+10     	; 0x3490 <LCD_sendCommand+0x6a0>
		__ticks = 1;
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	9f 83       	std	Y+7, r25	; 0x07
    348c:	8e 83       	std	Y+6, r24	; 0x06
    348e:	3f c0       	rjmp	.+126    	; 0x350e <LCD_sendCommand+0x71e>
	else if (__tmp > 65535)
    3490:	68 85       	ldd	r22, Y+8	; 0x08
    3492:	79 85       	ldd	r23, Y+9	; 0x09
    3494:	8a 85       	ldd	r24, Y+10	; 0x0a
    3496:	9b 85       	ldd	r25, Y+11	; 0x0b
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	3f ef       	ldi	r19, 0xFF	; 255
    349c:	4f e7       	ldi	r20, 0x7F	; 127
    349e:	57 e4       	ldi	r21, 0x47	; 71
    34a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34a4:	18 16       	cp	r1, r24
    34a6:	4c f5       	brge	.+82     	; 0x34fa <LCD_sendCommand+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    34aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    34ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    34ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	40 e2       	ldi	r20, 0x20	; 32
    34b6:	51 e4       	ldi	r21, 0x41	; 65
    34b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	bc 01       	movw	r22, r24
    34c2:	cd 01       	movw	r24, r26
    34c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	9f 83       	std	Y+7, r25	; 0x07
    34ce:	8e 83       	std	Y+6, r24	; 0x06
    34d0:	0f c0       	rjmp	.+30     	; 0x34f0 <LCD_sendCommand+0x700>
    34d2:	88 ec       	ldi	r24, 0xC8	; 200
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	9d 83       	std	Y+5, r25	; 0x05
    34d8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34da:	8c 81       	ldd	r24, Y+4	; 0x04
    34dc:	9d 81       	ldd	r25, Y+5	; 0x05
    34de:	01 97       	sbiw	r24, 0x01	; 1
    34e0:	f1 f7       	brne	.-4      	; 0x34de <LCD_sendCommand+0x6ee>
    34e2:	9d 83       	std	Y+5, r25	; 0x05
    34e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e6:	8e 81       	ldd	r24, Y+6	; 0x06
    34e8:	9f 81       	ldd	r25, Y+7	; 0x07
    34ea:	01 97       	sbiw	r24, 0x01	; 1
    34ec:	9f 83       	std	Y+7, r25	; 0x07
    34ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f0:	8e 81       	ldd	r24, Y+6	; 0x06
    34f2:	9f 81       	ldd	r25, Y+7	; 0x07
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	69 f7       	brne	.-38     	; 0x34d2 <LCD_sendCommand+0x6e2>
    34f8:	24 c0       	rjmp	.+72     	; 0x3542 <LCD_sendCommand+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fa:	68 85       	ldd	r22, Y+8	; 0x08
    34fc:	79 85       	ldd	r23, Y+9	; 0x09
    34fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3500:	9b 85       	ldd	r25, Y+11	; 0x0b
    3502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3506:	dc 01       	movw	r26, r24
    3508:	cb 01       	movw	r24, r22
    350a:	9f 83       	std	Y+7, r25	; 0x07
    350c:	8e 83       	std	Y+6, r24	; 0x06
    350e:	8e 81       	ldd	r24, Y+6	; 0x06
    3510:	9f 81       	ldd	r25, Y+7	; 0x07
    3512:	9b 83       	std	Y+3, r25	; 0x03
    3514:	8a 83       	std	Y+2, r24	; 0x02
    3516:	8a 81       	ldd	r24, Y+2	; 0x02
    3518:	9b 81       	ldd	r25, Y+3	; 0x03
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	f1 f7       	brne	.-4      	; 0x351a <LCD_sendCommand+0x72a>
    351e:	9b 83       	std	Y+3, r25	; 0x03
    3520:	8a 83       	std	Y+2, r24	; 0x02
    3522:	0f c0       	rjmp	.+30     	; 0x3542 <LCD_sendCommand+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3524:	69 89       	ldd	r22, Y+17	; 0x11
    3526:	7a 89       	ldd	r23, Y+18	; 0x12
    3528:	8b 89       	ldd	r24, Y+19	; 0x13
    352a:	9c 89       	ldd	r25, Y+20	; 0x14
    352c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	88 8b       	std	Y+16, r24	; 0x10
    3536:	88 89       	ldd	r24, Y+16	; 0x10
    3538:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	8a 95       	dec	r24
    353e:	f1 f7       	brne	.-4      	; 0x353c <LCD_sendCommand+0x74c>
    3540:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    3542:	cf 59       	subi	r28, 0x9F	; 159
    3544:	df 4f       	sbci	r29, 0xFF	; 255
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	cf 91       	pop	r28
    3552:	df 91       	pop	r29
    3554:	1f 91       	pop	r17
    3556:	0f 91       	pop	r16
    3558:	08 95       	ret

0000355a <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    355a:	0f 93       	push	r16
    355c:	1f 93       	push	r17
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	cd 54       	subi	r28, 0x4D	; 77
    3568:	d0 40       	sbci	r29, 0x00	; 0
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	fe 01       	movw	r30, r28
    3576:	e3 5b       	subi	r30, 0xB3	; 179
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	66 e0       	ldi	r22, 0x06	; 6
    3580:	41 e0       	ldi	r20, 0x01	; 1
    3582:	0e 94 f6 12 	call	0x25ec	; 0x25ec <GPIO_writePin>
    3586:	fe 01       	movw	r30, r28
    3588:	e7 5b       	subi	r30, 0xB7	; 183
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	a0 e8       	ldi	r26, 0x80	; 128
    3592:	bf e3       	ldi	r27, 0x3F	; 63
    3594:	80 83       	st	Z, r24
    3596:	91 83       	std	Z+1, r25	; 0x01
    3598:	a2 83       	std	Z+2, r26	; 0x02
    359a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    359c:	8e 01       	movw	r16, r28
    359e:	0b 5b       	subi	r16, 0xBB	; 187
    35a0:	1f 4f       	sbci	r17, 0xFF	; 255
    35a2:	fe 01       	movw	r30, r28
    35a4:	e7 5b       	subi	r30, 0xB7	; 183
    35a6:	ff 4f       	sbci	r31, 0xFF	; 255
    35a8:	60 81       	ld	r22, Z
    35aa:	71 81       	ldd	r23, Z+1	; 0x01
    35ac:	82 81       	ldd	r24, Z+2	; 0x02
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	4a ef       	ldi	r20, 0xFA	; 250
    35b6:	54 e4       	ldi	r21, 0x44	; 68
    35b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	f8 01       	movw	r30, r16
    35c2:	80 83       	st	Z, r24
    35c4:	91 83       	std	Z+1, r25	; 0x01
    35c6:	a2 83       	std	Z+2, r26	; 0x02
    35c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ca:	fe 01       	movw	r30, r28
    35cc:	eb 5b       	subi	r30, 0xBB	; 187
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	60 81       	ld	r22, Z
    35d2:	71 81       	ldd	r23, Z+1	; 0x01
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e8       	ldi	r20, 0x80	; 128
    35de:	5f e3       	ldi	r21, 0x3F	; 63
    35e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35e4:	88 23       	and	r24, r24
    35e6:	44 f4       	brge	.+16     	; 0x35f8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    35e8:	fe 01       	movw	r30, r28
    35ea:	ed 5b       	subi	r30, 0xBD	; 189
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	81 e0       	ldi	r24, 0x01	; 1
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	91 83       	std	Z+1, r25	; 0x01
    35f4:	80 83       	st	Z, r24
    35f6:	64 c0       	rjmp	.+200    	; 0x36c0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    35f8:	fe 01       	movw	r30, r28
    35fa:	eb 5b       	subi	r30, 0xBB	; 187
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	60 81       	ld	r22, Z
    3600:	71 81       	ldd	r23, Z+1	; 0x01
    3602:	82 81       	ldd	r24, Z+2	; 0x02
    3604:	93 81       	ldd	r25, Z+3	; 0x03
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	4f e7       	ldi	r20, 0x7F	; 127
    360c:	57 e4       	ldi	r21, 0x47	; 71
    360e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3612:	18 16       	cp	r1, r24
    3614:	0c f0       	brlt	.+2      	; 0x3618 <LCD_displayCharacter+0xbe>
    3616:	43 c0       	rjmp	.+134    	; 0x369e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3618:	fe 01       	movw	r30, r28
    361a:	e7 5b       	subi	r30, 0xB7	; 183
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e2       	ldi	r20, 0x20	; 32
    362c:	51 e4       	ldi	r21, 0x41	; 65
    362e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	8e 01       	movw	r16, r28
    3638:	0d 5b       	subi	r16, 0xBD	; 189
    363a:	1f 4f       	sbci	r17, 0xFF	; 255
    363c:	bc 01       	movw	r22, r24
    363e:	cd 01       	movw	r24, r26
    3640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	f8 01       	movw	r30, r16
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	80 83       	st	Z, r24
    364e:	1f c0       	rjmp	.+62     	; 0x368e <LCD_displayCharacter+0x134>
    3650:	fe 01       	movw	r30, r28
    3652:	ef 5b       	subi	r30, 0xBF	; 191
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	88 ec       	ldi	r24, 0xC8	; 200
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	91 83       	std	Z+1, r25	; 0x01
    365c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    365e:	fe 01       	movw	r30, r28
    3660:	ef 5b       	subi	r30, 0xBF	; 191
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	80 81       	ld	r24, Z
    3666:	91 81       	ldd	r25, Z+1	; 0x01
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <LCD_displayCharacter+0x10e>
    366c:	fe 01       	movw	r30, r28
    366e:	ef 5b       	subi	r30, 0xBF	; 191
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3676:	de 01       	movw	r26, r28
    3678:	ad 5b       	subi	r26, 0xBD	; 189
    367a:	bf 4f       	sbci	r27, 0xFF	; 255
    367c:	fe 01       	movw	r30, r28
    367e:	ed 5b       	subi	r30, 0xBD	; 189
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 81       	ld	r24, Z
    3684:	91 81       	ldd	r25, Z+1	; 0x01
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	11 96       	adiw	r26, 0x01	; 1
    368a:	9c 93       	st	X, r25
    368c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    368e:	fe 01       	movw	r30, r28
    3690:	ed 5b       	subi	r30, 0xBD	; 189
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	d1 f6       	brne	.-76     	; 0x3650 <LCD_displayCharacter+0xf6>
    369c:	24 c0       	rjmp	.+72     	; 0x36e6 <LCD_displayCharacter+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369e:	8e 01       	movw	r16, r28
    36a0:	0d 5b       	subi	r16, 0xBD	; 189
    36a2:	1f 4f       	sbci	r17, 0xFF	; 255
    36a4:	fe 01       	movw	r30, r28
    36a6:	eb 5b       	subi	r30, 0xBB	; 187
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	60 81       	ld	r22, Z
    36ac:	71 81       	ldd	r23, Z+1	; 0x01
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	93 81       	ldd	r25, Z+3	; 0x03
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	f8 01       	movw	r30, r16
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	80 83       	st	Z, r24
    36c0:	fe 01       	movw	r30, r28
    36c2:	ed 5b       	subi	r30, 0xBD	; 189
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	80 81       	ld	r24, Z
    36c8:	91 81       	ldd	r25, Z+1	; 0x01
    36ca:	fe 01       	movw	r30, r28
    36cc:	ff 96       	adiw	r30, 0x3f	; 63
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
    36d2:	fe 01       	movw	r30, r28
    36d4:	ff 96       	adiw	r30, 0x3f	; 63
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <LCD_displayCharacter+0x180>
    36de:	fe 01       	movw	r30, r28
    36e0:	ff 96       	adiw	r30, 0x3f	; 63
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	65 e0       	ldi	r22, 0x05	; 5
    36ea:	41 e0       	ldi	r20, 0x01	; 1
    36ec:	0e 94 f6 12 	call	0x25ec	; 0x25ec <GPIO_writePin>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	a0 e8       	ldi	r26, 0x80	; 128
    36f6:	bf e3       	ldi	r27, 0x3F	; 63
    36f8:	8b af       	std	Y+59, r24	; 0x3b
    36fa:	9c af       	std	Y+60, r25	; 0x3c
    36fc:	ad af       	std	Y+61, r26	; 0x3d
    36fe:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3700:	6b ad       	ldd	r22, Y+59	; 0x3b
    3702:	7c ad       	ldd	r23, Y+60	; 0x3c
    3704:	8d ad       	ldd	r24, Y+61	; 0x3d
    3706:	9e ad       	ldd	r25, Y+62	; 0x3e
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	4a ef       	ldi	r20, 0xFA	; 250
    370e:	54 e4       	ldi	r21, 0x44	; 68
    3710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	8f ab       	std	Y+55, r24	; 0x37
    371a:	98 af       	std	Y+56, r25	; 0x38
    371c:	a9 af       	std	Y+57, r26	; 0x39
    371e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3720:	6f a9       	ldd	r22, Y+55	; 0x37
    3722:	78 ad       	ldd	r23, Y+56	; 0x38
    3724:	89 ad       	ldd	r24, Y+57	; 0x39
    3726:	9a ad       	ldd	r25, Y+58	; 0x3a
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e8       	ldi	r20, 0x80	; 128
    372e:	5f e3       	ldi	r21, 0x3F	; 63
    3730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3734:	88 23       	and	r24, r24
    3736:	2c f4       	brge	.+10     	; 0x3742 <LCD_displayCharacter+0x1e8>
		__ticks = 1;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	9e ab       	std	Y+54, r25	; 0x36
    373e:	8d ab       	std	Y+53, r24	; 0x35
    3740:	3f c0       	rjmp	.+126    	; 0x37c0 <LCD_displayCharacter+0x266>
	else if (__tmp > 65535)
    3742:	6f a9       	ldd	r22, Y+55	; 0x37
    3744:	78 ad       	ldd	r23, Y+56	; 0x38
    3746:	89 ad       	ldd	r24, Y+57	; 0x39
    3748:	9a ad       	ldd	r25, Y+58	; 0x3a
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	3f ef       	ldi	r19, 0xFF	; 255
    374e:	4f e7       	ldi	r20, 0x7F	; 127
    3750:	57 e4       	ldi	r21, 0x47	; 71
    3752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3756:	18 16       	cp	r1, r24
    3758:	4c f5       	brge	.+82     	; 0x37ac <LCD_displayCharacter+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    375a:	6b ad       	ldd	r22, Y+59	; 0x3b
    375c:	7c ad       	ldd	r23, Y+60	; 0x3c
    375e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3760:	9e ad       	ldd	r25, Y+62	; 0x3e
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e2       	ldi	r20, 0x20	; 32
    3768:	51 e4       	ldi	r21, 0x41	; 65
    376a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	9e ab       	std	Y+54, r25	; 0x36
    3780:	8d ab       	std	Y+53, r24	; 0x35
    3782:	0f c0       	rjmp	.+30     	; 0x37a2 <LCD_displayCharacter+0x248>
    3784:	88 ec       	ldi	r24, 0xC8	; 200
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9c ab       	std	Y+52, r25	; 0x34
    378a:	8b ab       	std	Y+51, r24	; 0x33
    378c:	8b a9       	ldd	r24, Y+51	; 0x33
    378e:	9c a9       	ldd	r25, Y+52	; 0x34
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <LCD_displayCharacter+0x236>
    3794:	9c ab       	std	Y+52, r25	; 0x34
    3796:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3798:	8d a9       	ldd	r24, Y+53	; 0x35
    379a:	9e a9       	ldd	r25, Y+54	; 0x36
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	9e ab       	std	Y+54, r25	; 0x36
    37a0:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a2:	8d a9       	ldd	r24, Y+53	; 0x35
    37a4:	9e a9       	ldd	r25, Y+54	; 0x36
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	69 f7       	brne	.-38     	; 0x3784 <LCD_displayCharacter+0x22a>
    37aa:	14 c0       	rjmp	.+40     	; 0x37d4 <LCD_displayCharacter+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ac:	6f a9       	ldd	r22, Y+55	; 0x37
    37ae:	78 ad       	ldd	r23, Y+56	; 0x38
    37b0:	89 ad       	ldd	r24, Y+57	; 0x39
    37b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    37b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9e ab       	std	Y+54, r25	; 0x36
    37be:	8d ab       	std	Y+53, r24	; 0x35
    37c0:	8d a9       	ldd	r24, Y+53	; 0x35
    37c2:	9e a9       	ldd	r25, Y+54	; 0x36
    37c4:	9a ab       	std	Y+50, r25	; 0x32
    37c6:	89 ab       	std	Y+49, r24	; 0x31
    37c8:	89 a9       	ldd	r24, Y+49	; 0x31
    37ca:	9a a9       	ldd	r25, Y+50	; 0x32
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <LCD_displayCharacter+0x272>
    37d0:	9a ab       	std	Y+50, r25	; 0x32
    37d2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);

#if(LCD_BIT_MODE == 8)

	/* 5 - send our command */
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    37d4:	fe 01       	movw	r30, r28
    37d6:	e3 5b       	subi	r30, 0xB3	; 179
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	60 81       	ld	r22, Z
    37de:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <GPIO_writePort>
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	90 e0       	ldi	r25, 0x00	; 0
    37e6:	a0 e8       	ldi	r26, 0x80	; 128
    37e8:	bf e3       	ldi	r27, 0x3F	; 63
    37ea:	8d a7       	std	Y+45, r24	; 0x2d
    37ec:	9e a7       	std	Y+46, r25	; 0x2e
    37ee:	af a7       	std	Y+47, r26	; 0x2f
    37f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    37f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    37f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37f8:	98 a9       	ldd	r25, Y+48	; 0x30
    37fa:	2b ea       	ldi	r18, 0xAB	; 171
    37fc:	3a ea       	ldi	r19, 0xAA	; 170
    37fe:	4a e2       	ldi	r20, 0x2A	; 42
    3800:	50 e4       	ldi	r21, 0x40	; 64
    3802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	89 a7       	std	Y+41, r24	; 0x29
    380c:	9a a7       	std	Y+42, r25	; 0x2a
    380e:	ab a7       	std	Y+43, r26	; 0x2b
    3810:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3812:	69 a5       	ldd	r22, Y+41	; 0x29
    3814:	7a a5       	ldd	r23, Y+42	; 0x2a
    3816:	8b a5       	ldd	r24, Y+43	; 0x2b
    3818:	9c a5       	ldd	r25, Y+44	; 0x2c
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e8       	ldi	r20, 0x80	; 128
    3820:	5f e3       	ldi	r21, 0x3F	; 63
    3822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3826:	88 23       	and	r24, r24
    3828:	1c f4       	brge	.+6      	; 0x3830 <LCD_displayCharacter+0x2d6>
		__ticks = 1;
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	88 a7       	std	Y+40, r24	; 0x28
    382e:	91 c0       	rjmp	.+290    	; 0x3952 <LCD_displayCharacter+0x3f8>
	else if (__tmp > 255)
    3830:	69 a5       	ldd	r22, Y+41	; 0x29
    3832:	7a a5       	ldd	r23, Y+42	; 0x2a
    3834:	8b a5       	ldd	r24, Y+43	; 0x2b
    3836:	9c a5       	ldd	r25, Y+44	; 0x2c
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	4f e7       	ldi	r20, 0x7F	; 127
    383e:	53 e4       	ldi	r21, 0x43	; 67
    3840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3844:	18 16       	cp	r1, r24
    3846:	0c f0       	brlt	.+2      	; 0x384a <LCD_displayCharacter+0x2f0>
    3848:	7b c0       	rjmp	.+246    	; 0x3940 <LCD_displayCharacter+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    384a:	6d a5       	ldd	r22, Y+45	; 0x2d
    384c:	7e a5       	ldd	r23, Y+46	; 0x2e
    384e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3850:	98 a9       	ldd	r25, Y+48	; 0x30
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	4a e7       	ldi	r20, 0x7A	; 122
    3858:	54 e4       	ldi	r21, 0x44	; 68
    385a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	8c a3       	std	Y+36, r24	; 0x24
    3864:	9d a3       	std	Y+37, r25	; 0x25
    3866:	ae a3       	std	Y+38, r26	; 0x26
    3868:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386a:	6c a1       	ldd	r22, Y+36	; 0x24
    386c:	7d a1       	ldd	r23, Y+37	; 0x25
    386e:	8e a1       	ldd	r24, Y+38	; 0x26
    3870:	9f a1       	ldd	r25, Y+39	; 0x27
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4a ef       	ldi	r20, 0xFA	; 250
    3878:	54 e4       	ldi	r21, 0x44	; 68
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	88 a3       	std	Y+32, r24	; 0x20
    3884:	99 a3       	std	Y+33, r25	; 0x21
    3886:	aa a3       	std	Y+34, r26	; 0x22
    3888:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    388a:	68 a1       	ldd	r22, Y+32	; 0x20
    388c:	79 a1       	ldd	r23, Y+33	; 0x21
    388e:	8a a1       	ldd	r24, Y+34	; 0x22
    3890:	9b a1       	ldd	r25, Y+35	; 0x23
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e8       	ldi	r20, 0x80	; 128
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    389e:	88 23       	and	r24, r24
    38a0:	2c f4       	brge	.+10     	; 0x38ac <LCD_displayCharacter+0x352>
		__ticks = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9f 8f       	std	Y+31, r25	; 0x1f
    38a8:	8e 8f       	std	Y+30, r24	; 0x1e
    38aa:	3f c0       	rjmp	.+126    	; 0x392a <LCD_displayCharacter+0x3d0>
	else if (__tmp > 65535)
    38ac:	68 a1       	ldd	r22, Y+32	; 0x20
    38ae:	79 a1       	ldd	r23, Y+33	; 0x21
    38b0:	8a a1       	ldd	r24, Y+34	; 0x22
    38b2:	9b a1       	ldd	r25, Y+35	; 0x23
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	4c f5       	brge	.+82     	; 0x3916 <LCD_displayCharacter+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c4:	6c a1       	ldd	r22, Y+36	; 0x24
    38c6:	7d a1       	ldd	r23, Y+37	; 0x25
    38c8:	8e a1       	ldd	r24, Y+38	; 0x26
    38ca:	9f a1       	ldd	r25, Y+39	; 0x27
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9f 8f       	std	Y+31, r25	; 0x1f
    38ea:	8e 8f       	std	Y+30, r24	; 0x1e
    38ec:	0f c0       	rjmp	.+30     	; 0x390c <LCD_displayCharacter+0x3b2>
    38ee:	88 ec       	ldi	r24, 0xC8	; 200
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9d 8f       	std	Y+29, r25	; 0x1d
    38f4:	8c 8f       	std	Y+28, r24	; 0x1c
    38f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <LCD_displayCharacter+0x3a0>
    38fe:	9d 8f       	std	Y+29, r25	; 0x1d
    3900:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3902:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3904:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9f 8f       	std	Y+31, r25	; 0x1f
    390a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    390e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	69 f7       	brne	.-38     	; 0x38ee <LCD_displayCharacter+0x394>
    3914:	24 c0       	rjmp	.+72     	; 0x395e <LCD_displayCharacter+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3916:	68 a1       	ldd	r22, Y+32	; 0x20
    3918:	79 a1       	ldd	r23, Y+33	; 0x21
    391a:	8a a1       	ldd	r24, Y+34	; 0x22
    391c:	9b a1       	ldd	r25, Y+35	; 0x23
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9f 8f       	std	Y+31, r25	; 0x1f
    3928:	8e 8f       	std	Y+30, r24	; 0x1e
    392a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    392c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    392e:	9b 8f       	std	Y+27, r25	; 0x1b
    3930:	8a 8f       	std	Y+26, r24	; 0x1a
    3932:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3934:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <LCD_displayCharacter+0x3dc>
    393a:	9b 8f       	std	Y+27, r25	; 0x1b
    393c:	8a 8f       	std	Y+26, r24	; 0x1a
    393e:	0f c0       	rjmp	.+30     	; 0x395e <LCD_displayCharacter+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3940:	69 a5       	ldd	r22, Y+41	; 0x29
    3942:	7a a5       	ldd	r23, Y+42	; 0x2a
    3944:	8b a5       	ldd	r24, Y+43	; 0x2b
    3946:	9c a5       	ldd	r25, Y+44	; 0x2c
    3948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	88 a7       	std	Y+40, r24	; 0x28
    3952:	88 a5       	ldd	r24, Y+40	; 0x28
    3954:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3956:	89 8d       	ldd	r24, Y+25	; 0x19
    3958:	8a 95       	dec	r24
    395a:	f1 f7       	brne	.-4      	; 0x3958 <LCD_displayCharacter+0x3fe>
    395c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	65 e0       	ldi	r22, 0x05	; 5
    3962:	40 e0       	ldi	r20, 0x00	; 0
    3964:	0e 94 f6 12 	call	0x25ec	; 0x25ec <GPIO_writePin>
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	a0 e8       	ldi	r26, 0x80	; 128
    396e:	bf e3       	ldi	r27, 0x3F	; 63
    3970:	8d 8b       	std	Y+21, r24	; 0x15
    3972:	9e 8b       	std	Y+22, r25	; 0x16
    3974:	af 8b       	std	Y+23, r26	; 0x17
    3976:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3978:	6d 89       	ldd	r22, Y+21	; 0x15
    397a:	7e 89       	ldd	r23, Y+22	; 0x16
    397c:	8f 89       	ldd	r24, Y+23	; 0x17
    397e:	98 8d       	ldd	r25, Y+24	; 0x18
    3980:	2b ea       	ldi	r18, 0xAB	; 171
    3982:	3a ea       	ldi	r19, 0xAA	; 170
    3984:	4a e2       	ldi	r20, 0x2A	; 42
    3986:	50 e4       	ldi	r21, 0x40	; 64
    3988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398c:	dc 01       	movw	r26, r24
    398e:	cb 01       	movw	r24, r22
    3990:	89 8b       	std	Y+17, r24	; 0x11
    3992:	9a 8b       	std	Y+18, r25	; 0x12
    3994:	ab 8b       	std	Y+19, r26	; 0x13
    3996:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3998:	69 89       	ldd	r22, Y+17	; 0x11
    399a:	7a 89       	ldd	r23, Y+18	; 0x12
    399c:	8b 89       	ldd	r24, Y+19	; 0x13
    399e:	9c 89       	ldd	r25, Y+20	; 0x14
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	40 e8       	ldi	r20, 0x80	; 128
    39a6:	5f e3       	ldi	r21, 0x3F	; 63
    39a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ac:	88 23       	and	r24, r24
    39ae:	1c f4       	brge	.+6      	; 0x39b6 <LCD_displayCharacter+0x45c>
		__ticks = 1;
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	88 8b       	std	Y+16, r24	; 0x10
    39b4:	91 c0       	rjmp	.+290    	; 0x3ad8 <LCD_displayCharacter+0x57e>
	else if (__tmp > 255)
    39b6:	69 89       	ldd	r22, Y+17	; 0x11
    39b8:	7a 89       	ldd	r23, Y+18	; 0x12
    39ba:	8b 89       	ldd	r24, Y+19	; 0x13
    39bc:	9c 89       	ldd	r25, Y+20	; 0x14
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	4f e7       	ldi	r20, 0x7F	; 127
    39c4:	53 e4       	ldi	r21, 0x43	; 67
    39c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ca:	18 16       	cp	r1, r24
    39cc:	0c f0       	brlt	.+2      	; 0x39d0 <LCD_displayCharacter+0x476>
    39ce:	7b c0       	rjmp	.+246    	; 0x3ac6 <LCD_displayCharacter+0x56c>
	{
		_delay_ms(__us / 1000.0);
    39d0:	6d 89       	ldd	r22, Y+21	; 0x15
    39d2:	7e 89       	ldd	r23, Y+22	; 0x16
    39d4:	8f 89       	ldd	r24, Y+23	; 0x17
    39d6:	98 8d       	ldd	r25, Y+24	; 0x18
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	4a e7       	ldi	r20, 0x7A	; 122
    39de:	54 e4       	ldi	r21, 0x44	; 68
    39e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8c 87       	std	Y+12, r24	; 0x0c
    39ea:	9d 87       	std	Y+13, r25	; 0x0d
    39ec:	ae 87       	std	Y+14, r26	; 0x0e
    39ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    39f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    39f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    39f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	4a ef       	ldi	r20, 0xFA	; 250
    39fe:	54 e4       	ldi	r21, 0x44	; 68
    3a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	88 87       	std	Y+8, r24	; 0x08
    3a0a:	99 87       	std	Y+9, r25	; 0x09
    3a0c:	aa 87       	std	Y+10, r26	; 0x0a
    3a0e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a10:	68 85       	ldd	r22, Y+8	; 0x08
    3a12:	79 85       	ldd	r23, Y+9	; 0x09
    3a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a16:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e8       	ldi	r20, 0x80	; 128
    3a1e:	5f e3       	ldi	r21, 0x3F	; 63
    3a20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a24:	88 23       	and	r24, r24
    3a26:	2c f4       	brge	.+10     	; 0x3a32 <LCD_displayCharacter+0x4d8>
		__ticks = 1;
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	9f 83       	std	Y+7, r25	; 0x07
    3a2e:	8e 83       	std	Y+6, r24	; 0x06
    3a30:	3f c0       	rjmp	.+126    	; 0x3ab0 <LCD_displayCharacter+0x556>
	else if (__tmp > 65535)
    3a32:	68 85       	ldd	r22, Y+8	; 0x08
    3a34:	79 85       	ldd	r23, Y+9	; 0x09
    3a36:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a38:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	3f ef       	ldi	r19, 0xFF	; 255
    3a3e:	4f e7       	ldi	r20, 0x7F	; 127
    3a40:	57 e4       	ldi	r21, 0x47	; 71
    3a42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a46:	18 16       	cp	r1, r24
    3a48:	4c f5       	brge	.+82     	; 0x3a9c <LCD_displayCharacter+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a50:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e2       	ldi	r20, 0x20	; 32
    3a58:	51 e4       	ldi	r21, 0x41	; 65
    3a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9f 83       	std	Y+7, r25	; 0x07
    3a70:	8e 83       	std	Y+6, r24	; 0x06
    3a72:	0f c0       	rjmp	.+30     	; 0x3a92 <LCD_displayCharacter+0x538>
    3a74:	88 ec       	ldi	r24, 0xC8	; 200
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9d 83       	std	Y+5, r25	; 0x05
    3a7a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <LCD_displayCharacter+0x526>
    3a84:	9d 83       	std	Y+5, r25	; 0x05
    3a86:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a88:	8e 81       	ldd	r24, Y+6	; 0x06
    3a8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	9f 83       	std	Y+7, r25	; 0x07
    3a90:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a92:	8e 81       	ldd	r24, Y+6	; 0x06
    3a94:	9f 81       	ldd	r25, Y+7	; 0x07
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	69 f7       	brne	.-38     	; 0x3a74 <LCD_displayCharacter+0x51a>
    3a9a:	24 c0       	rjmp	.+72     	; 0x3ae4 <LCD_displayCharacter+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9c:	68 85       	ldd	r22, Y+8	; 0x08
    3a9e:	79 85       	ldd	r23, Y+9	; 0x09
    3aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aa2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	9f 83       	std	Y+7, r25	; 0x07
    3aae:	8e 83       	std	Y+6, r24	; 0x06
    3ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab4:	9b 83       	std	Y+3, r25	; 0x03
    3ab6:	8a 83       	std	Y+2, r24	; 0x02
    3ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aba:	9b 81       	ldd	r25, Y+3	; 0x03
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	f1 f7       	brne	.-4      	; 0x3abc <LCD_displayCharacter+0x562>
    3ac0:	9b 83       	std	Y+3, r25	; 0x03
    3ac2:	8a 83       	std	Y+2, r24	; 0x02
    3ac4:	0f c0       	rjmp	.+30     	; 0x3ae4 <LCD_displayCharacter+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ac6:	69 89       	ldd	r22, Y+17	; 0x11
    3ac8:	7a 89       	ldd	r23, Y+18	; 0x12
    3aca:	8b 89       	ldd	r24, Y+19	; 0x13
    3acc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	88 8b       	std	Y+16, r24	; 0x10
    3ad8:	88 89       	ldd	r24, Y+16	; 0x10
    3ada:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	8a 95       	dec	r24
    3ae0:	f1 f7       	brne	.-4      	; 0x3ade <LCD_displayCharacter+0x584>
    3ae2:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    3ae4:	c3 5b       	subi	r28, 0xB3	; 179
    3ae6:	df 4f       	sbci	r29, 0xFF	; 255
    3ae8:	0f b6       	in	r0, 0x3f	; 63
    3aea:	f8 94       	cli
    3aec:	de bf       	out	0x3e, r29	; 62
    3aee:	0f be       	out	0x3f, r0	; 63
    3af0:	cd bf       	out	0x3d, r28	; 61
    3af2:	cf 91       	pop	r28
    3af4:	df 91       	pop	r29
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	00 d0       	rcall	.+0      	; 0x3b02 <LCD_displayString+0x6>
    3b02:	0f 92       	push	r0
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	9b 83       	std	Y+3, r25	; 0x03
    3b0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3b0c:	19 82       	std	Y+1, r1	; 0x01
    3b0e:	0e c0       	rjmp	.+28     	; 0x3b2c <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	28 2f       	mov	r18, r24
    3b14:	30 e0       	ldi	r19, 0x00	; 0
    3b16:	8a 81       	ldd	r24, Y+2	; 0x02
    3b18:	9b 81       	ldd	r25, Y+3	; 0x03
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	e2 0f       	add	r30, r18
    3b1e:	f3 1f       	adc	r31, r19
    3b20:	80 81       	ld	r24, Z
    3b22:	0e 94 ad 1a 	call	0x355a	; 0x355a <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	8f 5f       	subi	r24, 0xFF	; 255
    3b2a:	89 83       	std	Y+1, r24	; 0x01
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	28 2f       	mov	r18, r24
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	8a 81       	ldd	r24, Y+2	; 0x02
    3b34:	9b 81       	ldd	r25, Y+3	; 0x03
    3b36:	fc 01       	movw	r30, r24
    3b38:	e2 0f       	add	r30, r18
    3b3a:	f3 1f       	adc	r31, r19
    3b3c:	80 81       	ld	r24, Z
    3b3e:	88 23       	and	r24, r24
    3b40:	39 f7       	brne	.-50     	; 0x3b10 <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	cf 91       	pop	r28
    3b4a:	df 91       	pop	r29
    3b4c:	08 95       	ret

00003b4e <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    3b4e:	df 93       	push	r29
    3b50:	cf 93       	push	r28
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	62 97       	sbiw	r28, 0x12	; 18
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	9a 8b       	std	Y+18, r25	; 0x12
    3b64:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    3b66:	89 89       	ldd	r24, Y+17	; 0x11
    3b68:	9a 89       	ldd	r25, Y+18	; 0x12
    3b6a:	9e 01       	movw	r18, r28
    3b6c:	2f 5f       	subi	r18, 0xFF	; 255
    3b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b70:	b9 01       	movw	r22, r18
    3b72:	4a e0       	ldi	r20, 0x0A	; 10
    3b74:	50 e0       	ldi	r21, 0x00	; 0
    3b76:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <itoa>

   LCD_displayString(arr);
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	01 96       	adiw	r24, 0x01	; 1
    3b7e:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
}
    3b82:	62 96       	adiw	r28, 0x12	; 18
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	08 95       	ret

00003b94 <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    3b94:	df 93       	push	r29
    3b96:	cf 93       	push	r28
    3b98:	00 d0       	rcall	.+0      	; 0x3b9a <LCD_moveCursor+0x6>
    3b9a:	00 d0       	rcall	.+0      	; 0x3b9c <LCD_moveCursor+0x8>
    3b9c:	0f 92       	push	r0
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	8a 83       	std	Y+2, r24	; 0x02
    3ba4:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    3ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba8:	28 2f       	mov	r18, r24
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	3d 83       	std	Y+5, r19	; 0x05
    3bae:	2c 83       	std	Y+4, r18	; 0x04
    3bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb4:	81 30       	cpi	r24, 0x01	; 1
    3bb6:	91 05       	cpc	r25, r1
    3bb8:	c1 f0       	breq	.+48     	; 0x3bea <LCD_moveCursor+0x56>
    3bba:	2c 81       	ldd	r18, Y+4	; 0x04
    3bbc:	3d 81       	ldd	r19, Y+5	; 0x05
    3bbe:	22 30       	cpi	r18, 0x02	; 2
    3bc0:	31 05       	cpc	r19, r1
    3bc2:	2c f4       	brge	.+10     	; 0x3bce <LCD_moveCursor+0x3a>
    3bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	61 f0       	breq	.+24     	; 0x3be4 <LCD_moveCursor+0x50>
    3bcc:	19 c0       	rjmp	.+50     	; 0x3c00 <LCD_moveCursor+0x6c>
    3bce:	2c 81       	ldd	r18, Y+4	; 0x04
    3bd0:	3d 81       	ldd	r19, Y+5	; 0x05
    3bd2:	22 30       	cpi	r18, 0x02	; 2
    3bd4:	31 05       	cpc	r19, r1
    3bd6:	69 f0       	breq	.+26     	; 0x3bf2 <LCD_moveCursor+0x5e>
    3bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bda:	9d 81       	ldd	r25, Y+5	; 0x05
    3bdc:	83 30       	cpi	r24, 0x03	; 3
    3bde:	91 05       	cpc	r25, r1
    3be0:	61 f0       	breq	.+24     	; 0x3bfa <LCD_moveCursor+0x66>
    3be2:	0e c0       	rjmp	.+28     	; 0x3c00 <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    3be4:	8b 81       	ldd	r24, Y+3	; 0x03
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	0b c0       	rjmp	.+22     	; 0x3c00 <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	80 5c       	subi	r24, 0xC0	; 192
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	07 c0       	rjmp	.+14     	; 0x3c00 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    3bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf4:	80 5f       	subi	r24, 0xF0	; 240
    3bf6:	89 83       	std	Y+1, r24	; 0x01
    3bf8:	03 c0       	rjmp	.+6      	; 0x3c00 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	80 5c       	subi	r24, 0xC0	; 192
    3bfe:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	80 68       	ori	r24, 0x80	; 128
    3c04:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_sendCommand>
}
    3c08:	0f 90       	pop	r0
    3c0a:	0f 90       	pop	r0
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	0f 90       	pop	r0
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	08 95       	ret

00003c18 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3c18:	df 93       	push	r29
    3c1a:	cf 93       	push	r28
    3c1c:	00 d0       	rcall	.+0      	; 0x3c1e <LCD_displayStringRowColumn+0x6>
    3c1e:	00 d0       	rcall	.+0      	; 0x3c20 <LCD_displayStringRowColumn+0x8>
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	89 83       	std	Y+1, r24	; 0x01
    3c26:	6a 83       	std	Y+2, r22	; 0x02
    3c28:	5c 83       	std	Y+4, r21	; 0x04
    3c2a:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	6a 81       	ldd	r22, Y+2	; 0x02
    3c30:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    3c34:	8b 81       	ldd	r24, Y+3	; 0x03
    3c36:	9c 81       	ldd	r25, Y+4	; 0x04
    3c38:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
}
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	cf 91       	pop	r28
    3c46:	df 91       	pop	r29
    3c48:	08 95       	ret

00003c4a <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    3c4a:	df 93       	push	r29
    3c4c:	cf 93       	push	r28
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <LCD_sendCommand>
}
    3c58:	cf 91       	pop	r28
    3c5a:	df 91       	pop	r29
    3c5c:	08 95       	ret

00003c5e <main>:
#include<avr/io.h>
#include<avr/interrupt.h>


int main(void)
{
    3c5e:	df 93       	push	r29
    3c60:	cf 93       	push	r28
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	af 97       	sbiw	r28, 0x2f	; 47
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);
    3c72:	af e5       	ldi	r26, 0x5F	; 95
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	ef e5       	ldi	r30, 0x5F	; 95
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	80 68       	ori	r24, 0x80	; 128
    3c7e:	8c 93       	st	X, r24
	UART_ConfigType conf_UART;
	conf_UART.baud_rate=RATE_9600;
    3c80:	87 e6       	ldi	r24, 0x67	; 103
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	9f a7       	std	Y+47, r25	; 0x2f
    3c86:	8e a7       	std	Y+46, r24	; 0x2e
	conf_UART.bit_data=BitData_8;
    3c88:	83 e0       	ldi	r24, 0x03	; 3
    3c8a:	8b a7       	std	Y+43, r24	; 0x2b
	conf_UART.parity=NONE;
    3c8c:	1c a6       	std	Y+44, r1	; 0x2c
	conf_UART.stop_bit=BIT_1;
    3c8e:	1d a6       	std	Y+45, r1	; 0x2d
	UART_init(&conf_UART);
    3c90:	ce 01       	movw	r24, r28
    3c92:	8b 96       	adiw	r24, 0x2b	; 43
    3c94:	0e 94 9e 20 	call	0x413c	; 0x413c <UART_init>
	LCD_init();
    3c98:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_init>
	LCD_displayString("        DOOR LOCKER SYSTEM ");
    3c9c:	84 e6       	ldi	r24, 0x64	; 100
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
	LCD_moveCursor(1,0);
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	60 e0       	ldi	r22, 0x00	; 0
    3ca8:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <LCD_moveCursor>
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	a8 e4       	ldi	r26, 0x48	; 72
    3cb2:	b3 e4       	ldi	r27, 0x43	; 67
    3cb4:	8f a3       	std	Y+39, r24	; 0x27
    3cb6:	98 a7       	std	Y+40, r25	; 0x28
    3cb8:	a9 a7       	std	Y+41, r26	; 0x29
    3cba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cbc:	6f a1       	ldd	r22, Y+39	; 0x27
    3cbe:	78 a5       	ldd	r23, Y+40	; 0x28
    3cc0:	89 a5       	ldd	r24, Y+41	; 0x29
    3cc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	4a ef       	ldi	r20, 0xFA	; 250
    3cca:	54 e4       	ldi	r21, 0x44	; 68
    3ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	8b a3       	std	Y+35, r24	; 0x23
    3cd6:	9c a3       	std	Y+36, r25	; 0x24
    3cd8:	ad a3       	std	Y+37, r26	; 0x25
    3cda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3cdc:	6b a1       	ldd	r22, Y+35	; 0x23
    3cde:	7c a1       	ldd	r23, Y+36	; 0x24
    3ce0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ce2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ce4:	20 e0       	ldi	r18, 0x00	; 0
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	40 e8       	ldi	r20, 0x80	; 128
    3cea:	5f e3       	ldi	r21, 0x3F	; 63
    3cec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf0:	88 23       	and	r24, r24
    3cf2:	2c f4       	brge	.+10     	; 0x3cfe <main+0xa0>
		__ticks = 1;
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	9a a3       	std	Y+34, r25	; 0x22
    3cfa:	89 a3       	std	Y+33, r24	; 0x21
    3cfc:	3f c0       	rjmp	.+126    	; 0x3d7c <main+0x11e>
	else if (__tmp > 65535)
    3cfe:	6b a1       	ldd	r22, Y+35	; 0x23
    3d00:	7c a1       	ldd	r23, Y+36	; 0x24
    3d02:	8d a1       	ldd	r24, Y+37	; 0x25
    3d04:	9e a1       	ldd	r25, Y+38	; 0x26
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	3f ef       	ldi	r19, 0xFF	; 255
    3d0a:	4f e7       	ldi	r20, 0x7F	; 127
    3d0c:	57 e4       	ldi	r21, 0x47	; 71
    3d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d12:	18 16       	cp	r1, r24
    3d14:	4c f5       	brge	.+82     	; 0x3d68 <main+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d16:	6f a1       	ldd	r22, Y+39	; 0x27
    3d18:	78 a5       	ldd	r23, Y+40	; 0x28
    3d1a:	89 a5       	ldd	r24, Y+41	; 0x29
    3d1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e2       	ldi	r20, 0x20	; 32
    3d24:	51 e4       	ldi	r21, 0x41	; 65
    3d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d2a:	dc 01       	movw	r26, r24
    3d2c:	cb 01       	movw	r24, r22
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	9a a3       	std	Y+34, r25	; 0x22
    3d3c:	89 a3       	std	Y+33, r24	; 0x21
    3d3e:	0f c0       	rjmp	.+30     	; 0x3d5e <main+0x100>
    3d40:	88 ec       	ldi	r24, 0xC8	; 200
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	98 a3       	std	Y+32, r25	; 0x20
    3d46:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d48:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d4a:	98 a1       	ldd	r25, Y+32	; 0x20
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <main+0xee>
    3d50:	98 a3       	std	Y+32, r25	; 0x20
    3d52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d54:	89 a1       	ldd	r24, Y+33	; 0x21
    3d56:	9a a1       	ldd	r25, Y+34	; 0x22
    3d58:	01 97       	sbiw	r24, 0x01	; 1
    3d5a:	9a a3       	std	Y+34, r25	; 0x22
    3d5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d5e:	89 a1       	ldd	r24, Y+33	; 0x21
    3d60:	9a a1       	ldd	r25, Y+34	; 0x22
    3d62:	00 97       	sbiw	r24, 0x00	; 0
    3d64:	69 f7       	brne	.-38     	; 0x3d40 <main+0xe2>
    3d66:	14 c0       	rjmp	.+40     	; 0x3d90 <main+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d68:	6b a1       	ldd	r22, Y+35	; 0x23
    3d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	9a a3       	std	Y+34, r25	; 0x22
    3d7a:	89 a3       	std	Y+33, r24	; 0x21
    3d7c:	89 a1       	ldd	r24, Y+33	; 0x21
    3d7e:	9a a1       	ldd	r25, Y+34	; 0x22
    3d80:	9e 8f       	std	Y+30, r25	; 0x1e
    3d82:	8d 8f       	std	Y+29, r24	; 0x1d
    3d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d86:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <main+0x12a>
    3d8c:	9e 8f       	std	Y+30, r25	; 0x1e
    3d8e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	LCD_displayString("MADE BY : Mohamed Ezzat");
    3d90:	80 e8       	ldi	r24, 0x80	; 128
    3d92:	91 e0       	ldi	r25, 0x01	; 1
    3d94:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	aa ef       	ldi	r26, 0xFA	; 250
    3d9e:	b4 e4       	ldi	r27, 0x44	; 68
    3da0:	89 8f       	std	Y+25, r24	; 0x19
    3da2:	9a 8f       	std	Y+26, r25	; 0x1a
    3da4:	ab 8f       	std	Y+27, r26	; 0x1b
    3da6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da8:	69 8d       	ldd	r22, Y+25	; 0x19
    3daa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	4a ef       	ldi	r20, 0xFA	; 250
    3db6:	54 e4       	ldi	r21, 0x44	; 68
    3db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	8d 8b       	std	Y+21, r24	; 0x15
    3dc2:	9e 8b       	std	Y+22, r25	; 0x16
    3dc4:	af 8b       	std	Y+23, r26	; 0x17
    3dc6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    3dca:	7e 89       	ldd	r23, Y+22	; 0x16
    3dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    3dce:	98 8d       	ldd	r25, Y+24	; 0x18
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e8       	ldi	r20, 0x80	; 128
    3dd6:	5f e3       	ldi	r21, 0x3F	; 63
    3dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ddc:	88 23       	and	r24, r24
    3dde:	2c f4       	brge	.+10     	; 0x3dea <main+0x18c>
		__ticks = 1;
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	9c 8b       	std	Y+20, r25	; 0x14
    3de6:	8b 8b       	std	Y+19, r24	; 0x13
    3de8:	3f c0       	rjmp	.+126    	; 0x3e68 <main+0x20a>
	else if (__tmp > 65535)
    3dea:	6d 89       	ldd	r22, Y+21	; 0x15
    3dec:	7e 89       	ldd	r23, Y+22	; 0x16
    3dee:	8f 89       	ldd	r24, Y+23	; 0x17
    3df0:	98 8d       	ldd	r25, Y+24	; 0x18
    3df2:	20 e0       	ldi	r18, 0x00	; 0
    3df4:	3f ef       	ldi	r19, 0xFF	; 255
    3df6:	4f e7       	ldi	r20, 0x7F	; 127
    3df8:	57 e4       	ldi	r21, 0x47	; 71
    3dfa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dfe:	18 16       	cp	r1, r24
    3e00:	4c f5       	brge	.+82     	; 0x3e54 <main+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e02:	69 8d       	ldd	r22, Y+25	; 0x19
    3e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e2       	ldi	r20, 0x20	; 32
    3e10:	51 e4       	ldi	r21, 0x41	; 65
    3e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	cd 01       	movw	r24, r26
    3e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	9c 8b       	std	Y+20, r25	; 0x14
    3e28:	8b 8b       	std	Y+19, r24	; 0x13
    3e2a:	0f c0       	rjmp	.+30     	; 0x3e4a <main+0x1ec>
    3e2c:	88 ec       	ldi	r24, 0xC8	; 200
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	9a 8b       	std	Y+18, r25	; 0x12
    3e32:	89 8b       	std	Y+17, r24	; 0x11
    3e34:	89 89       	ldd	r24, Y+17	; 0x11
    3e36:	9a 89       	ldd	r25, Y+18	; 0x12
    3e38:	01 97       	sbiw	r24, 0x01	; 1
    3e3a:	f1 f7       	brne	.-4      	; 0x3e38 <main+0x1da>
    3e3c:	9a 8b       	std	Y+18, r25	; 0x12
    3e3e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e40:	8b 89       	ldd	r24, Y+19	; 0x13
    3e42:	9c 89       	ldd	r25, Y+20	; 0x14
    3e44:	01 97       	sbiw	r24, 0x01	; 1
    3e46:	9c 8b       	std	Y+20, r25	; 0x14
    3e48:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e4a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e4c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e4e:	00 97       	sbiw	r24, 0x00	; 0
    3e50:	69 f7       	brne	.-38     	; 0x3e2c <main+0x1ce>
    3e52:	14 c0       	rjmp	.+40     	; 0x3e7c <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e54:	6d 89       	ldd	r22, Y+21	; 0x15
    3e56:	7e 89       	ldd	r23, Y+22	; 0x16
    3e58:	8f 89       	ldd	r24, Y+23	; 0x17
    3e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e60:	dc 01       	movw	r26, r24
    3e62:	cb 01       	movw	r24, r22
    3e64:	9c 8b       	std	Y+20, r25	; 0x14
    3e66:	8b 8b       	std	Y+19, r24	; 0x13
    3e68:	8b 89       	ldd	r24, Y+19	; 0x13
    3e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e6c:	98 8b       	std	Y+16, r25	; 0x10
    3e6e:	8f 87       	std	Y+15, r24	; 0x0f
    3e70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e72:	98 89       	ldd	r25, Y+16	; 0x10
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	f1 f7       	brne	.-4      	; 0x3e74 <main+0x216>
    3e78:	98 8b       	std	Y+16, r25	; 0x10
    3e7a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	LCD_clearScreen();
    3e7c:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <LCD_clearScreen>
	LCD_displayString("            WELCOME");
    3e80:	88 e9       	ldi	r24, 0x98	; 152
    3e82:	91 e0       	ldi	r25, 0x01	; 1
    3e84:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <LCD_displayString>
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	aa ef       	ldi	r26, 0xFA	; 250
    3e8e:	b4 e4       	ldi	r27, 0x44	; 68
    3e90:	8b 87       	std	Y+11, r24	; 0x0b
    3e92:	9c 87       	std	Y+12, r25	; 0x0c
    3e94:	ad 87       	std	Y+13, r26	; 0x0d
    3e96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	4a ef       	ldi	r20, 0xFA	; 250
    3ea6:	54 e4       	ldi	r21, 0x44	; 68
    3ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	8f 83       	std	Y+7, r24	; 0x07
    3eb2:	98 87       	std	Y+8, r25	; 0x08
    3eb4:	a9 87       	std	Y+9, r26	; 0x09
    3eb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eba:	78 85       	ldd	r23, Y+8	; 0x08
    3ebc:	89 85       	ldd	r24, Y+9	; 0x09
    3ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	40 e8       	ldi	r20, 0x80	; 128
    3ec6:	5f e3       	ldi	r21, 0x3F	; 63
    3ec8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ecc:	88 23       	and	r24, r24
    3ece:	2c f4       	brge	.+10     	; 0x3eda <main+0x27c>
		__ticks = 1;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	9e 83       	std	Y+6, r25	; 0x06
    3ed6:	8d 83       	std	Y+5, r24	; 0x05
    3ed8:	3f c0       	rjmp	.+126    	; 0x3f58 <main+0x2fa>
	else if (__tmp > 65535)
    3eda:	6f 81       	ldd	r22, Y+7	; 0x07
    3edc:	78 85       	ldd	r23, Y+8	; 0x08
    3ede:	89 85       	ldd	r24, Y+9	; 0x09
    3ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	3f ef       	ldi	r19, 0xFF	; 255
    3ee6:	4f e7       	ldi	r20, 0x7F	; 127
    3ee8:	57 e4       	ldi	r21, 0x47	; 71
    3eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eee:	18 16       	cp	r1, r24
    3ef0:	4c f5       	brge	.+82     	; 0x3f44 <main+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e2       	ldi	r20, 0x20	; 32
    3f00:	51 e4       	ldi	r21, 0x41	; 65
    3f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	cd 01       	movw	r24, r26
    3f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f12:	dc 01       	movw	r26, r24
    3f14:	cb 01       	movw	r24, r22
    3f16:	9e 83       	std	Y+6, r25	; 0x06
    3f18:	8d 83       	std	Y+5, r24	; 0x05
    3f1a:	0f c0       	rjmp	.+30     	; 0x3f3a <main+0x2dc>
    3f1c:	88 ec       	ldi	r24, 0xC8	; 200
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	9c 83       	std	Y+4, r25	; 0x04
    3f22:	8b 83       	std	Y+3, r24	; 0x03
    3f24:	8b 81       	ldd	r24, Y+3	; 0x03
    3f26:	9c 81       	ldd	r25, Y+4	; 0x04
    3f28:	01 97       	sbiw	r24, 0x01	; 1
    3f2a:	f1 f7       	brne	.-4      	; 0x3f28 <main+0x2ca>
    3f2c:	9c 83       	std	Y+4, r25	; 0x04
    3f2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f30:	8d 81       	ldd	r24, Y+5	; 0x05
    3f32:	9e 81       	ldd	r25, Y+6	; 0x06
    3f34:	01 97       	sbiw	r24, 0x01	; 1
    3f36:	9e 83       	std	Y+6, r25	; 0x06
    3f38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	69 f7       	brne	.-38     	; 0x3f1c <main+0x2be>
    3f42:	14 c0       	rjmp	.+40     	; 0x3f6c <main+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f44:	6f 81       	ldd	r22, Y+7	; 0x07
    3f46:	78 85       	ldd	r23, Y+8	; 0x08
    3f48:	89 85       	ldd	r24, Y+9	; 0x09
    3f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	9e 83       	std	Y+6, r25	; 0x06
    3f56:	8d 83       	std	Y+5, r24	; 0x05
    3f58:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5c:	9a 83       	std	Y+2, r25	; 0x02
    3f5e:	89 83       	std	Y+1, r24	; 0x01
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	9a 81       	ldd	r25, Y+2	; 0x02
    3f64:	01 97       	sbiw	r24, 0x01	; 1
    3f66:	f1 f7       	brne	.-4      	; 0x3f64 <main+0x306>
    3f68:	9a 83       	std	Y+2, r25	; 0x02
    3f6a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);

	HMI_createSystemPassword();
    3f6c:	0e 94 19 09 	call	0x1232	; 0x1232 <HMI_createSystemPassword>
    3f70:	ff cf       	rjmp	.-2      	; 0x3f70 <main+0x312>

00003f72 <__vector_9>:

/****************************Functions and ISRs*********************************/

/* Normal mode ISR */
ISR(TIMER1_OVF_vect)
{
    3f72:	1f 92       	push	r1
    3f74:	0f 92       	push	r0
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	0f 92       	push	r0
    3f7a:	11 24       	eor	r1, r1
    3f7c:	2f 93       	push	r18
    3f7e:	3f 93       	push	r19
    3f80:	4f 93       	push	r20
    3f82:	5f 93       	push	r21
    3f84:	6f 93       	push	r22
    3f86:	7f 93       	push	r23
    3f88:	8f 93       	push	r24
    3f8a:	9f 93       	push	r25
    3f8c:	af 93       	push	r26
    3f8e:	bf 93       	push	r27
    3f90:	ef 93       	push	r30
    3f92:	ff 93       	push	r31
    3f94:	df 93       	push	r29
    3f96:	cf 93       	push	r28
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3f9c:	80 91 bc 01 	lds	r24, 0x01BC
    3fa0:	90 91 bd 01 	lds	r25, 0x01BD
    3fa4:	00 97       	sbiw	r24, 0x00	; 0
    3fa6:	29 f0       	breq	.+10     	; 0x3fb2 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    3fa8:	e0 91 bc 01 	lds	r30, 0x01BC
    3fac:	f0 91 bd 01 	lds	r31, 0x01BD
    3fb0:	09 95       	icall
	}
}
    3fb2:	cf 91       	pop	r28
    3fb4:	df 91       	pop	r29
    3fb6:	ff 91       	pop	r31
    3fb8:	ef 91       	pop	r30
    3fba:	bf 91       	pop	r27
    3fbc:	af 91       	pop	r26
    3fbe:	9f 91       	pop	r25
    3fc0:	8f 91       	pop	r24
    3fc2:	7f 91       	pop	r23
    3fc4:	6f 91       	pop	r22
    3fc6:	5f 91       	pop	r21
    3fc8:	4f 91       	pop	r20
    3fca:	3f 91       	pop	r19
    3fcc:	2f 91       	pop	r18
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	0f 90       	pop	r0
    3fd4:	1f 90       	pop	r1
    3fd6:	18 95       	reti

00003fd8 <__vector_7>:

/* Compare mode ISR */
ISR(TIMER1_COMPA_vect)
{
    3fd8:	1f 92       	push	r1
    3fda:	0f 92       	push	r0
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	0f 92       	push	r0
    3fe0:	11 24       	eor	r1, r1
    3fe2:	2f 93       	push	r18
    3fe4:	3f 93       	push	r19
    3fe6:	4f 93       	push	r20
    3fe8:	5f 93       	push	r21
    3fea:	6f 93       	push	r22
    3fec:	7f 93       	push	r23
    3fee:	8f 93       	push	r24
    3ff0:	9f 93       	push	r25
    3ff2:	af 93       	push	r26
    3ff4:	bf 93       	push	r27
    3ff6:	ef 93       	push	r30
    3ff8:	ff 93       	push	r31
    3ffa:	df 93       	push	r29
    3ffc:	cf 93       	push	r28
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    4002:	80 91 bc 01 	lds	r24, 0x01BC
    4006:	90 91 bd 01 	lds	r25, 0x01BD
    400a:	00 97       	sbiw	r24, 0x00	; 0
    400c:	29 f0       	breq	.+10     	; 0x4018 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    400e:	e0 91 bc 01 	lds	r30, 0x01BC
    4012:	f0 91 bd 01 	lds	r31, 0x01BD
    4016:	09 95       	icall
	}
}
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	ff 91       	pop	r31
    401e:	ef 91       	pop	r30
    4020:	bf 91       	pop	r27
    4022:	af 91       	pop	r26
    4024:	9f 91       	pop	r25
    4026:	8f 91       	pop	r24
    4028:	7f 91       	pop	r23
    402a:	6f 91       	pop	r22
    402c:	5f 91       	pop	r21
    402e:	4f 91       	pop	r20
    4030:	3f 91       	pop	r19
    4032:	2f 91       	pop	r18
    4034:	0f 90       	pop	r0
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	0f 90       	pop	r0
    403a:	1f 90       	pop	r1
    403c:	18 95       	reti

0000403e <TIMER1_init>:
/*
 * Description :
 * A function to initialize the timer
 */
void TIMER1_init(const Timer1_ConfigType* config_ptr)
{
    403e:	df 93       	push	r29
    4040:	cf 93       	push	r28
    4042:	00 d0       	rcall	.+0      	; 0x4044 <TIMER1_init+0x6>
    4044:	cd b7       	in	r28, 0x3d	; 61
    4046:	de b7       	in	r29, 0x3e	; 62
    4048:	9a 83       	std	Y+2, r25	; 0x02
    404a:	89 83       	std	Y+1, r24	; 0x01
	 * For TCCR1A register : -
	 * non-pwm mode so FOC1A and FOC2A = 1
	 * in case of compare and normal mode , WGM11 & WGM10 & WGM13 = 0
	 * but only WGM12 = 1 in case of compare and equal to 0 in case of normal mode
	 */
	TCCR1A = ( 1 << FOC1A ) | ( 1 << FOC1B );
    404c:	ef e4       	ldi	r30, 0x4F	; 79
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	8c e0       	ldi	r24, 0x0C	; 12
    4052:	80 83       	st	Z, r24
	/*
	 * For TCCR1B register : -
	 * WGM12 = 1 -> Compare mode or 0 -> Normal mode
	 * CS12 : CS10 = prescaler value
	 */
	TCCR1B = ( config_ptr -> prescaler ) | ( ( config_ptr -> mode ) << WGM12 );
    4054:	ae e4       	ldi	r26, 0x4E	; 78
    4056:	b0 e0       	ldi	r27, 0x00	; 0
    4058:	e9 81       	ldd	r30, Y+1	; 0x01
    405a:	fa 81       	ldd	r31, Y+2	; 0x02
    405c:	84 81       	ldd	r24, Z+4	; 0x04
    405e:	28 2f       	mov	r18, r24
    4060:	e9 81       	ldd	r30, Y+1	; 0x01
    4062:	fa 81       	ldd	r31, Y+2	; 0x02
    4064:	85 81       	ldd	r24, Z+5	; 0x05
    4066:	88 2f       	mov	r24, r24
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	88 0f       	add	r24, r24
    406c:	99 1f       	adc	r25, r25
    406e:	88 0f       	add	r24, r24
    4070:	99 1f       	adc	r25, r25
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	82 2b       	or	r24, r18
    4078:	8c 93       	st	X, r24
	/*
	 * OCR1A and TCNT1 and TIMASK registers configurations : -
	 */

	/*Timer works in compare mode*/
	if(config_ptr->mode==COMPARE)
    407a:	e9 81       	ldd	r30, Y+1	; 0x01
    407c:	fa 81       	ldd	r31, Y+2	; 0x02
    407e:	85 81       	ldd	r24, Z+5	; 0x05
    4080:	81 30       	cpi	r24, 0x01	; 1
    4082:	71 f4       	brne	.+28     	; 0x40a0 <TIMER1_init+0x62>
	{
		/*
		 * For OCR1A register : -
		 * we put the max compare mode value here in case of compare mode only
		 */
		OCR1A = config_ptr -> compare_value;
    4084:	aa e4       	ldi	r26, 0x4A	; 74
    4086:	b0 e0       	ldi	r27, 0x00	; 0
    4088:	e9 81       	ldd	r30, Y+1	; 0x01
    408a:	fa 81       	ldd	r31, Y+2	; 0x02
    408c:	82 81       	ldd	r24, Z+2	; 0x02
    408e:	93 81       	ldd	r25, Z+3	; 0x03
    4090:	11 96       	adiw	r26, 0x01	; 1
    4092:	9c 93       	st	X, r25
    4094:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable compare mode (A) interrupt
		 */
		TIMSK=(1<<OCIE1A);
    4096:	e9 e5       	ldi	r30, 0x59	; 89
    4098:	f0 e0       	ldi	r31, 0x00	; 0
    409a:	80 e1       	ldi	r24, 0x10	; 16
    409c:	80 83       	st	Z, r24
    409e:	12 c0       	rjmp	.+36     	; 0x40c4 <TIMER1_init+0x86>
	}

	/*Timer works in Normal mode*/
	else if(config_ptr->mode==NORMAL)
    40a0:	e9 81       	ldd	r30, Y+1	; 0x01
    40a2:	fa 81       	ldd	r31, Y+2	; 0x02
    40a4:	85 81       	ldd	r24, Z+5	; 0x05
    40a6:	88 23       	and	r24, r24
    40a8:	69 f4       	brne	.+26     	; 0x40c4 <TIMER1_init+0x86>
	{
		/*
		 * For TCNT1 register : -
		 * we put the initial counter value here
		 */
		TCNT1 = config_ptr -> initial_value;
    40aa:	ac e4       	ldi	r26, 0x4C	; 76
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e9 81       	ldd	r30, Y+1	; 0x01
    40b0:	fa 81       	ldd	r31, Y+2	; 0x02
    40b2:	80 81       	ld	r24, Z
    40b4:	91 81       	ldd	r25, Z+1	; 0x01
    40b6:	11 96       	adiw	r26, 0x01	; 1
    40b8:	9c 93       	st	X, r25
    40ba:	8e 93       	st	-X, r24

		/*
		 * For TIMSK register : -
		 * we enable Normal mode interrupt
		 */
		TIMSK = ( 1 << TOIE1 );
    40bc:	e9 e5       	ldi	r30, 0x59	; 89
    40be:	f0 e0       	ldi	r31, 0x00	; 0
    40c0:	84 e0       	ldi	r24, 0x04	; 4
    40c2:	80 83       	st	Z, r24
	}
}
    40c4:	0f 90       	pop	r0
    40c6:	0f 90       	pop	r0
    40c8:	cf 91       	pop	r28
    40ca:	df 91       	pop	r29
    40cc:	08 95       	ret

000040ce <TIMER1_deInit>:
/*
 * Description :
 * A function to disable the timer
 */
void TIMER1_deInit(void)
{
    40ce:	df 93       	push	r29
    40d0:	cf 93       	push	r28
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
	/* clear all registers */
	TCCR1A = TCCR1B = TIMSK = TCNT1 = OCR1A = 0;
    40d6:	6f e4       	ldi	r22, 0x4F	; 79
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	4e e4       	ldi	r20, 0x4E	; 78
    40dc:	50 e0       	ldi	r21, 0x00	; 0
    40de:	29 e5       	ldi	r18, 0x59	; 89
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	ac e4       	ldi	r26, 0x4C	; 76
    40e4:	b0 e0       	ldi	r27, 0x00	; 0
    40e6:	ea e4       	ldi	r30, 0x4A	; 74
    40e8:	f0 e0       	ldi	r31, 0x00	; 0
    40ea:	11 82       	std	Z+1, r1	; 0x01
    40ec:	10 82       	st	Z, r1
    40ee:	80 81       	ld	r24, Z
    40f0:	91 81       	ldd	r25, Z+1	; 0x01
    40f2:	11 96       	adiw	r26, 0x01	; 1
    40f4:	9c 93       	st	X, r25
    40f6:	8e 93       	st	-X, r24
    40f8:	8d 91       	ld	r24, X+
    40fa:	9c 91       	ld	r25, X
    40fc:	11 97       	sbiw	r26, 0x01	; 1
    40fe:	f9 01       	movw	r30, r18
    4100:	80 83       	st	Z, r24
    4102:	f9 01       	movw	r30, r18
    4104:	80 81       	ld	r24, Z
    4106:	fa 01       	movw	r30, r20
    4108:	80 83       	st	Z, r24
    410a:	fa 01       	movw	r30, r20
    410c:	80 81       	ld	r24, Z
    410e:	fb 01       	movw	r30, r22
    4110:	80 83       	st	Z, r24
}
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	08 95       	ret

00004118 <TIMER1_setCallBack>:
/*
 * Description : -
 * A function to set callback function
 */
void TIMER1_setCallBack(void ( *a_ptr ) ( void ))
{
    4118:	df 93       	push	r29
    411a:	cf 93       	push	r28
    411c:	00 d0       	rcall	.+0      	; 0x411e <TIMER1_setCallBack+0x6>
    411e:	cd b7       	in	r28, 0x3d	; 61
    4120:	de b7       	in	r29, 0x3e	; 62
    4122:	9a 83       	std	Y+2, r25	; 0x02
    4124:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = (volatile void (*)(void))a_ptr;
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	9a 81       	ldd	r25, Y+2	; 0x02
    412a:	90 93 bd 01 	sts	0x01BD, r25
    412e:	80 93 bc 01 	sts	0x01BC, r24

}
    4132:	0f 90       	pop	r0
    4134:	0f 90       	pop	r0
    4136:	cf 91       	pop	r28
    4138:	df 91       	pop	r29
    413a:	08 95       	ret

0000413c <UART_init>:
 * Description :
 * A function to setup the UART with the given baud rate and number of send bits and parity
 * checker and number of stop bits .
 */
void UART_init(const UART_ConfigType* config)
{
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	00 d0       	rcall	.+0      	; 0x4142 <UART_init+0x6>
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
    4146:	9a 83       	std	Y+2, r25	; 0x02
    4148:	89 83       	std	Y+1, r24	; 0x01
	/*double speed mode*/
	UCSRA = ( 1 << U2X );
    414a:	eb e2       	ldi	r30, 0x2B	; 43
    414c:	f0 e0       	ldi	r31, 0x00	; 0
    414e:	82 e0       	ldi	r24, 0x02	; 2
    4150:	80 83       	st	Z, r24

	/*Enable Transmitter and Receiver*/
	UCSRB = ( 1 << RXEN ) | ( 1 << TXEN );
    4152:	ea e2       	ldi	r30, 0x2A	; 42
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	88 e1       	ldi	r24, 0x18	; 24
    4158:	80 83       	st	Z, r24

	/*Select register UCSRC*/
	UCSRC = ( 1 << URSEL );
    415a:	e0 e4       	ldi	r30, 0x40	; 64
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	80 e8       	ldi	r24, 0x80	; 128
    4160:	80 83       	st	Z, r24

	/*Parity checker*/
	UCSRC |= ( ( config -> parity & 1 ) << UPM0 ) | ( ( config -> parity & 2 )<< UPM1 );
    4162:	a0 e4       	ldi	r26, 0x40	; 64
    4164:	b0 e0       	ldi	r27, 0x00	; 0
    4166:	e0 e4       	ldi	r30, 0x40	; 64
    4168:	f0 e0       	ldi	r31, 0x00	; 0
    416a:	80 81       	ld	r24, Z
    416c:	38 2f       	mov	r19, r24
    416e:	e9 81       	ldd	r30, Y+1	; 0x01
    4170:	fa 81       	ldd	r31, Y+2	; 0x02
    4172:	81 81       	ldd	r24, Z+1	; 0x01
    4174:	88 2f       	mov	r24, r24
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	81 70       	andi	r24, 0x01	; 1
    417a:	90 70       	andi	r25, 0x00	; 0
    417c:	82 95       	swap	r24
    417e:	92 95       	swap	r25
    4180:	90 7f       	andi	r25, 0xF0	; 240
    4182:	98 27       	eor	r25, r24
    4184:	80 7f       	andi	r24, 0xF0	; 240
    4186:	98 27       	eor	r25, r24
    4188:	28 2f       	mov	r18, r24
    418a:	e9 81       	ldd	r30, Y+1	; 0x01
    418c:	fa 81       	ldd	r31, Y+2	; 0x02
    418e:	81 81       	ldd	r24, Z+1	; 0x01
    4190:	88 2f       	mov	r24, r24
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	82 70       	andi	r24, 0x02	; 2
    4196:	90 70       	andi	r25, 0x00	; 0
    4198:	88 0f       	add	r24, r24
    419a:	99 1f       	adc	r25, r25
    419c:	82 95       	swap	r24
    419e:	92 95       	swap	r25
    41a0:	90 7f       	andi	r25, 0xF0	; 240
    41a2:	98 27       	eor	r25, r24
    41a4:	80 7f       	andi	r24, 0xF0	; 240
    41a6:	98 27       	eor	r25, r24
    41a8:	82 2b       	or	r24, r18
    41aa:	83 2b       	or	r24, r19
    41ac:	8c 93       	st	X, r24

	/*Number of stop bits*/
	UCSRC |= ( config->stop_bit) << USBS ;
    41ae:	a0 e4       	ldi	r26, 0x40	; 64
    41b0:	b0 e0       	ldi	r27, 0x00	; 0
    41b2:	e0 e4       	ldi	r30, 0x40	; 64
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	80 81       	ld	r24, Z
    41b8:	28 2f       	mov	r18, r24
    41ba:	e9 81       	ldd	r30, Y+1	; 0x01
    41bc:	fa 81       	ldd	r31, Y+2	; 0x02
    41be:	82 81       	ldd	r24, Z+2	; 0x02
    41c0:	88 2f       	mov	r24, r24
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	88 0f       	add	r24, r24
    41c6:	99 1f       	adc	r25, r25
    41c8:	88 0f       	add	r24, r24
    41ca:	99 1f       	adc	r25, r25
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	82 2b       	or	r24, r18
    41d2:	8c 93       	st	X, r24

	/*Character size*/
	UCSRC |= ( ( config -> bit_data & 1 ) << UCSZ0 ) | ( ( config -> bit_data & 2 ) << UCSZ1);
    41d4:	a0 e4       	ldi	r26, 0x40	; 64
    41d6:	b0 e0       	ldi	r27, 0x00	; 0
    41d8:	e0 e4       	ldi	r30, 0x40	; 64
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	80 81       	ld	r24, Z
    41de:	38 2f       	mov	r19, r24
    41e0:	e9 81       	ldd	r30, Y+1	; 0x01
    41e2:	fa 81       	ldd	r31, Y+2	; 0x02
    41e4:	80 81       	ld	r24, Z
    41e6:	88 2f       	mov	r24, r24
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	81 70       	andi	r24, 0x01	; 1
    41ec:	90 70       	andi	r25, 0x00	; 0
    41ee:	88 0f       	add	r24, r24
    41f0:	99 1f       	adc	r25, r25
    41f2:	28 2f       	mov	r18, r24
    41f4:	e9 81       	ldd	r30, Y+1	; 0x01
    41f6:	fa 81       	ldd	r31, Y+2	; 0x02
    41f8:	80 81       	ld	r24, Z
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	82 70       	andi	r24, 0x02	; 2
    4200:	90 70       	andi	r25, 0x00	; 0
    4202:	88 0f       	add	r24, r24
    4204:	99 1f       	adc	r25, r25
    4206:	88 0f       	add	r24, r24
    4208:	99 1f       	adc	r25, r25
    420a:	82 2b       	or	r24, r18
    420c:	83 2b       	or	r24, r19
    420e:	8c 93       	st	X, r24

	/* Setup the baud rate value
	 * UBRRL = 1st 8 bits of rate
	 * UBRRh = The other bits
	 */
	UBRRL = (uint8) config -> baud_rate ;
    4210:	a9 e2       	ldi	r26, 0x29	; 41
    4212:	b0 e0       	ldi	r27, 0x00	; 0
    4214:	e9 81       	ldd	r30, Y+1	; 0x01
    4216:	fa 81       	ldd	r31, Y+2	; 0x02
    4218:	83 81       	ldd	r24, Z+3	; 0x03
    421a:	94 81       	ldd	r25, Z+4	; 0x04
    421c:	8c 93       	st	X, r24
	UBRRH = (config -> baud_rate) >> 8;
    421e:	a0 e4       	ldi	r26, 0x40	; 64
    4220:	b0 e0       	ldi	r27, 0x00	; 0
    4222:	e9 81       	ldd	r30, Y+1	; 0x01
    4224:	fa 81       	ldd	r31, Y+2	; 0x02
    4226:	83 81       	ldd	r24, Z+3	; 0x03
    4228:	94 81       	ldd	r25, Z+4	; 0x04
    422a:	89 2f       	mov	r24, r25
    422c:	99 27       	eor	r25, r25
    422e:	8c 93       	st	X, r24
}
    4230:	0f 90       	pop	r0
    4232:	0f 90       	pop	r0
    4234:	cf 91       	pop	r28
    4236:	df 91       	pop	r29
    4238:	08 95       	ret

0000423a <UART_sendByte>:
/*
 * Description :
 * A function to send a given byte using UART
 */
void UART_sendByte(const uint8 data)
{
    423a:	df 93       	push	r29
    423c:	cf 93       	push	r28
    423e:	0f 92       	push	r0
    4240:	cd b7       	in	r28, 0x3d	; 61
    4242:	de b7       	in	r29, 0x3e	; 62
    4244:	89 83       	std	Y+1, r24	; 0x01
	/*Polling till the UDR register is empty*/
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    4246:	eb e2       	ldi	r30, 0x2B	; 43
    4248:	f0 e0       	ldi	r31, 0x00	; 0
    424a:	80 81       	ld	r24, Z
    424c:	88 2f       	mov	r24, r24
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	80 72       	andi	r24, 0x20	; 32
    4252:	90 70       	andi	r25, 0x00	; 0
    4254:	00 97       	sbiw	r24, 0x00	; 0
    4256:	b9 f3       	breq	.-18     	; 0x4246 <UART_sendByte+0xc>

	/*send the data*/
	UDR=data;
    4258:	ec e2       	ldi	r30, 0x2C	; 44
    425a:	f0 e0       	ldi	r31, 0x00	; 0
    425c:	89 81       	ldd	r24, Y+1	; 0x01
    425e:	80 83       	st	Z, r24

}
    4260:	0f 90       	pop	r0
    4262:	cf 91       	pop	r28
    4264:	df 91       	pop	r29
    4266:	08 95       	ret

00004268 <UART_recieveByte>:
/*
 * Description :
 * A function to return the received byte
 */
uint8 UART_recieveByte(void)
{
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
	/*Polling till the receive is completed*/
	while(BIT_IS_CLEAR(UCSRA,RXC));
    4270:	eb e2       	ldi	r30, 0x2B	; 43
    4272:	f0 e0       	ldi	r31, 0x00	; 0
    4274:	80 81       	ld	r24, Z
    4276:	88 23       	and	r24, r24
    4278:	dc f7       	brge	.-10     	; 0x4270 <UART_recieveByte+0x8>

	/*get the data from UDR register and return it*/
	return UDR;
    427a:	ec e2       	ldi	r30, 0x2C	; 44
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	80 81       	ld	r24, Z

}
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <UART_sendString>:
 * Description :
 * A function to send a given string , u don't need to add anything after the end of string
 * but don't send a string that contain #
 */
void UART_sendString(const uint8 *str)
{
    4286:	df 93       	push	r29
    4288:	cf 93       	push	r28
    428a:	00 d0       	rcall	.+0      	; 0x428c <UART_sendString+0x6>
    428c:	00 d0       	rcall	.+0      	; 0x428e <UART_sendString+0x8>
    428e:	cd b7       	in	r28, 0x3d	; 61
    4290:	de b7       	in	r29, 0x3e	; 62
    4292:	9c 83       	std	Y+4, r25	; 0x04
    4294:	8b 83       	std	Y+3, r24	; 0x03
	int counter;

	/*Sending our string*/
	for(counter=0;str[counter]!='\0';counter++)
    4296:	1a 82       	std	Y+2, r1	; 0x02
    4298:	19 82       	std	Y+1, r1	; 0x01
    429a:	0f c0       	rjmp	.+30     	; 0x42ba <UART_sendString+0x34>
		UART_sendByte(str[counter]);
    429c:	29 81       	ldd	r18, Y+1	; 0x01
    429e:	3a 81       	ldd	r19, Y+2	; 0x02
    42a0:	8b 81       	ldd	r24, Y+3	; 0x03
    42a2:	9c 81       	ldd	r25, Y+4	; 0x04
    42a4:	fc 01       	movw	r30, r24
    42a6:	e2 0f       	add	r30, r18
    42a8:	f3 1f       	adc	r31, r19
    42aa:	80 81       	ld	r24, Z
    42ac:	0e 94 1d 21 	call	0x423a	; 0x423a <UART_sendByte>
void UART_sendString(const uint8 *str)
{
	int counter;

	/*Sending our string*/
	for(counter=0;str[counter]!='\0';counter++)
    42b0:	89 81       	ldd	r24, Y+1	; 0x01
    42b2:	9a 81       	ldd	r25, Y+2	; 0x02
    42b4:	01 96       	adiw	r24, 0x01	; 1
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	29 81       	ldd	r18, Y+1	; 0x01
    42bc:	3a 81       	ldd	r19, Y+2	; 0x02
    42be:	8b 81       	ldd	r24, Y+3	; 0x03
    42c0:	9c 81       	ldd	r25, Y+4	; 0x04
    42c2:	fc 01       	movw	r30, r24
    42c4:	e2 0f       	add	r30, r18
    42c6:	f3 1f       	adc	r31, r19
    42c8:	80 81       	ld	r24, Z
    42ca:	88 23       	and	r24, r24
    42cc:	39 f7       	brne	.-50     	; 0x429c <UART_sendString+0x16>
		UART_sendByte(str[counter]);

	/*Sending # as an indication for the end of string*/
	UART_sendByte('#');
    42ce:	83 e2       	ldi	r24, 0x23	; 35
    42d0:	0e 94 1d 21 	call	0x423a	; 0x423a <UART_sendByte>

}
    42d4:	0f 90       	pop	r0
    42d6:	0f 90       	pop	r0
    42d8:	0f 90       	pop	r0
    42da:	0f 90       	pop	r0
    42dc:	cf 91       	pop	r28
    42de:	df 91       	pop	r29
    42e0:	08 95       	ret

000042e2 <UART_receiveString>:
/*
 * Description :
 * A function that receive a string ended by #
 */
void UART_receiveString(uint8 *str)
{
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	df 93       	push	r29
    42e8:	cf 93       	push	r28
    42ea:	00 d0       	rcall	.+0      	; 0x42ec <UART_receiveString+0xa>
    42ec:	00 d0       	rcall	.+0      	; 0x42ee <UART_receiveString+0xc>
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62
    42f2:	9c 83       	std	Y+4, r25	; 0x04
    42f4:	8b 83       	std	Y+3, r24	; 0x03
	int counter;

	/*Receive the first byte*/
	str[0]=UART_recieveByte();
    42f6:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
    42fa:	eb 81       	ldd	r30, Y+3	; 0x03
    42fc:	fc 81       	ldd	r31, Y+4	; 0x04
    42fe:	80 83       	st	Z, r24
    4300:	10 c0       	rjmp	.+32     	; 0x4322 <UART_receiveString+0x40>

	/*Receive the remaining bytes till #*/
	while(str[counter]!='#')
	{
		counter++;
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	9a 81       	ldd	r25, Y+2	; 0x02
    4306:	01 96       	adiw	r24, 0x01	; 1
    4308:	9a 83       	std	Y+2, r25	; 0x02
    430a:	89 83       	std	Y+1, r24	; 0x01
		str[counter]=UART_recieveByte();
    430c:	29 81       	ldd	r18, Y+1	; 0x01
    430e:	3a 81       	ldd	r19, Y+2	; 0x02
    4310:	8b 81       	ldd	r24, Y+3	; 0x03
    4312:	9c 81       	ldd	r25, Y+4	; 0x04
    4314:	8c 01       	movw	r16, r24
    4316:	02 0f       	add	r16, r18
    4318:	13 1f       	adc	r17, r19
    431a:	0e 94 34 21 	call	0x4268	; 0x4268 <UART_recieveByte>
    431e:	f8 01       	movw	r30, r16
    4320:	80 83       	st	Z, r24

	/*Receive the first byte*/
	str[0]=UART_recieveByte();

	/*Receive the remaining bytes till #*/
	while(str[counter]!='#')
    4322:	29 81       	ldd	r18, Y+1	; 0x01
    4324:	3a 81       	ldd	r19, Y+2	; 0x02
    4326:	8b 81       	ldd	r24, Y+3	; 0x03
    4328:	9c 81       	ldd	r25, Y+4	; 0x04
    432a:	fc 01       	movw	r30, r24
    432c:	e2 0f       	add	r30, r18
    432e:	f3 1f       	adc	r31, r19
    4330:	80 81       	ld	r24, Z
    4332:	83 32       	cpi	r24, 0x23	; 35
    4334:	31 f7       	brne	.-52     	; 0x4302 <UART_receiveString+0x20>
		counter++;
		str[counter]=UART_recieveByte();
	}

	/*replace # with NULL*/
	str[counter]='\0';
    4336:	89 81       	ldd	r24, Y+1	; 0x01
    4338:	9a 81       	ldd	r25, Y+2	; 0x02
    433a:	2b 81       	ldd	r18, Y+3	; 0x03
    433c:	3c 81       	ldd	r19, Y+4	; 0x04
    433e:	f9 01       	movw	r30, r18
    4340:	e8 0f       	add	r30, r24
    4342:	f9 1f       	adc	r31, r25
    4344:	10 82       	st	Z, r1
}
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	0f 90       	pop	r0
    434e:	cf 91       	pop	r28
    4350:	df 91       	pop	r29
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	08 95       	ret

00004358 <__prologue_saves__>:
    4358:	2f 92       	push	r2
    435a:	3f 92       	push	r3
    435c:	4f 92       	push	r4
    435e:	5f 92       	push	r5
    4360:	6f 92       	push	r6
    4362:	7f 92       	push	r7
    4364:	8f 92       	push	r8
    4366:	9f 92       	push	r9
    4368:	af 92       	push	r10
    436a:	bf 92       	push	r11
    436c:	cf 92       	push	r12
    436e:	df 92       	push	r13
    4370:	ef 92       	push	r14
    4372:	ff 92       	push	r15
    4374:	0f 93       	push	r16
    4376:	1f 93       	push	r17
    4378:	cf 93       	push	r28
    437a:	df 93       	push	r29
    437c:	cd b7       	in	r28, 0x3d	; 61
    437e:	de b7       	in	r29, 0x3e	; 62
    4380:	ca 1b       	sub	r28, r26
    4382:	db 0b       	sbc	r29, r27
    4384:	0f b6       	in	r0, 0x3f	; 63
    4386:	f8 94       	cli
    4388:	de bf       	out	0x3e, r29	; 62
    438a:	0f be       	out	0x3f, r0	; 63
    438c:	cd bf       	out	0x3d, r28	; 61
    438e:	09 94       	ijmp

00004390 <__epilogue_restores__>:
    4390:	2a 88       	ldd	r2, Y+18	; 0x12
    4392:	39 88       	ldd	r3, Y+17	; 0x11
    4394:	48 88       	ldd	r4, Y+16	; 0x10
    4396:	5f 84       	ldd	r5, Y+15	; 0x0f
    4398:	6e 84       	ldd	r6, Y+14	; 0x0e
    439a:	7d 84       	ldd	r7, Y+13	; 0x0d
    439c:	8c 84       	ldd	r8, Y+12	; 0x0c
    439e:	9b 84       	ldd	r9, Y+11	; 0x0b
    43a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    43a2:	b9 84       	ldd	r11, Y+9	; 0x09
    43a4:	c8 84       	ldd	r12, Y+8	; 0x08
    43a6:	df 80       	ldd	r13, Y+7	; 0x07
    43a8:	ee 80       	ldd	r14, Y+6	; 0x06
    43aa:	fd 80       	ldd	r15, Y+5	; 0x05
    43ac:	0c 81       	ldd	r16, Y+4	; 0x04
    43ae:	1b 81       	ldd	r17, Y+3	; 0x03
    43b0:	aa 81       	ldd	r26, Y+2	; 0x02
    43b2:	b9 81       	ldd	r27, Y+1	; 0x01
    43b4:	ce 0f       	add	r28, r30
    43b6:	d1 1d       	adc	r29, r1
    43b8:	0f b6       	in	r0, 0x3f	; 63
    43ba:	f8 94       	cli
    43bc:	de bf       	out	0x3e, r29	; 62
    43be:	0f be       	out	0x3f, r0	; 63
    43c0:	cd bf       	out	0x3d, r28	; 61
    43c2:	ed 01       	movw	r28, r26
    43c4:	08 95       	ret

000043c6 <itoa>:
    43c6:	fb 01       	movw	r30, r22
    43c8:	9f 01       	movw	r18, r30
    43ca:	e8 94       	clt
    43cc:	42 30       	cpi	r20, 0x02	; 2
    43ce:	c4 f0       	brlt	.+48     	; 0x4400 <itoa+0x3a>
    43d0:	45 32       	cpi	r20, 0x25	; 37
    43d2:	b4 f4       	brge	.+44     	; 0x4400 <itoa+0x3a>
    43d4:	4a 30       	cpi	r20, 0x0A	; 10
    43d6:	29 f4       	brne	.+10     	; 0x43e2 <itoa+0x1c>
    43d8:	97 fb       	bst	r25, 7
    43da:	1e f4       	brtc	.+6      	; 0x43e2 <itoa+0x1c>
    43dc:	90 95       	com	r25
    43de:	81 95       	neg	r24
    43e0:	9f 4f       	sbci	r25, 0xFF	; 255
    43e2:	64 2f       	mov	r22, r20
    43e4:	77 27       	eor	r23, r23
    43e6:	0e 94 14 22 	call	0x4428	; 0x4428 <__udivmodhi4>
    43ea:	80 5d       	subi	r24, 0xD0	; 208
    43ec:	8a 33       	cpi	r24, 0x3A	; 58
    43ee:	0c f0       	brlt	.+2      	; 0x43f2 <itoa+0x2c>
    43f0:	89 5d       	subi	r24, 0xD9	; 217
    43f2:	81 93       	st	Z+, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	00 97       	sbiw	r24, 0x00	; 0
    43f8:	a1 f7       	brne	.-24     	; 0x43e2 <itoa+0x1c>
    43fa:	16 f4       	brtc	.+4      	; 0x4400 <itoa+0x3a>
    43fc:	5d e2       	ldi	r21, 0x2D	; 45
    43fe:	51 93       	st	Z+, r21
    4400:	10 82       	st	Z, r1
    4402:	c9 01       	movw	r24, r18
    4404:	0c 94 04 22 	jmp	0x4408	; 0x4408 <strrev>

00004408 <strrev>:
    4408:	dc 01       	movw	r26, r24
    440a:	fc 01       	movw	r30, r24
    440c:	67 2f       	mov	r22, r23
    440e:	71 91       	ld	r23, Z+
    4410:	77 23       	and	r23, r23
    4412:	e1 f7       	brne	.-8      	; 0x440c <strrev+0x4>
    4414:	32 97       	sbiw	r30, 0x02	; 2
    4416:	04 c0       	rjmp	.+8      	; 0x4420 <strrev+0x18>
    4418:	7c 91       	ld	r23, X
    441a:	6d 93       	st	X+, r22
    441c:	70 83       	st	Z, r23
    441e:	62 91       	ld	r22, -Z
    4420:	ae 17       	cp	r26, r30
    4422:	bf 07       	cpc	r27, r31
    4424:	c8 f3       	brcs	.-14     	; 0x4418 <strrev+0x10>
    4426:	08 95       	ret

00004428 <__udivmodhi4>:
    4428:	aa 1b       	sub	r26, r26
    442a:	bb 1b       	sub	r27, r27
    442c:	51 e1       	ldi	r21, 0x11	; 17
    442e:	07 c0       	rjmp	.+14     	; 0x443e <__udivmodhi4_ep>

00004430 <__udivmodhi4_loop>:
    4430:	aa 1f       	adc	r26, r26
    4432:	bb 1f       	adc	r27, r27
    4434:	a6 17       	cp	r26, r22
    4436:	b7 07       	cpc	r27, r23
    4438:	10 f0       	brcs	.+4      	; 0x443e <__udivmodhi4_ep>
    443a:	a6 1b       	sub	r26, r22
    443c:	b7 0b       	sbc	r27, r23

0000443e <__udivmodhi4_ep>:
    443e:	88 1f       	adc	r24, r24
    4440:	99 1f       	adc	r25, r25
    4442:	5a 95       	dec	r21
    4444:	a9 f7       	brne	.-22     	; 0x4430 <__udivmodhi4_loop>
    4446:	80 95       	com	r24
    4448:	90 95       	com	r25
    444a:	bc 01       	movw	r22, r24
    444c:	cd 01       	movw	r24, r26
    444e:	08 95       	ret

00004450 <_exit>:
    4450:	f8 94       	cli

00004452 <__stop_program>:
    4452:	ff cf       	rjmp	.-2      	; 0x4452 <__stop_program>
